components\client\ClientSearch.jsx
```jsx
import React, { useState, useEffect } from 'react';
import useStore from '../../store';

const ClientSearch = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState(clients);
  
  // Update filtered clients when search term or clients change
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  
  return (
    <div className="relative mb-4">
      <div className="relative group">
        <svg
          className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-dark-400 group-hover:text-primary-500 transition-colors duration-200"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        
        <input
          type="search"
          placeholder="Search clients..."
          className="pl-10 pr-8 w-full p-2.5 rounded-lg border border-light-400 bg-light-200
                    focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent
                    shadow-sm hover:shadow transition-all duration-200 text-dark-600 placeholder-dark-400"
          value={searchTerm}
          onChange={handleSearchChange}
          disabled={isLoading}
        />
        
        {searchTerm && (
          <button
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-dark-400 hover:text-primary-600 transition-colors duration-200"
            onClick={handleClearSearch}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
      </div>
      
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-light-400 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto animate-fade-in">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2.5 hover:bg-light-200 flex items-center first:rounded-t-lg last:rounded-b-lg border-b border-light-300 last:border-b-0"
              onClick={() => {
                setSelectedClientId(client.client_id);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : client.compliance_status === 'yellow'
                        ? 'text-yellow-500'
                        : 'text-red-500'
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-500">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-500">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};

export default ClientSearch;
```

components\document\DocumentViewer.jsx
```jsx
import React, { useState, useEffect } from 'react';
import { Document, Page, pdfjs } from 'react-pdf';
import useStore from '../../store';
import { usePaymentFiles } from '../../hooks/useFileData';

// Set up the worker for PDF.js
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

const DocumentViewer = () => {
  const { 
    documentViewerOpen, 
    setDocumentViewerOpen, 
    selectedDocumentUrl 
  } = useStore();
  
  const [selectedFileId, setSelectedFileId] = useState(null);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [pdfError, setPdfError] = useState(false);
  const [scale, setScale] = useState(1.0);
  
  // Extract payment ID from the URL
  const paymentIdMatch = selectedDocumentUrl?.match(/\/payment\/(\d+)/);
  const paymentId = paymentIdMatch ? parseInt(paymentIdMatch[1]) : null;
  
  // Fetch files for the selected payment
  const { 
    data: files = [], 
    isLoading,
    isError
  } = usePaymentFiles(paymentId, { 
    enabled: !!paymentId && documentViewerOpen 
  });
  
  // When files are loaded, select the first file by default
  useEffect(() => {
    if (files.length > 0 && !selectedFileId) {
      setSelectedFileId(files[0].file_id);
      // Reset PDF state when a new file is selected
      setNumPages(null);
      setPageNumber(1);
      setPdfError(false);
    }
  }, [files, selectedFileId]);
  
  // Reset state when document viewer is closed
  useEffect(() => {
    if (!documentViewerOpen) {
      setSelectedFileId(null);
      setNumPages(null);
      setPageNumber(1);
      setPdfError(false);
    }
  }, [documentViewerOpen]);
  
  if (!documentViewerOpen) {
    return null;
  }
  
  const selectedFile = files.find(file => file.file_id === selectedFileId);
  
  // Function to handle PDF document loading
  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
    setPdfError(false);
  };
  
  // Function to handle PDF document loading errors
  const onDocumentLoadError = (error) => {
    console.error('Error while loading PDF:', error);
    setPdfError(true);
  };
  
  // Navigation functions for multi-page PDFs
  const goToPrevPage = () => {
    if (pageNumber > 1) {
      setPageNumber(pageNumber - 1);
    }
  };
  
  const goToNextPage = () => {
    if (pageNumber < numPages) {
      setPageNumber(pageNumber + 1);
    }
  };
  
  // Zoom functions
  const zoomIn = () => {
    setScale(prev => Math.min(prev + 0.2, 2.5));
  };
  
  const zoomOut = () => {
    setScale(prev => Math.max(prev - 0.2, 0.6));
  };
  
  const resetZoom = () => {
    setScale(1.0);
  };
  
  return (
    <div className="w-2/5 border-l border-gray-200 bg-white flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h2 className="text-lg font-medium text-gray-800">Document Preview</h2>
        <div className="flex items-center space-x-2">
          <button 
            className="w-8 h-8 flex items-center justify-center rounded-md hover:bg-gray-100"
            title="Close"
            onClick={() => setDocumentViewerOpen(false)}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
      
      <div className="flex-grow flex flex-col overflow-hidden">
        {isLoading ? (
          <div className="flex-1 flex items-center justify-center">
            <div className="w-10 h-10 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin"></div>
          </div>
        ) : isError ? (
          <div className="flex-1 flex items-center justify-center p-4 bg-red-50 text-red-700">
            Error loading document. Please try again.
          </div>
        ) : files.length === 0 ? (
          <div className="flex-1 flex items-center justify-center p-4 bg-gray-50 text-gray-500">
            No documents available for this payment.
          </div>
        ) : (
          <>
            {/* File selector */}
            {files.length > 1 && (
              <div className="flex p-2 border-b border-gray-200 overflow-x-auto">
                {files.map(file => (
                  <button
                    key={file.file_id}
                    className={`px-3 py-1.5 text-sm rounded-md mr-2 whitespace-nowrap ${
                      selectedFileId === file.file_id 
                        ? 'bg-primary-100 text-primary-700 border border-primary-300' 
                        : 'bg-gray-50 text-gray-700 border border-gray-200 hover:bg-gray-100'
                    }`}
                    onClick={() => {
                      setSelectedFileId(file.file_id);
                      setPageNumber(1);
                      setNumPages(null);
                      setPdfError(false);
                      setScale(1.0);
                    }}
                  >
                    {file.file_name}
                  </button>
                ))}
              </div>
            )}
            
            {/* Document display area */}
            <div className="flex-1 p-4 overflow-hidden flex flex-col">
              {selectedFile ? (
                <div className="h-full flex flex-col">
                  <div className="bg-gray-50 p-2 rounded-md mb-2 text-sm text-gray-700">
                    <div className="font-medium">{selectedFile.file_name}</div>
                    <div className="text-xs text-gray-500 mt-1">
                      Path: {selectedFile.full_path || selectedFile.onedrive_path}
                    </div>
                  </div>
                  
                  {/* PDF Viewer */}
                  <div className="flex-1 flex flex-col items-center bg-gray-100 rounded-md overflow-hidden">
                    {pdfError ? (
                      <div className="h-full flex items-center justify-center text-center p-4">
                        <div>
                          <svg 
                            xmlns="http://www.w3.org/2000/svg" 
                            width="64" 
                            height="64" 
                            viewBox="0 0 24 24" 
                            fill="none" 
                            stroke="currentColor" 
                            strokeWidth="2" 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            className="mx-auto mb-4 text-red-400"
                          >
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                          </svg>
                          <p className="text-red-600 font-medium mb-2">Error loading PDF</p>
                          <p className="text-sm text-gray-500 mb-4">
                            Unable to load the PDF file. Please make sure the file exists and is accessible.
                          </p>
                          <p className="text-xs text-gray-400">
                            File path: {selectedFile.full_path || selectedFile.onedrive_path}
                          </p>
                        </div>
                      </div>
                    ) : (
                      <>
                        {/* Zoom controls */}
                        <div className="w-full flex justify-center p-2 bg-gray-50 border-b border-gray-200">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={zoomOut}
                              disabled={scale <= 0.6}
                              className={`p-1 rounded ${scale <= 0.6 ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-200'}`}
                              title="Zoom out"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <circle cx="11" cy="11" r="8"></circle>
                                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                <line x1="8" y1="11" x2="14" y2="11"></line>
                              </svg>
                            </button>
                            <button
                              onClick={resetZoom}
                              className="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300 text-gray-700"
                              title="Reset zoom"
                            >
                              {Math.round(scale * 100)}%
                            </button>
                            <button
                              onClick={zoomIn}
                              disabled={scale >= 2.5}
                              className={`p-1 rounded ${scale >= 2.5 ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-200'}`}
                              title="Zoom in"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <circle cx="11" cy="11" r="8"></circle>
                                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                <line x1="11" y1="8" x2="11" y2="14"></line>
                                <line x1="8" y1="11" x2="14" y2="11"></line>
                              </svg>
                            </button>
                          </div>
                        </div>
                        
                        <div className="flex-1 w-full overflow-auto flex justify-center p-4">
                          <Document
                            file={selectedFile.full_path}
                            onLoadSuccess={onDocumentLoadSuccess}
                            onLoadError={onDocumentLoadError}
                            loading={
                              <div className="flex items-center justify-center h-full">
                                <div className="w-10 h-10 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin"></div>
                              </div>
                            }
                          >
                            <Page 
                              pageNumber={pageNumber} 
                              scale={scale}
                              renderTextLayer={false}
                              renderAnnotationLayer={false}
                            />
                          </Document>
                        </div>
                        
                        {/* Page navigation for multi-page PDFs */}
                        {numPages > 1 && (
                          <div className="p-3 bg-white border-t border-gray-200 flex items-center justify-between">
                            <button
                              onClick={goToPrevPage}
                              disabled={pageNumber <= 1}
                              className={`p-2 rounded-md ${
                                pageNumber <= 1
                                  ? 'text-gray-300 cursor-not-allowed'
                                  : 'text-gray-600 hover:bg-gray-100'
                              }`}
                            >
                              <svg 
                                xmlns="http://www.w3.org/2000/svg" 
                                width="20" 
                                height="20" 
                                viewBox="0 0 24 24" 
                                fill="none" 
                                stroke="currentColor" 
                                strokeWidth="2" 
                                strokeLinecap="round" 
                                strokeLinejoin="round"
                              >
                                <polyline points="15 18 9 12 15 6"></polyline>
                              </svg>
                            </button>
                            <span className="text-sm text-gray-600">
                              Page {pageNumber} of {numPages}
                            </span>
                            <button
                              onClick={goToNextPage}
                              disabled={pageNumber >= numPages}
                              className={`p-2 rounded-md ${
                                pageNumber >= numPages
                                  ? 'text-gray-300 cursor-not-allowed'
                                  : 'text-gray-600 hover:bg-gray-100'
                              }`}
                            >
                              <svg 
                                xmlns="http://www.w3.org/2000/svg" 
                                width="20" 
                                height="20" 
                                viewBox="0 0 24 24" 
                                fill="none" 
                                stroke="currentColor" 
                                strokeWidth="2" 
                                strokeLinecap="round" 
                                strokeLinejoin="round"
                              >
                                <polyline points="9 18 15 12 9 6"></polyline>
                              </svg>
                            </button>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              ) : (
                <div className="h-full flex items-center justify-center bg-gray-100 rounded-md">
                  <div className="text-center text-gray-500">
                    No file selected
                  </div>
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default DocumentViewer;
```

components\layout\Header.jsx
```jsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const Header = () => {
  const router = useRouter();
  
  const navItems = [
    { title: 'HOME', path: '/', active: router.pathname === '/' },
    { title: 'PAYMENTS', path: '/payments', active: router.pathname === '/payments' },
    { title: 'SUMMARY', path: '/summary', active: router.pathname === '/summary' },
    { title: 'CONTACTS', path: '/contacts', active: router.pathname === '/contacts' },
    { title: 'CONTRACTS', path: '/contracts', active: router.pathname === '/contracts' },
    { title: 'EXPORT DATA', path: '/export', active: router.pathname === '/export' },
  ];
  
  return (
    <header className="navbar-dark shadow-md">
      <div className="flex h-14 items-center justify-between px-6">
        <div className="flex items-center">
          <Link href="/" className="text-xl font-semibold text-white mr-8 hover:text-primary-300 transition-colors duration-200">
            HohimerPro
          </Link>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                href={item.path}
                className={`${
                  router.pathname === item.path 
                    ? 'bg-primary-600 text-white shadow-sm' 
                    : 'text-light-300 hover:bg-dark-accent hover:text-white'
                } rounded-md px-4 py-2 text-sm font-medium h-10 flex items-center transition-colors duration-200`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-light-300 hover:text-white transition-colors duration-200">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto bg-dark-600 px-3">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`${
                router.pathname === item.path
                  ? 'border-b-2 border-primary-500 text-white'
                  : 'text-light-400 hover:text-white'
              } px-4 py-2 text-sm`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};

export default Header;
```

components\layout\PageLayout.jsx
```jsx
import React from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import DocumentViewer from '../document/DocumentViewer';
import useStore from '../../store';

const PageLayout = ({ children, clients = [], isLoading = false }) => {
  const { documentViewerOpen } = useStore();
  
  return (
    <div className="flex flex-col min-h-screen bg-light-200">
      <Header />
      
      <div className="flex flex-1 overflow-hidden">
        <Sidebar clients={clients} isLoading={isLoading} />
        
        <div className="flex flex-1 overflow-hidden">
          <div className={`flex-1 overflow-auto px-5 py-6 ${documentViewerOpen ? 'w-3/5' : 'w-full'}`}>
            <div className={`mx-auto ${documentViewerOpen ? 'max-w-full' : 'max-w-full'}`}>
              {children}
            </div>
          </div>
          
          <DocumentViewer />
        </div>
      </div>
    </div>
  );
};

export default PageLayout;
```

components\layout\Sidebar.jsx
```jsx
import React, { useState } from 'react';
import useStore from '../../store';
import ClientSearch from '../client/ClientSearch';
import { useRouter } from 'next/router';

const Sidebar = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [showByProvider, setShowByProvider] = useState(false);
  const router = useRouter();
  
  // Group clients by provider
  const groupClientsByProvider = () => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {})
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  
  const groupedClients = groupClientsByProvider();
  
  // Get the status icon based on compliance status
  const StatusIcon = ({ status }) => {
    if (status === 'green') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-green-500"
        >
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
      );
    } else if (status === 'yellow') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-yellow-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    } else {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-red-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    }
  };
  
  if (isLoading) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-6 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
        <div className="p-2 flex-1 overflow-auto">
          <div className="animate-pulse space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between mt-3">
          <span className="text-sm font-medium text-gray-700">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      <div className="p-2 flex-1 overflow-auto">
        {groupedClients.map(([provider, providerClients]) => (
          <div key={provider} className="mb-2">
            {showByProvider && (
              <div className="px-3 py-2 text-xs font-semibold text-gray-600 bg-gray-50 rounded-md mb-1">
                {provider}
              </div>
            )}
            {providerClients.map(client => (
              <button
                key={client.client_id}
                className={`w-full flex items-center py-2 px-3 mb-1 text-left rounded transition-colors ${
                  selectedClientId === client.client_id 
                    ? 'bg-gray-100 border-l-4 border-primary-600 font-medium text-dark-700' 
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedClientId(client.client_id)}
              >
                <span className="truncate flex-grow">{client.display_name}</span>
                <span className="ml-2 flex-shrink-0">
                  <StatusIcon status={client.compliance_status} />
                </span>
              </button>
            ))}
          </div>
        ))}
        
        {clients.length === 0 && (
          <div className="p-4 text-center text-gray-500">
            No clients available
          </div>
        )}
      </div>
    </div>
  );
};

export default Sidebar;
```

components\payment\ClientDashboard.jsx
```jsx
import React from 'react';
import ContractCard from './ContractCard';
import PaymentInfoCard from './PaymentInfoCard';
import ComplianceCard from './ComplianceCard';
import ErrorDisplay from '../ui/ErrorDisplay';
import { useClient, useClientContract, useClientDashboard } from '../../hooks/useClientData';
import { usePaymentHistory } from '../../hooks/usePaymentData';
import useStore from '../../store';

const ClientDashboard = ({ clientId }) => {
  const { documentViewerOpen } = useStore();

  // Fetch dashboard data (replaces multiple API calls)
  const {
    data: dashboardData,
    isLoading: isDashboardLoading,
    error: dashboardError,
  } = useClientDashboard(clientId);

  // Keep individual hooks for components that still need them
  const {
    data: client,
    isLoading: isClientLoading,
    error: clientError,
  } = useClient(clientId);

  const {
    data: contract,
    isLoading: isContractLoading,
    error: contractError,
  } = useClientContract(clientId);

  // Fetch latest payments for metrics calculation
  const {
    data: payments = [],
    isLoading: isPaymentsLoading,
    error: paymentsError,
  } = usePaymentHistory(clientId, { page: 1, limit: 5 });

  const isLoading = isClientLoading || isContractLoading || isPaymentsLoading || isDashboardLoading;
  const error = clientError || contractError || paymentsError || dashboardError;

  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading client information"
        error={error}
      />
    );
  }

  // Determine layout based on document viewer state
  const cardLayoutClass = documentViewerOpen
    ? "grid grid-cols-1 lg:grid-cols-2 gap-6"
    : "grid grid-cols-1 md:grid-cols-3 gap-6";

  return (
    <div className="space-y-6">
      <div className={cardLayoutClass}>
        <ContractCard
          contract={contract}
          isLoading={isLoading}
        />
        <PaymentInfoCard
          client={client}
          contract={contract}
          payments={payments}
          isLoading={isLoading}
        />
        <ComplianceCard
          dashboardData={dashboardData}
          isLoading={isDashboardLoading}
        />
      </div>
    </div>
  );
};

export default ClientDashboard;
```

components\payment\ComplianceCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency, generateFeeReferences } from '../../lib/formatUtils';

const ComplianceCard = ({ dashboardData, isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
        </div>
        <div className="animate-pulse flex flex-col md:flex-row gap-4 mt-3">
          <div className="flex-1">
            <div className="h-10 bg-gray-200 rounded w-2/3 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </Card>
    );
  }

  // Use data from dashboard API instead of local calculations
  const overduePeriods = dashboardData?.payment_status?.overdue_periods || [];
  const hasOverduePeriods = overduePeriods.length > 0;
  const currentStatus = dashboardData?.payment_status?.current_status || 'Due';
  const currentPeriod = dashboardData?.payment_status?.current_period || 'N/A';
  const contract = dashboardData?.contract;
  const client = dashboardData?.client;

  // Payment status background color
  const getStatusBgColor = () => {
    if (hasOverduePeriods || currentStatus === 'Overdue') return 'bg-red-50 border-red-200 text-red-700';
    if (currentStatus === 'Due') return 'bg-yellow-50 border-yellow-200 text-yellow-700';
    if (currentStatus === 'Current') return 'bg-green-50 border-green-200 text-green-700';
    return 'bg-green-50 border-green-200 text-green-700'; // Default to green
  };

  // Payment status text
  const getStatusText = () => {
    if (hasOverduePeriods) return 'Payment Overdue';
    if (currentStatus === 'Due') return 'Payment Due';
    if (currentStatus === 'Current') return 'Up to Date';
    return currentStatus; // Use whatever the backend provides
  };

  // Get last recorded AUM for fee reference calculations
  const lastRecordedAUM = dashboardData?.recent_payments?.find(p => p.total_assets)?.total_assets || null;
  const feeReferences = contract ? generateFeeReferences(contract, lastRecordedAUM) : null;

  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
      </div>
      <div className="flex flex-col gap-4 mt-4">
        {/* Payment Status Indicator */}
        <div className="flex-1">
          <div className={`rounded border p-3 ${getStatusBgColor()}`}>
            <div className="flex items-center gap-2">
              <StatusIcon status={hasOverduePeriods || currentStatus === 'Overdue' ? "red" : (currentStatus === 'Due' ? "yellow" : "green")} />
              <span className="font-medium">{getStatusText()}</span>
            </div>
            {/* Current Period Status */}
            <div className="mt-2 text-sm">
              <span className="font-medium">Current Period:</span> {currentPeriod}
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-white bg-opacity-50">
                {currentStatus}
              </span>
            </div>
          </div>

          {/* Overdue Periods */}
          {hasOverduePeriods && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-dark-600 mb-2">Missing Previous Period</h4>
              <div className="flex flex-wrap gap-2">
                {overduePeriods.map((period, index) => (
                  <span
                    key={index}
                    className="px-2 py-1 bg-red-100 text-red-800 rounded-md text-xs font-medium"
                  >
                    {period}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Contract info */}
          {contract && (
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm">
              <div className="text-dark-500">
                <span className="font-medium">Schedule:</span> {contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly'}
              </div>
              <div className="text-dark-500">
                <span className="font-medium">Fee Type:</span> {contract.fee_type === 'flat' ? 'Flat' : 'Percentage'}
              </div>
            </div>
          )}
        </div>

        {/* Fee Reference */}
        {feeReferences && (
          <div className="mt-2 border-t border-light-300 pt-3">
            <h4 className="text-sm font-medium text-dark-600 mb-2">Fee Reference</h4>
            <div className="grid grid-cols-3 gap-2">
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Monthly</div>
                <div className="font-medium text-dark-700">{feeReferences.monthly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Quarterly</div>
                <div className="font-medium text-dark-700">{feeReferences.quarterly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Annual</div>
                <div className="font-medium text-dark-700">{feeReferences.annual}</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

// Status Icon Component
const StatusIcon = ({ status }) => {
  if (status === 'green') {
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-500">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
        <polyline points="22 4 12 14.01 9 11.01"></polyline>
      </svg>
    );
  }
  if (status === 'yellow') {
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
    );
  }
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-500">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>
  );
};

export default ComplianceCard;
```

components\payment\ContractCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/formatUtils';

const ContractCard = ({ contract, isLoading }) => {
  if (isLoading) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  
  if (!contract) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="py-6 text-center text-gray-500">
          No contract information available
        </div>
      </Card>
    );
  }
  
  const details = [
    {
      label: 'Contract Number',
      value: contract.contract_number || 'N/A',
    },
    {
      label: 'Plan Provider',
      value: contract.provider_name,
    },
    {
      label: 'Payment Frequency',
      value: contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly',
    },
    {
      label: 'Fee Structure',
      value: contract.fee_type === 'flat' ? 'Flat Rate' : 'Percentage of AUM',
    },
    {
      label: 'Fee Amount',
      value:
        contract.fee_type === 'flat'
          ? formatCurrency(contract.flat_rate)
          : `${(contract.percent_rate * 100).toFixed(3)}%`,
    },
  ];
  
  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div key={idx} className="flex justify-between py-1.5 px-2 -mx-2 rounded hover:bg-light-100 transition-colors">
            <dt className="text-dark-500">{item.label}</dt>
            <dd className="font-medium text-dark-700">{item.value}</dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};

export default ContractCard;
```

components\payment\PaymentForm.jsx
```jsx
import React, { useState } from 'react';
import Card from '../ui/Card';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import { useClientContract } from '../../hooks/useClientData';
import { useAvailablePeriods } from '../../hooks/usePaymentData';
import PaymentFormFields from './PaymentFormFields';
import ConfirmDialog from '../ui/ConfirmDialog';
import FormActions from './PaymentForm/FormActions';
import { usePaymentFormState } from './PaymentForm/usePaymentFormState';
import { usePaymentFormValidation } from './PaymentForm/usePaymentFormValidation';
import { usePaymentFormSubmit } from './PaymentForm/usePaymentFormSubmit';
const PaymentForm = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { data: contract, isLoading: isContractLoading } = useClientContract(clientId);
  const { data: periodsData, isLoading: isPeriodsLoading } = useAvailablePeriods(
    contract?.contract_id,
    clientId,
    { enabled: !!contract?.contract_id && !!clientId }
  );

  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [isFormDirty, setIsFormDirty] = useState(false);

  // Custom hooks for form management
  const {
    formValues,
    resetForm,
    handleInputChange,
    handleSplitToggle
  } = usePaymentFormState(clientId, contract, periodsData, editingPayment, setIsFormDirty);

  const {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  } = usePaymentFormValidation();

  const {
    handleSubmit,
    isSubmitting,
    submitError
  } = usePaymentFormSubmit(clientId, contract, editingPayment, () => {
    resetForm();
    clearAllErrors();
  });

  // Enhanced input change handler with error clearing
  const handleInputChangeWithValidation = (field, value) => {
    handleInputChange(field, value);
    clearFieldError(field);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    handleSubmit(formValues, setFormErrors, validateForm);
  };

  const handleReset = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      resetForm();
      clearAllErrors();
    }
  };

  const clearEditingPayment = () => {
    if (onEditingPaymentChange) {
      onEditingPaymentChange(null);
    }
  };

  const handleCancelEdit = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      clearEditingPayment();
    }
  };

  const handleConfirmReset = () => {
    resetForm();
    clearAllErrors();
    setShowConfirmDialog(false);
    if (editingPayment) {
      clearEditingPayment();
    }
  };

  const isDisabled = !clientId || !contract;

  return (
    <div className={`animate-fade-in relative ${editingPayment ? 'form-focus' : ''}`}>
      <Card className="p-4 mb-4 relative z-10" elevation={editingPayment ? "raised" : "default"}>
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold text-dark-700 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
              <rect x="3" y="5" width="18" height="14" rx="2" ry="2"></rect>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            {editingPayment ? 'Edit Payment' : 'Record New Payment'}
          </h2>

          {editingPayment && (
            <button
              onClick={handleCancelEdit}
              className="text-sm text-dark-500 hover:text-dark-700 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
              Cancel Edit
            </button>
          )}
        </div>

        {isContractLoading ? (
          <div className="flex justify-center py-6">
            <LoadingSpinner />
          </div>
        ) : !contract ? (
          <EmptyState 
            title="Select a client"
            message="Please select a client to add payment details"
            className="py-6"
          />
        ) : (
          <>
            <ConfirmDialog
              isOpen={showConfirmDialog}
              title="Unsaved Changes"
              message="You have unsaved changes. Are you sure you want to clear the form?"
              confirmText="Clear Form"
              cancelText="Cancel"
              confirmVariant="danger"
              onConfirm={handleConfirmReset}
              onCancel={() => setShowConfirmDialog(false)}
            />

            <form onSubmit={handleFormSubmit} className="space-y-4">
              <PaymentFormFields
                formValues={formValues}
                handleInputChange={handleInputChangeWithValidation}
                handleSplitToggle={handleSplitToggle}
                periodOptions={periodsData}
                isDisabled={isDisabled}
                isPeriodsLoading={isPeriodsLoading}
                contract={contract}
                formErrors={formErrors}
              />

              <FormActions
                editingPayment={editingPayment}
                isSubmitting={isSubmitting}
                submitError={submitError}
                onReset={handleReset}
                onSubmit={handleFormSubmit}
              />
            </form>
          </>
        )}
      </Card>

      {editingPayment && (
        <div className="fixed inset-0 bg-dark-800 bg-opacity-30 z-0" />
      )}
    </div>
  );
};

export default PaymentForm;
```

components\payment\PaymentForm\FormActions.jsx
```jsx
import React from 'react';
import Button from '../../ui/Button';
import ErrorDisplay from '../../ui/ErrorDisplay';

const FormActions = ({ 
  editingPayment, 
  isSubmitting, 
  submitError,
  onReset, 
  onSubmit 
}) => {
  return (
    <>
      {submitError && (
        <ErrorDisplay 
          title="Submission Error"
          error={submitError}
        />
      )}

      <div className="flex justify-end gap-3 mt-3">
        <Button
          variant="secondary"
          type="button"
          onClick={onReset}
          disabled={isSubmitting}
        >
          {editingPayment ? 'Cancel' : 'Clear Form'}
        </Button>
        <Button
          variant="primary"
          type="submit"
          disabled={isSubmitting}
          onClick={onSubmit}
        >
          {isSubmitting ? 'Submitting...' : editingPayment ? 'Update Payment' : 'Record Payment'}
        </Button>
      </div>
    </>
  );
};

export default FormActions;
```

components\payment\PaymentForm\usePaymentFormState.js
```js
import { useState, useEffect } from 'react';

export const usePaymentFormState = (clientId, contract, periodsData, editingPayment, setIsFormDirty) => {
  // Initial form state
  const defaultFormValues = {
    received_date: new Date().toISOString().split('T')[0],
    total_assets: '',
    actual_fee: '',
    method: '',
    notes: '',
    is_split_payment: false,
    start_period: '',
    end_period: '',
  };

  const [formValues, setFormValues] = useState(defaultFormValues);
  const [initialFormState, setInitialFormState] = useState(defaultFormValues);

  // Reset form when client changes or when editing payment changes
  useEffect(() => {
    if (clientId && !editingPayment) {
      resetForm();
    }
  }, [clientId]);

  // Find default period (previous month/quarter)
  const findDefaultPeriod = () => {
    if (!periodsData?.periods?.length || !contract?.payment_schedule) {
      return '';
    }

    const today = new Date();
    const currentMonth = today.getMonth() + 1; // 1-indexed
    const currentYear = today.getFullYear();

    if (contract.payment_schedule === 'monthly') {
      // Default to previous month
      const prevMonth = currentMonth === 1 ? 12 : currentMonth - 1;
      const prevYear = currentMonth === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevMonth}-${prevYear}`;

      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    } else {
      // Default to previous quarter
      const currentQuarter = Math.ceil(currentMonth / 3);
      const prevQuarter = currentQuarter === 1 ? 4 : currentQuarter - 1;
      const prevYear = currentQuarter === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevQuarter}-${prevYear}`;

      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    }
  };

  // Set default period when periods data is loaded
  useEffect(() => {
    if (periodsData?.periods?.length && !formValues.start_period && !editingPayment) {
      const defaultPeriod = findDefaultPeriod();
      if (defaultPeriod) {
        setFormValues(prev => ({
          ...prev,
          start_period: defaultPeriod
        }));
      }
    }
  }, [periodsData, editingPayment, contract]);

  // Populate form when editing a payment
  useEffect(() => {
    if (editingPayment) {
      const isMonthlyPayment = editingPayment.applied_start_month !== null;

      const formattedValues = {
        received_date: editingPayment.received_date,
        total_assets: editingPayment.total_assets?.toString() || '',
        actual_fee: editingPayment.actual_fee?.toString() || '',
        method: editingPayment.method || '',
        notes: editingPayment.notes || '',
        is_split_payment: editingPayment.is_split_payment || false,
        start_period: isMonthlyPayment
          ? `${editingPayment.applied_start_month}-${editingPayment.applied_start_month_year}`
          : `${editingPayment.applied_start_quarter}-${editingPayment.applied_start_quarter_year}`,
        end_period: editingPayment.is_split_payment
          ? (isMonthlyPayment
            ? `${editingPayment.applied_end_month}-${editingPayment.applied_end_month_year}`
            : `${editingPayment.applied_end_quarter}-${editingPayment.applied_end_quarter_year}`)
          : '',
      };

      setFormValues(formattedValues);
      setInitialFormState({ ...formattedValues });
      setIsFormDirty && setIsFormDirty(false);
    }
  }, [editingPayment, setIsFormDirty]);

  // Check if form is dirty on any input change
  useEffect(() => {
    const isDirty = JSON.stringify(formValues) !== JSON.stringify(initialFormState);
    setIsFormDirty && setIsFormDirty(isDirty);
  }, [formValues, initialFormState, setIsFormDirty]);

  const resetForm = () => {
    setFormValues({ ...defaultFormValues });
    setInitialFormState({ ...defaultFormValues });
    setIsFormDirty && setIsFormDirty(false);
  };

  const handleInputChange = (field, value) => {
    setFormValues((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSplitToggle = () => {
    setFormValues(prev => ({
      ...prev,
      is_split_payment: !prev.is_split_payment,
      end_period: !prev.is_split_payment ? prev.start_period : ''
    }));
  };

  return {
    formValues,
    setFormValues,
    initialFormState,
    setInitialFormState,
    resetForm,
    handleInputChange,
    handleSplitToggle
  };
};
```

components\payment\PaymentForm\usePaymentFormSubmit.js
```js
import { useCreatePayment, useUpdatePayment } from '../../../hooks/usePaymentData';

export const usePaymentFormSubmit = (clientId, contract, editingPayment, resetForm) => {
  const createPaymentMutation = useCreatePayment();
  const updatePaymentMutation = useUpdatePayment();

  const handleSubmit = (formValues, setFormErrors, validateForm) => {
    const errors = validateForm(formValues);
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    // Prepare payment data from form values
    const paymentData = {
      contract_id: contract.contract_id,
      client_id: clientId,
      received_date: formValues.received_date,
      total_assets: formValues.total_assets ? parseFloat(formValues.total_assets) : null,
      actual_fee: parseFloat(formValues.actual_fee),
      method: formValues.method || null,
      notes: formValues.notes || null,
    };

    // Parse period values
    const isMonthly = contract.payment_schedule === 'monthly';
    const startPeriodParts = formValues.start_period.split('-');

    if (isMonthly) {
      // Set monthly fields
      paymentData.applied_start_month = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_month_year = parseInt(startPeriodParts[1], 10);

      if (formValues.is_split_payment && formValues.end_period) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_month = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_month_year = parseInt(endPeriodParts[1], 10);
      } else {
        // Single month payment
        paymentData.applied_end_month = paymentData.applied_start_month;
        paymentData.applied_end_month_year = paymentData.applied_start_month_year;
      }
    } else {
      // Set quarterly fields
      paymentData.applied_start_quarter = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_quarter_year = parseInt(startPeriodParts[1], 10);

      if (formValues.is_split_payment && formValues.end_period) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_quarter = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_quarter_year = parseInt(endPeriodParts[1], 10);
      } else {
        // Single quarter payment
        paymentData.applied_end_quarter = paymentData.applied_start_quarter;
        paymentData.applied_end_quarter_year = paymentData.applied_start_quarter_year;
      }
    }

    // Update or create payment
    if (editingPayment) {
      updatePaymentMutation.mutate(
        { id: editingPayment.payment_id, data: paymentData },
        {
          onSuccess: () => {
            resetForm();
          },
        }
      );
    } else {
      createPaymentMutation.mutate(paymentData, {
        onSuccess: () => {
          resetForm();
        },
      });
    }
  };

  return {
    handleSubmit,
    createPaymentMutation,
    updatePaymentMutation,
    isSubmitting: createPaymentMutation.isLoading || updatePaymentMutation.isLoading,
    submitError: createPaymentMutation.error || updatePaymentMutation.error
  };
};
```

components\payment\PaymentForm\usePaymentFormValidation.js
```js
import { useState } from 'react';

export const usePaymentFormValidation = () => {
  const [formErrors, setFormErrors] = useState({});

  const validateForm = (formValues) => {
    const errors = {};

    if (!formValues.received_date) {
      errors.received_date = 'Received date is required';
    }

    if (!formValues.actual_fee) {
      errors.actual_fee = 'Payment amount is required';
    } else if (isNaN(parseFloat(formValues.actual_fee))) {
      errors.actual_fee = 'Payment amount must be a number';
    }

    if (!formValues.start_period) {
      errors.start_period = 'Applied period is required';
    }

    if (formValues.is_split_payment && !formValues.end_period) {
      errors.end_period = 'End period is required for split payments';
    }

    return errors;
  };

  const clearFieldError = (field) => {
    if (formErrors[field]) {
      setFormErrors((prev) => ({
        ...prev,
        [field]: null,
      }));
    }
  };

  const clearAllErrors = () => {
    setFormErrors({});
  };

  return {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  };
};
```

components\payment\PaymentFormFields.jsx
```jsx
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import DatePicker from '../ui/DatePicker';
import Input from '../ui/Input';
import Select from '../ui/Select';
import { PAYMENT_METHODS } from '../../lib/constants';
import { formatCurrency } from '../../lib/formatUtils';
import { formatDate } from '../../lib/dateUtils';
import SplitPaymentControls from './SplitPaymentControls';
import api from '../../lib/api';

/**
 * Form fields for payment entry/editing
 */
const PaymentFormFields = ({
  formValues,
  handleInputChange,
  handleSplitToggle,
  periodOptions,
  isDisabled,
  isPeriodsLoading,
  contract,
  formErrors
}) => {
  // Format period options from the raw data
  const formattedPeriodOptions = periodOptions?.periods?.map(period => ({
    label: period.label,
    value: period.value
  })) || [];

  // Use API for expected fee calculation instead of local logic
  const { data: feeCalculation } = useQuery(
    ['expected-fee', contract?.contract_id, formValues.total_assets],
    () => api.calculateFee(contract.contract_id, parseFloat(formValues.total_assets)),
    {
      enabled: !!contract?.contract_id && !!formValues.total_assets && !isNaN(parseFloat(formValues.total_assets)),
      staleTime: 1000 * 60 * 5, // 5 minutes
    }
  );

  const expectedFee = feeCalculation?.expected_fee || null;

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
        <DatePicker
          label="Received Date"
          value={formValues.received_date}
          onChange={(value) => handleInputChange('received_date', value)}
          required
          disabled={isDisabled}
          error={formErrors.received_date}
        />

        <SplitPaymentControls
          isSplitPayment={formValues.is_split_payment}
          startPeriod={formValues.start_period}
          endPeriod={formValues.end_period}
          periodOptions={formattedPeriodOptions}
          handleSplitToggle={handleSplitToggle}
          handlePeriodChange={handleInputChange}
          isDisabled={isDisabled || isPeriodsLoading}
          errors={formErrors}
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
        <Input
          label="Assets Under Management"
          type="text"
          value={formValues.total_assets}
          onChange={(value) => handleInputChange('total_assets', value)}
          placeholder="Enter AUM (optional)"
          prefix="$"
          disabled={isDisabled}
        />

        <Input
          label="Payment Amount"
          type="text"
          value={formValues.actual_fee}
          onChange={(value) => handleInputChange('actual_fee', value)}
          placeholder="Enter payment amount"
          prefix="$"
          required
          disabled={isDisabled}
          error={formErrors.actual_fee}
        />

        <Select
          label="Payment Method"
          options={PAYMENT_METHODS}
          value={formValues.method}
          onChange={(value) => handleInputChange('method', value)}
          placeholder="Select method (optional)"
          disabled={isDisabled}
        />
      </div>

      <div className="space-y-3 p-3 bg-gray-50 rounded-md">
        <Input
          label="Notes"
          type="text"
          value={formValues.notes}
          onChange={(value) => handleInputChange('notes', value)}
          placeholder="Enter any notes about this payment"
          disabled={isDisabled}
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
          {/* Expected Fee Card */}
          {contract && (
            <div className="p-2 bg-blue-50 rounded text-sm">
              <div className="font-medium text-blue-800">Expected Fee:</div>
              <div className="text-blue-600">
                {expectedFee !== null
                  ? formatCurrency(expectedFee)
                  : (contract?.fee_type === 'percentage' ? 'Needs AUM data' : 'N/A')}
              </div>
              <div className="text-xs text-blue-500 mt-1">
                {feeCalculation?.calculation_method || 
                  (contract?.fee_type === 'flat' 
                    ? 'Flat fee as specified in contract'
                    : 'Enter AUM to calculate expected fee')}
              </div>
            </div>
          )}

          {/* Next Payment Due - Moved to backend calculations */}
        </div>
      </div>
    </>
  );
};

export default PaymentFormFields;
```

components\payment\PaymentHistory.jsx
```jsx
import React from 'react';
import { usePaymentHistory, useDeletePayment } from '../../hooks/usePaymentData';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import ErrorDisplay from '../ui/ErrorDisplay';
import ConfirmDialog from '../ui/ConfirmDialog';
import Card from '../ui/Card';
import Button from '../ui/Button';
import PaymentTableRow from './PaymentHistory/PaymentTableRow';
import ExpandedPaymentDetails from './PaymentHistory/ExpandedPaymentDetails';
import { usePaymentTableState } from './PaymentHistory/usePaymentTableState';
import useStore from '../../store';

const PaymentHistory = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { setDocumentViewerOpen, setSelectedDocumentUrl } = useStore();
  
  const {
    page,
    year,
    expandedPaymentId,
    showDeleteConfirm,
    setPage,
    setYear,
    toggleExpandRow,
    confirmDelete,
    cancelDelete,
    getAvailableYears
  } = usePaymentTableState();

  const {
    data: payments = [],
    isLoading,
    error,
    isPreviousData,
  } = usePaymentHistory(clientId, { page, limit: 10, year });

  const deletePaymentMutation = useDeletePayment();

  const handleEdit = (payment) => {
    onEditingPaymentChange && onEditingPaymentChange(payment);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleDelete = (paymentId) => {
    deletePaymentMutation.mutate({ id: paymentId, clientId });
    cancelDelete();
  };

  const handleViewFile = (payment) => {
    if (payment.has_files) {
      setSelectedDocumentUrl(`/api/files/payment/${payment.payment_id}`);
      setDocumentViewerOpen(true);
    }
  };

  const availableYears = getAvailableYears();

  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading payment history"
        error={error}
      />
    );
  }

  return (
    <div className="animate-fade-in mt-3">
      <div className="flex items-center justify-between mb-2">
        <h2 className="text-xl font-semibold text-dark-700 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
            <path d="M19 5H5a2 2 0 00-2 2v10a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2z"></path>
            <line x1="8" y1="2" x2="8" y2="5"></line>
            <line x1="16" y1="2" x2="16" y2="5"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Payment History
        </h2>
        <div className="flex items-center space-x-2">
          <label className="text-sm text-dark-500">Filter by Year:</label>
          <select
            className="border border-light-500 rounded-md text-sm p-1.5 bg-white shadow-sm focus:ring-1 focus:ring-primary-400 focus:border-primary-400 transition-all duration-200"
            value={year || ''}
            onChange={(e) => setYear(e.target.value === '' ? null : e.target.value)}
          >
            <option value="">All Years</option>
            {availableYears.map((y) => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center py-5">
          <LoadingSpinner />
        </div>
      ) : payments.length === 0 ? (
        <EmptyState 
          title="No payment records found"
          className="bg-white border border-light-300 p-5 rounded-lg text-center shadow-sm"
        />
      ) : (
        <Card className="p-0 overflow-hidden" elevation="default" variant="default">
          <div className="overflow-x-auto -mx-1">
            <table className="min-w-full table-fixed border-collapse">
              <thead>
                <tr className="bg-light-200 border-b border-light-300">
                  <th className="w-[2%] py-2.5 px-1 text-left text-xs font-medium text-dark-600 uppercase tracking-wider"></th>
                  <th className="w-[11%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Date</th>
                  <th className="w-[17%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Provider</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Period</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">AUM</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Expected</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Actual</th>
                  <th className="w-[14%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Variance</th>
                  <th className="w-[6%] py-2.5 px-1 text-center text-xs font-medium text-dark-600 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-light-300">
                {payments.map((payment) => (
                  <React.Fragment key={payment.payment_id}>
                    <PaymentTableRow
                      payment={payment}
                      isExpanded={expandedPaymentId === payment.payment_id}
                      showDeleteConfirm={showDeleteConfirm}
                      onToggleExpand={toggleExpandRow}
                      onEdit={handleEdit}
                      onViewFile={handleViewFile}
                      onConfirmDelete={handleDelete}
                      onCancelDelete={cancelDelete}
                      onDeleteClick={confirmDelete}
                      isDeleting={deletePaymentMutation.isLoading}
                    />
                    {expandedPaymentId === payment.payment_id && (
                      <ExpandedPaymentDetails payment={payment} />
                    )}
                  </React.Fragment>
                ))}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          <div className="flex items-center justify-between px-4 py-2 bg-light-200 border-t border-light-300">
            <div className="text-sm text-dark-500">
              Showing {payments.length} payments
            </div>
            <nav className="flex items-center space-x-2">
              <Button
                variant="secondary"
                size="sm"
                onClick={() => setPage(Math.max(page - 1, 1))}
                disabled={page === 1 || isPreviousData}
              >
                Previous
              </Button>
              <Button
                variant="secondary"
                size="sm"
                onClick={() => {
                  if (payments.length === 10 && !isPreviousData) {
                    setPage(page + 1);
                  }
                }}
                disabled={payments.length < 10 || isPreviousData}
              >
                Next
              </Button>
            </nav>
          </div>
        </Card>
      )}

      <ConfirmDialog
        isOpen={!!showDeleteConfirm}
        title="Confirm Delete"
        message="Are you sure you want to delete this payment? This action cannot be undone."
        confirmText="Delete"
        cancelText="Cancel"
        confirmVariant="danger"
        onConfirm={() => handleDelete(showDeleteConfirm)}
        onCancel={cancelDelete}
        isLoading={deletePaymentMutation.isLoading}
      />
    </div>
  );
};

export default PaymentHistory;
```

components\payment\PaymentHistory\ExpandedPaymentDetails.jsx
```jsx
import React from 'react';
import { formatPeriodRange } from '../../../lib/dateUtils';
import { formatCurrency } from '../../../lib/formatUtils';

const ExpandedPaymentDetails = ({ payment }) => {
  if (!payment.is_split_payment) {
    return null;
  }

  return (
    <tr>
      <td className="py-0"></td>
      <td colSpan="8" className="py-0">
        <div className="bg-light-200 p-2 my-1 rounded-md">
          <h4 className="text-sm font-medium text-dark-700 mb-2">
            {formatPeriodRange(payment)}
          </h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
            {payment.periods?.map((period, i) => (
              <div
                key={i}
                className="bg-white p-2 rounded border border-light-300 shadow-sm"
              >
                <div className="text-xs text-dark-500">
                  {period.period}
                </div>
                <div className="text-sm font-medium">
                  {formatCurrency(period.amount)}
                </div>
              </div>
            ))}
          </div>
        </div>
      </td>
    </tr>
  );
};

export default ExpandedPaymentDetails;
```

components\payment\PaymentHistory\PaymentTableRow.jsx
```jsx
import React from 'react';
import { formatDate, formatAppliedPeriod } from '../../../lib/dateUtils';
import { formatCurrency } from '../../../lib/formatUtils';
import StatusBadge from '../../ui/StatusBadge';

const PaymentTableRow = ({ 
  payment, 
  isExpanded,
  showDeleteConfirm,
  onToggleExpand,
  onEdit,
  onViewFile,
  onConfirmDelete,
  onCancelDelete,
  onDeleteClick,
  isDeleting
}) => {
  const expectedFee = payment.expected_fee;
  const variance = payment.variance || { status: 'unknown', message: 'N/A' };

  return (
    <tr className="hover:bg-light-200" data-payment-id={payment.payment_id}>
      <td className="py-2 px-1">
        {payment.is_split_payment && (
          <button
            className="w-6 h-6 flex items-center justify-center text-dark-400 hover:text-primary-600 transition-colors"
            onClick={() => onToggleExpand(payment.payment_id)}
            aria-label="Toggle payment details"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className={`transition-transform ${isExpanded ? 'rotate-90' : ''}`}
            >
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        )}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">{formatDate(payment.received_date)}</td>
      <td className="py-2 px-2 truncate">{payment.provider_name || 'N/A'}</td>
      <td className="py-2 px-2 whitespace-nowrap">
        {payment.is_split_payment ? (
          <div className="flex items-center">
            <span className="px-2 py-1 text-xs rounded bg-light-300 text-dark-600">Split</span>
            <span className="ml-2 text-dark-500">
              {payment.periods?.length || 0}
            </span>
          </div>
        ) : formatAppliedPeriod(payment)}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {payment.total_assets ? formatCurrency(payment.total_assets) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {expectedFee !== null ? formatCurrency(expectedFee) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap font-medium">{formatCurrency(payment.actual_fee)}</td>
      <td className="py-2 px-2">
        <StatusBadge
          status={variance.status}
          label={variance.message}
          size="md"
        />
      </td>
      <td className="py-2 px-1">
        <div className="grid grid-cols-3 gap-1 justify-items-center">
          <div className="w-6">
            {payment.has_files && (
              <button
                onClick={() => onViewFile(payment)}
                className="text-blue-500 hover:text-blue-600 transition-colors file-indicator"
                title="View document"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10 9 9 9 8 9"></polyline>
                </svg>
              </button>
            )}
          </div>
          <div className="w-6">
            <button
              onClick={() => onEdit(payment)}
              className="text-dark-500 hover:text-primary-600 transition-colors"
              aria-label="Edit payment"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
            </button>
          </div>
          <div className="w-6">
            {showDeleteConfirm === payment.payment_id ? (
              <div className="flex items-center">
                <button
                  className="text-dark-500 hover:text-status-success transition-colors"
                  onClick={() => onConfirmDelete(payment.payment_id)}
                  disabled={isDeleting}
                  aria-label="Confirm delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </button>
                <button
                  className="text-dark-500 hover:text-dark-700 ml-1 transition-colors"
                  onClick={onCancelDelete}
                  aria-label="Cancel delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                  </svg>
                </button>
              </div>
            ) : (
              <button
                onClick={() => onDeleteClick(payment.payment_id)}
                className="text-dark-500 hover:text-status-error transition-colors"
                aria-label="Delete payment"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <polyline points="3 6 5 6 21 6"></polyline>
                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  <line x1="10" y1="11" x2="10" y2="17"></line>
                  <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
              </button>
            )}
          </div>
        </div>
      </td>
    </tr>
  );
};

export default PaymentTableRow;
```

components\payment\PaymentHistory\usePaymentTableState.js
```js
import { useState } from 'react';

export const usePaymentTableState = () => {
  const [page, setPage] = useState(1);
  const [year, setYear] = useState(null);
  const [expandedPaymentId, setExpandedPaymentId] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);

  const toggleExpandRow = (paymentId) => {
    setExpandedPaymentId(expandedPaymentId === paymentId ? null : paymentId);
  };

  const confirmDelete = (paymentId) => {
    setShowDeleteConfirm(paymentId);
  };

  const cancelDelete = () => {
    setShowDeleteConfirm(null);
  };

  // Generate available years for filter
  const getAvailableYears = () => {
    const currentYear = new Date().getFullYear();
    const availableYears = [];
    for (let y = currentYear; y >= currentYear - 5; y--) {
      availableYears.push(y);
    }
    return availableYears;
  };

  return {
    // State
    page,
    year,
    expandedPaymentId,
    showDeleteConfirm,
    
    // Setters
    setPage,
    setYear,
    
    // Actions
    toggleExpandRow,
    confirmDelete,
    cancelDelete,
    
    // Utilities
    getAvailableYears
  };
};
```

components\payment\PaymentInfoCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/formatUtils';
import { formatDate } from '../../lib/dateUtils';
import { MONTH_NAMES } from '../../lib/constants';

const PaymentInfoCard = ({ client, contract, payments = [], isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }

  // Get latest payment data directly from payments array
  const latestPayment = payments && payments.length > 0 ? payments[0] : null;

  // Get last recorded AUM from the latest payment that has it
  const lastRecordedAUM = payments?.find(p => p.total_assets)?.total_assets || null;

  // Calculate current period based on payment schedule
  const getCurrentPeriod = () => {
    if (!contract) return 'N/A';

    const now = new Date();
    const currentMonth = now.getMonth(); // 0-indexed
    const currentYear = now.getFullYear();

    if (contract.payment_schedule === 'monthly') {
      return `${MONTH_NAMES[currentMonth]} ${currentYear}`;
    } else {
      const currentQuarter = Math.floor(currentMonth / 3) + 1;
      return `Q${currentQuarter} ${currentYear}`;
    }
  };

  // Calculate expected fee based on contract and latest AUM
  const getExpectedFee = () => {
    if (!contract) return 'N/A';

    if (contract.fee_type === 'flat' && contract.flat_rate !== null) {
      return formatCurrency(contract.flat_rate);
    }

    if ((contract.fee_type === 'percentage' || contract.fee_type === 'percent') &&
      contract.percent_rate !== null) {
      if (lastRecordedAUM !== null) {
        const fee = lastRecordedAUM * contract.percent_rate;
        return formatCurrency(fee);
      }
      return 'Needs AUM data';
    }

    return 'N/A';
  };

  // Determine if payment status is due for current period
  const isCurrentPeriodPaid = () => {
    if (!latestPayment || !contract) return false;

    const now = new Date();
    const currentMonth = now.getMonth() + 1; // Convert to 1-indexed
    const currentYear = now.getFullYear();
    const currentQuarter = Math.floor((now.getMonth()) / 3) + 1;

    if (contract.payment_schedule === 'monthly') {
      return latestPayment.applied_end_month === currentMonth &&
        latestPayment.applied_end_month_year === currentYear;
    } else {
      return latestPayment.applied_end_quarter === currentQuarter &&
        latestPayment.applied_end_quarter_year === currentYear;
    }
  };

  const details = [
    {
      label: 'AUM',
      value: lastRecordedAUM !== null ? formatCurrency(lastRecordedAUM) : 'No AUM data',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Expected Fee',
      value: getExpectedFee(),
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="16"></line>
          <line x1="8" y1="12" x2="16" y2="12"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment',
      value: latestPayment ? formatDate(latestPayment.received_date) : 'No payments recorded',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment Amount',
      value: latestPayment ? formatCurrency(latestPayment.actual_fee) : 'N/A',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <line x1="12" y1="1" x2="12" y2="23"></line>
          <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Current Period',
      value: getCurrentPeriod(),
      highlight: true,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary-500">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Payment Status',
      value: isCurrentPeriodPaid() ? 'Paid' : 'Due',
      highlight: !isCurrentPeriodPaid(),
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={!isCurrentPeriodPaid() ? 'text-amber-500' : 'text-green-500'}>
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12 6 12 12 16 14"></polyline>
        </svg>
      )
    },
  ];

  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div
            key={idx}
            className={`
              flex justify-between items-center py-1.5 px-2 -mx-2 rounded
              ${item.highlight ? 'bg-light-200 border border-light-400' : ''}
            `}
          >
            <dt className="text-dark-500 flex items-center gap-2">
              {item.icon}
              {item.label}
            </dt>
            <dd className={`font-medium ${item.highlight ? 'text-primary-600' : 'text-dark-700'}`}>
              {item.value}
            </dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};

export default PaymentInfoCard;
```

components\payment\SplitPaymentControls.jsx
```jsx
import React from 'react';
import Select from '../ui/Select';

/**
 * Period selection controls for split payments
 */
const SplitPaymentControls = ({
  isSplitPayment,
  startPeriod,
  endPeriod,
  periodOptions,
  handleSplitToggle,
  handlePeriodChange,
  isDisabled,
  errors
}) => {
  const filteredEndPeriods = React.useMemo(() => {
    if (!startPeriod || !periodOptions) {
      return periodOptions || [];
    }

    // Only show periods that are after or equal to the start period
    const startParts = startPeriod.split('-');
    if (startParts.length !== 2) return periodOptions;

    const startMonth = parseInt(startParts[0], 10);
    const startYear = parseInt(startParts[1], 10);

    return periodOptions.filter(period => {
      const parts = period.value.split('-');
      if (parts.length !== 2) return true;

      const month = parseInt(parts[0], 10);
      const year = parseInt(parts[1], 10);

      return (year > startYear) || (year === startYear && month >= startMonth);
    });
  }, [startPeriod, periodOptions]);

  return (
    <div className="space-y-2 w-full">
      <div className="flex items-center justify-between">
        <label className="text-sm font-medium">Applied Period</label>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-500">Single</span>
          <button
            type="button"
            className={`h-5 w-10 rounded-full relative ${isSplitPayment ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            onClick={handleSplitToggle}
            disabled={isDisabled || !startPeriod}
            aria-label={isSplitPayment ? 'Switch to single period' : 'Switch to split period'}
          >
            <div
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-transform ${isSplitPayment ? 'translate-x-5' : 'translate-x-1'
                }`}
            ></div>
          </button>
          <span className="text-sm text-gray-500">Split</span>
        </div>
      </div>

      <div className={`${isSplitPayment ? 'grid grid-cols-2 gap-2' : 'w-full'}`}>
        <Select
          options={periodOptions || []}
          value={startPeriod}
          onChange={(value) => handlePeriodChange('start_period', value)}
          placeholder="Select period"
          disabled={isDisabled}
          required
          error={errors?.start_period}
        />

        {isSplitPayment && (
          <Select
            options={filteredEndPeriods}
            value={endPeriod}
            onChange={(value) => handlePeriodChange('end_period', value)}
            placeholder="End period"
            disabled={isDisabled || !startPeriod}
            required
            error={errors?.end_period}
          />
        )}
      </div>
    </div>
  );
};

export default SplitPaymentControls;
```

components\ui\Button.jsx
```jsx
import React from 'react';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = '',
  iconLeft = null,
  iconRight = null,
  ...props 
}) => {
  const variantStyles = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 hover:shadow-sm shadow-sm',
    secondary: 'bg-white border border-light-500 text-dark-500 hover:bg-light-200 hover:border-light-500 hover:text-dark-600 shadow-sm',
    outline: 'bg-transparent border border-primary-600 text-primary-600 hover:bg-primary-50 hover:border-primary-700 hover:text-primary-700 shadow-sm',
    dark: 'bg-dark-600 text-white hover:bg-dark-700 hover:shadow-sm shadow-sm',
    ghost: 'text-dark-500 hover:bg-light-300 hover:text-dark-600',
    danger: 'bg-status-error text-white hover:bg-red-700 hover:shadow-sm shadow-sm',
  };
  
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-base',
  };
  
  return (
    <button
      className={`
        ${variantStyles[variant]} 
        ${sizeStyles[size]} 
        flex items-center justify-center gap-2
        rounded-md font-medium 
        transition-all duration-200 ease-in-out
        focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-primary-500
        ${className}
      `}
      {...props}
    >
      {iconLeft && <span className="flex-shrink-0">{iconLeft}</span>}
      <span>{children}</span>
      {iconRight && <span className="flex-shrink-0">{iconRight}</span>}
    </button>
  );
};

export default Button;
```

components\ui\Card.jsx
```jsx
import React from 'react';

const Card = ({ 
  children, 
  title,
  className = '',
  titleClassName = '',
  bodyClassName = '',
  variant = 'default',
  size = 'default',
  elevation = 'default',
  ...props 
}) => {
  const elevationClasses = {
    none: '',
    default: 'shadow-sm',
    raised: 'shadow-md',
    floating: 'shadow-lg',
  };

  const variantClasses = {
    default: 'bg-white border border-light-300',
    outlined: 'bg-white border border-light-300',
    filled: 'bg-light-100 border border-light-200',
  };

  // Default to p-3 (smaller than before) if no padding class is specified in className
  const hasPaddingClass = /\bp-\d+\b/.test(className);
  const paddingClass = hasPaddingClass ? '' : 'p-3';

  const baseClasses = 'rounded-lg';
  const elevationClass = elevationClasses[elevation] || elevationClasses.default;
  const variantClass = variantClasses[variant] || variantClasses.default;

  return (
    <div 
      className={`${baseClasses} ${elevationClass} ${variantClass} ${paddingClass} ${className}`}
      {...props}
    >
      {title && (
        <div className={`px-5 py-4 border-b border-light-400 font-medium ${titleClassName}`}>
          <h3 className="text-lg">{title}</h3>
        </div>
      )}
      <div className={`${size} ${bodyClassName}`}>
        {children}
      </div>
    </div>
  );
};

export default Card;
```

components\ui\ConfirmDialog.jsx
```jsx
import React from 'react';
import Card from './Card';
import Button from './Button';

const ConfirmDialog = ({ 
  isOpen = true,
  title = "Confirm Action", 
  message = "Are you sure you want to proceed?", 
  confirmText = "Confirm",
  cancelText = "Cancel",
  confirmVariant = "danger",
  onConfirm, 
  onCancel,
  isLoading = false
}) => {
  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-dark-800 bg-opacity-75 flex items-center justify-center z-50">
      <Card className="max-w-md w-full" elevation="default">
        <div className="p-4">
          <h3 className="text-lg font-medium mb-2 text-dark-700">{title}</h3>
          <p className="mb-3 text-dark-500">{message}</p>
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={onCancel}
              disabled={isLoading}
            >
              {cancelText}
            </Button>
            <Button
              variant={confirmVariant}
              onClick={onConfirm}
              disabled={isLoading}
            >
              {isLoading ? 'Processing...' : confirmText}
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default ConfirmDialog;
```

components\ui\DatePicker.jsx
```jsx
import React from 'react';

const DatePicker = ({
  label,
  value,
  onChange,
  placeholder = '',
  disabled = false,
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <input
          type="date"
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 pl-8 pr-3 border rounded-md
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          `}
        />
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-400"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};

export default DatePicker;
```

components\ui\EmptyState.jsx
```jsx
import React from 'react';

const EmptyState = ({ 
  title, 
  message, 
  icon = null,
  className = '',
  bgColor = 'bg-gray-50',
  textColor = 'text-gray-500'
}) => (
  <div className={`flex-1 flex items-center justify-center p-4 ${bgColor} ${textColor} ${className}`}>
    <div className="text-center">
      {icon}
      <p className="font-medium mb-1">{title}</p>
      {message && <p className="text-sm">{message}</p>}
    </div>
  </div>
);

export default EmptyState;
```

components\ui\ErrorDisplay.jsx
```jsx
import React from 'react';

const ErrorDisplay = ({ title, message, error }) => (
  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
    <h3 className="font-medium mb-1">{title}</h3>
    <p>{error?.message || message}</p>
  </div>
);

export default ErrorDisplay;
```

components\ui\Input.jsx
```jsx
import React from 'react';

const Input = ({
  label,
  type = 'text',
  value,
  onChange,
  placeholder = '',
  prefix = null,
  disabled = false,
  className = '',
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center text-dark-600">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative group">
        {prefix && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 group-hover:text-primary-500 transition-colors duration-200">
            {prefix}
          </div>
        )}
        <input
          type={type}
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 rounded-md border shadow-sm
            ${error ? 'border-red-500' : 'border-gray-200 group-hover:border-primary-300'}
            ${prefix ? 'pl-8' : 'pl-3'}
            ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent
            transition-all duration-200 ease-in-out
            ${className}
          `}
        />
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-primary-200 group-hover:shadow-sm transition-all duration-200"></div>
        )}
      </div>
      {error && <p className="text-red-500 text-xs mt-1">{error}</p>}
    </div>
  );
};

export default Input;
```

components\ui\Loader.jsx
```jsx
import React from 'react';

const Loader = ({ size = 'md', color = 'blue' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };
  
  const colorClasses = {
    blue: 'text-blue-600',
    gray: 'text-gray-600',
    white: 'text-white',
  };
  
  return (
    <svg
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
};

export default Loader;
```

components\ui\LoadingSpinner.jsx
```jsx
import React from 'react';

const LoadingSpinner = ({ size = 'default', className = '' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    default: 'w-10 h-10',
    lg: 'w-16 h-16'
  };

  return (
    <div className={`border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin ${sizeClasses[size]} ${className}`} />
  );
};

export default LoadingSpinner;
```

components\ui\Select.jsx
```jsx
import React from 'react';

/**
 * Select component with consistent styling
 */
const Select = ({
  label,
  options = [],
  value,
  onChange,
  placeholder = 'Select an option',
  disabled = false,
  required = false,
  error = null,
  className = '',
  size = 'default',
}) => {
  const sizeStyles = {
    sm: 'h-8 px-2 text-sm',
    default: 'h-10 px-3 text-sm',
    lg: 'h-12 px-4 text-base',
  };
  
  return (
    <div className={`space-y-1.5 w-full ${className}`}>
      {label && (
        <label className="text-sm font-medium text-dark-600 flex items-center">
          {label}
          {required && <span className="text-status-error ml-1">*</span>}
        </label>
      )}
      
      <div className="relative w-full group">
        <select
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          disabled={disabled}
          className={`
            w-full rounded-md appearance-none shadow-sm
            ${sizeStyles[size] || sizeStyles.default}
            transition-all duration-200 ease-in-out
            ${error ? 'border-status-error' : 'border-light-400 group-hover:border-light-500'}
            ${disabled ? 'bg-light-300 text-dark-400 cursor-not-allowed' : 'bg-light-100 text-dark-600'}
            focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-transparent
          `}
        >
          <option value="" disabled>
            {placeholder}
          </option>
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        
        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-dark-400 group-hover:text-dark-500 transition-colors duration-200"
          >
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
        </div>
        
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-light-400 transition-all duration-200"></div>
        )}
      </div>
      
      {error && (
        <p className="text-status-error text-xs mt-1 animate-fade-in">{error}</p>
      )}
    </div>
  );
};

export default Select;
```

components\ui\StatusBadge.jsx
```jsx
import React from 'react';
import { STATUS_COLORS } from '../../lib/constants';

/**
 * Status badge component for displaying statuses with appropriate colors
 * @param {string} status - Status identifier (exact, acceptable, warning, alert, unknown)
 * @param {string} label - Text label to display
 * @param {string} size - Size variant (xs, sm, md, lg)
 */
const StatusBadge = ({ status, label, size = 'md' }) => {
  const sizeClasses = {
    xs: 'px-1 py-0.5 text-xs',
    sm: 'px-1.5 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-3 py-1.5 text-sm',
  };

  const colorClass = STATUS_COLORS[status] || STATUS_COLORS.gray;
  const sizeClass = sizeClasses[size] || sizeClasses.md;

  // Format the display label for clarity
  const getDisplayLabel = () => {
    if (!label || label === 'N/A') return 'N/A';

    // Show symbols for common statuses
    switch (status) {
      case 'exact':
        return '✓ Exact';
      case 'acceptable':
        return '✓ ' + label;
      case 'unknown':
        return 'N/A';
      default:
        return label;
    }
  };

  return (
    <span className={`inline-flex items-center font-medium rounded-full ${colorClass} ${sizeClass}`}>
      {getDisplayLabel()}
    </span>
  );
};

export default StatusBadge;
```

hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to fetch all clients
 * @param {string} provider - Optional provider filter
 * @returns {Object} - Query result with clients data
 */
export const useClientList = (provider = null) => {
  return useQuery(
    queryKeys.clients.all,
    () => api.getClients(provider ? { provider } : undefined),
    {
      keepPreviousData: true,
      staleTime: 1000 * 60 * 5, // 5 minutes
    }
  );
};

/**
 * Hook to fetch a single client by ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with client data
 */
export const useClient = (clientId) => {
  return useQuery(
    queryKeys.clients.detail(clientId),
    () => api.getClient(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client contract
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with contract data
 */
export const useClientContract = (clientId) => {
  return useQuery(
    queryKeys.clients.contract(clientId),
    () => api.getClientContract(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60 * 10, // 10 minutes - contracts change rarely
      onError: (error) => {
        console.error(`Error fetching contract for client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client dashboard data (replaces multiple API calls)
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with complete dashboard data
 */
export const useClientDashboard = (clientId) => {
  return useQuery(
    queryKeys.clients.dashboard(clientId),
    () => api.getClientDashboard(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching dashboard for client ${clientId}:`, error);
      },
    }
  );
};
```

hooks\useFileData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to check if a payment has associated files
 * @param {number} paymentId - Payment ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for payment files
 */
export const usePaymentFiles = (paymentId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.payments.files(paymentId),
    () => api.getPaymentFiles(paymentId),
    {
      enabled: !!paymentId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error fetching files for payment ${paymentId}:`, error);
        return [];
      }
    }
  );
};

/**
 * Hook to check if a client has any associated files
 * @param {number} clientId - Client ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for client files check
 */
export const useClientFiles = (clientId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.clients.files(clientId),
    () => api.checkClientFiles(clientId),
    {
      enabled: !!clientId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error checking files for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Cache for payment file status to reduce API calls
 */
const paymentFileCache = new Map();

/**
 * Set file status for a payment in the cache
 * @param {number} paymentId - Payment ID
 * @param {boolean} hasFiles - Whether the payment has files
 */
export const setPaymentFileStatus = (paymentId, hasFiles) => {
  paymentFileCache.set(paymentId, !!hasFiles);
};

/**
 * Get file status for a payment from the cache
 * @param {number} paymentId - Payment ID
 * @returns {boolean|undefined} - True if has files, false if not, undefined if not in cache
 */
export const getPaymentFileStatus = (paymentId) => {
  return paymentFileCache.has(paymentId) 
    ? paymentFileCache.get(paymentId) 
    : undefined;
};

/**
 * Clear file status cache
 */
export const clearFileCache = () => {
  paymentFileCache.clear();
};

/**
 * Check if a payment has files with cache support
 * @param {number} paymentId - Payment ID
 * @returns {Promise<boolean>} - Promise resolving to true if payment has files
 */
export const checkPaymentHasFiles = async (paymentId) => {
  // Check cache first
  if (paymentFileCache.has(paymentId)) {
    return paymentFileCache.get(paymentId);
  }
  
  try {
    const result = await api.checkPaymentFiles(paymentId);
    const hasFiles = !!result?.has_files;
    
    // Update cache
    setPaymentFileStatus(paymentId, hasFiles);
    
    return hasFiles;
  } catch (error) {
    console.error(`Error checking files for payment ${paymentId}:`, error);
    return false;
  }
};
```

hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
import { clearFileCache } from './useFileData';

/**
 * Hook to fetch payment history for a client
 * @param {number} clientId - Client ID
 * @param {Object} options - Query options including pagination and filters
 * @returns {Object} - Query result with payments data
 */
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;

  // Create params object without null/undefined values
  const params = { page, limit };
  if (year !== null) {
    params.year = year;
  }

  return useQuery(
    [...queryKeys.clients.payments(clientId), page, limit, year],
    () => api.getPayments(clientId, params),
    {
      enabled: !!clientId,
      keepPreviousData: true,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payments for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch a single payment
 * @param {number} paymentId - Payment ID
 * @returns {Object} - Query result with payment data
 */
export const usePayment = (paymentId) => {
  return useQuery(
    queryKeys.payments.detail(paymentId),
    () => api.getPayment(paymentId),
    {
      enabled: !!paymentId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payment ${paymentId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch available periods for a contract
 * @param {number} contractId - Contract ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with periods data
 */
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery(
    queryKeys.contracts.periods(contractId, clientId),
    () => api.getAvailablePeriods(contractId, clientId),
    {
      enabled: !!contractId && !!clientId,
      staleTime: 1000 * 60 * 60, // 1 hour
      onError: (error) => {
        console.error(`Error fetching periods for contract ${contractId}:`, error);
      }
    }
  );
};

/**
 * Hook to create a new payment
 * @returns {Object} - Mutation object for creating payment
 */
export const useCreatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    (paymentData) => api.createPayment(paymentData),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
      onError: (error) => {
        console.error('Error creating payment:', error);
      }
    }
  );
};

/**
 * Hook to update an existing payment
 * @returns {Object} - Mutation object for updating payment
 */
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, data }) => api.updatePayment(id, data),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.payments.detail(data.payment_id));
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error updating payment:', error);
      }
    }
  );
};

/**
 * Hook to delete a payment
 * @returns {Object} - Mutation object for deleting payment
 */
export const useDeletePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, clientId }) => api.deletePayment(id).then(() => ({ id, clientId })),
    {
      onSuccess: ({ id, clientId }) => {
        // Invalidate affected queries
        queryClient.invalidateQueries(queryKeys.clients.payments(clientId));
        queryClient.invalidateQueries(queryKeys.clients.summary(clientId));
        queryClient.invalidateQueries(queryKeys.clients.detail(clientId));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error deleting payment:', error);
      }
    }
  );
};
```

index.css
```css
/* Form focus effect */
.form-focus {
  position: relative;
  z-index: 50;
}

.form-focus::before {
  content: '';
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
  z-index: 40;
  animation: fadeIn 0.2s ease-out;
}

.form-focus > * {
  position: relative;
  z-index: 50;
  transform: translateY(0);
  transition: transform 0.2s ease-out;
  animation: cardRaise 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes cardRaise {
  from { transform: translateY(10px); }
  to { transform: translateY(0); }
}

/* Comprehensive vertical spacing reduction */
/* Global container spacing */
.card-container > * {
  margin-bottom: 0.75rem !important; /* Reduced from default 1rem */
}

.card-container > *:last-child {
  margin-bottom: 0 !important;
}

/* Card internal spacing */
.card {
  padding: 0.875rem !important;
}

/* Form spacing */
.space-y-5 > * {
  margin-top: 1rem !important;
  margin-bottom: 0 !important;
}

.space-y-5 > *:first-child {
  margin-top: 0 !important;
}

/* Header spacing */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5rem !important;
}

/* Padding classes */
.py-3 {
  padding-top: 0.625rem !important;
  padding-bottom: 0.625rem !important;
}

.py-4 {
  padding-top: 0.875rem !important;
  padding-bottom: 0.875rem !important;
}

.py-5 {
  padding-top: 1.125rem !important;
  padding-bottom: 1.125rem !important;
}

.p-5 {
  padding: 1.125rem !important;
}

.p-4 {
  padding: 0.875rem !important;
}

/* Margin classes */
.mt-6 {
  margin-top: 1.25rem !important;
}

.mt-5 {
  margin-top: 1.125rem !important;
}

.mt-4 {
  margin-top: 0.875rem !important;
}

.mb-4 {
  margin-bottom: 0.875rem !important;
}

.mb-6 {
  margin-bottom: 1.25rem !important;
}

.my-4 {
  margin-top: 0.875rem !important;
  margin-bottom: 0.875rem !important;
} 
```

layouts\MainLayout.jsx
```jsx
        <div className="flex-1 overflow-auto">
          <main className="container mx-auto px-4 pt-4 pb-5 card-container">
            {children}
          </main>
        </div> 
```

lib\api.js
```js
/**
 * API service for communicating with the backend
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';



/**
 * Perform an API request with error handling
 * @param {string} endpoint - API endpoint
 * @param {Object} options - Request options
 * @returns {Promise<any>} - Response data
 */
async function request(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };

  const config = {
    ...options,
    headers,
  };

  try {
    const response = await fetch(url, config);

    // Handle client errors (4xx)
    if (response.status >= 400 && response.status < 500) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || `API error: ${response.status} ${response.statusText}`);
    }

    // Handle server errors (5xx) - let React Query handle retries
    if (!response.ok) {
      throw new Error(`Server error: ${response.status} ${response.statusText}`);
    }

    // No content
    if (response.status === 204) {
      return null;
    }

    return await response.json();
  } catch (error) {
    // Provide more user-friendly error messages for network issues
    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
      throw new Error('Cannot connect to the server. Please check your network connection and make sure the backend is running.');
    }

    throw error;
  }
}


/**
 * API service with all available endpoints
 */
const api = {
  // Client endpoints
  getClients: (params) => {
    const queryString = params ? new URLSearchParams(params).toString() : '';
    return request(`/clients${queryString ? '?' + queryString : ''}`);
  },
  getClient: (id) => request(`/clients/${id}`),
  getClientDashboard: (id) => request(`/clients/${id}/dashboard`),

  // Contract endpoints
  getContract: (id) => request(`/contracts/${id}`),
  getClientContract: (clientId) => request(`/clients/${clientId}/contract`),
  getAvailablePeriods: (contractId, clientId) =>
    request(`/contracts/${contractId}/periods?client_id=${clientId}`),

  // Payment endpoints
  getPayments: (clientId, params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return request(`/clients/${clientId}/payments?${queryString}`);
  },
  getPayment: (id) => request(`/payments/${id}`),
  createPayment: (data) => request('/payments', {
    method: 'POST',
    body: JSON.stringify(data),
  }),
  updatePayment: (id, data) => request(`/payments/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  }),
  deletePayment: (id) => request(`/payments/${id}`, {
    method: 'DELETE',
  }),

  // Calculation endpoints
  calculateFee: (contractId, totalAssets) => request('/calculate-fee', {
    method: 'POST',
    body: JSON.stringify({ contract_id: contractId, total_assets: totalAssets }),
  }),
  calculateVariance: (actualFee, expectedFee) => request(`/calculate-variance?actual_fee=${actualFee}&expected_fee=${expectedFee}`, {
    method: 'POST',
  }),

  // File endpoints
  checkPaymentFiles: (paymentId) =>
    request(`/files/check/payment/${paymentId}`),
  checkClientFiles: (clientId) =>
    request(`/files/check/client/${clientId}`),
  getPaymentFiles: (paymentId) =>
    request(`/files/payment/${paymentId}`),
};

export default api;
```

lib\constants.js
```js
/**
 * Application-wide constants
 */

// Month names used for displaying dates
export const MONTH_NAMES = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

// Payment methods used in forms and displays
export const PAYMENT_METHODS = [
  { label: 'Auto - ACH', value: 'Auto - ACH' },
  { label: 'Auto - Check', value: 'Auto - Check' },
  { label: 'Invoice - Check', value: 'Invoice - Check' },
  { label: 'Wire Transfer', value: 'Wire Transfer' },
  { label: 'Check', value: 'Check' },
];

// Status colors for status badges and indicators
export const STATUS_COLORS = {
  // Compliance statuses
  green: 'bg-green-100 text-green-800',
  yellow: 'bg-yellow-100 text-yellow-800',
  red: 'bg-red-100 text-red-800',

  // Fee variance statuses
  exact: 'bg-blue-100 text-blue-800',
  acceptable: 'bg-green-100 text-green-800',
  warning: 'bg-yellow-100 text-yellow-800',
  alert: 'bg-red-100 text-red-800',
  unknown: 'bg-gray-100 text-gray-800',
  gray: 'bg-gray-100 text-gray-800',
};

// Fee types
export const FEE_TYPES = {
  FLAT: 'flat',
  PERCENTAGE: 'percentage',
  PERCENT: 'percent'
};

// Payment schedules
export const PAYMENT_SCHEDULES = {
  MONTHLY: 'monthly',
  QUARTERLY: 'quarterly'
};

// Payment status
export const PAYMENT_STATUS = {
  PAID: 'Paid',
  DUE: 'Due',
  OVERDUE: 'Overdue'
};
```

lib\dateUtils.js
```js
import { format, parseISO } from 'date-fns';
import { MONTH_NAMES } from './constants';

/**
 * Format a date string or Date object to a human-readable format
 * @param {string|Date} dateInput - ISO date string or Date object
 * @param {string} formatStr - Optional format string
 * @returns {string} - Formatted date string
 */
export const formatDate = (dateInput, formatStr = 'MMM d, yyyy') => {
  if (!dateInput) return 'N/A';
  try {
    // Handle both string dates and Date objects
    const date = dateInput instanceof Date ? dateInput : parseISO(dateInput);
    return format(date, formatStr);
  } catch (error) {
    return 'Invalid Date';
  }
};

// Business logic functions moved to backend API
// calculateNextPaymentDue() - Use backend calculations instead

/**
 * Format applied period from payment data
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period string
 */
export const formatAppliedPeriod = (payment) => {
  if (!payment) return 'N/A';

  if (payment.applied_start_quarter) {
    return `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
  }

  if (payment.applied_start_month) {
    const monthIndex = payment.applied_start_month - 1; // Convert to 0-based index
    if (monthIndex >= 0 && monthIndex < 12) {
      return `${MONTH_NAMES[monthIndex]} ${payment.applied_start_month_year}`;
    }
  }

  return 'N/A';
};

/**
 * Format period range for split payments
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period range
 */
export const formatPeriodRange = (payment) => {
  if (!payment || !payment.is_split_payment) return formatAppliedPeriod(payment);

  let startPeriod, endPeriod;

  if (payment.applied_start_quarter) {
    startPeriod = `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
    endPeriod = `Q${payment.applied_end_quarter} ${payment.applied_end_quarter_year}`;
  } else if (payment.applied_start_month) {
    const startMonthIndex = payment.applied_start_month - 1;
    const endMonthIndex = payment.applied_end_month - 1;

    if (startMonthIndex >= 0 && startMonthIndex < 12 &&
      endMonthIndex >= 0 && endMonthIndex < 12) {
      startPeriod = `${MONTH_NAMES[startMonthIndex]} ${payment.applied_start_month_year}`;
      endPeriod = `${MONTH_NAMES[endMonthIndex]} ${payment.applied_end_month_year}`;
    } else {
      return 'Invalid Period';
    }
  } else {
    return 'N/A';
  }

  return `${startPeriod} - ${endPeriod}`;
};

// isPeriodInPast() - Business logic moved to backend
```

lib\formatUtils.js
```js
/**
 * Formatting utilities for the frontend.
 * This file contains only presentation/formatting functions, no business logic.
 */

import { FEE_TYPES } from './constants';

/**
 * Format a number as currency
 * @param {number} value - Number to format
 * @returns {string} - Formatted currency string
 */
export const formatCurrency = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Format a number as percentage
 * @param {number} value - Number to format (as a decimal, e.g. 0.42 for 42%)
 * @returns {string} - Formatted percentage string
 */
export const formatPercentage = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Generate fee references for different payment frequencies
 * NOTE: This is display logic for fee reference tables.
 * TODO: Consider moving to backend API for Sprint 4+
 * 
 * @param {Object} contract - Contract object
 * @param {number} baseAssets - Base asset amount for percentage calculations (optional)
 * @returns {Object|null} - Object with monthly, quarterly, and annual rates
 */
export const generateFeeReferences = (contract, baseAssets = null) => {
  if (!contract) return null;

  let monthlyRate, quarterlyRate, annualRate;

  if (contract.fee_type === FEE_TYPES.FLAT) {
    // Flat rate contracts: scale by frequency
    if (contract.payment_schedule === 'monthly') {
      monthlyRate = contract.flat_rate;
      quarterlyRate = monthlyRate * 3;
      annualRate = monthlyRate * 12;
    } else {
      // Quarterly payment schedule
      quarterlyRate = contract.flat_rate;
      monthlyRate = quarterlyRate / 3;
      annualRate = quarterlyRate * 4;
    }
    
    return {
      monthly: formatCurrency(monthlyRate),
      quarterly: formatCurrency(quarterlyRate),
      annual: formatCurrency(annualRate)
    };
  } else if (contract.percent_rate) {
    // Percentage contracts: the stored rate is already scaled to payment frequency
    // We need to show the effective dollar amounts based on frequency
    const percentRate = contract.percent_rate;
    
    if (baseAssets) {
      // Calculate dollar amounts based on frequency
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = baseAssets * percentRate;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly payment schedule
        quarterlyRate = baseAssets * percentRate;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: formatCurrency(monthlyRate),
        quarterly: formatCurrency(quarterlyRate),
        annual: formatCurrency(annualRate)
      };
    } else {
      // No assets available, show percentage rates with proper scaling
      if (contract.payment_schedule === 'monthly') {
        // Monthly rate is the base
        monthlyRate = percentRate * 100;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly rate is the base
        quarterlyRate = percentRate * 100;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: `${monthlyRate.toFixed(3)}%`,
        quarterly: `${quarterlyRate.toFixed(3)}%`,
        annual: `${annualRate.toFixed(3)}%`
      };
    }
  }

  return null;
};
```

pages\_app.js
```js
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { queryClient } from '../store/queries';
import '../styles/globals.css';

function MyApp({ Component, pageProps }) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  );
}

export default MyApp;
```

pages\_document.js
```js
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html>
      <Head>
        <link rel="stylesheet" href="/build.css" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
} 
```

pages\contacts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ContactsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contacts</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contacts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ContactsPage;
```

pages\contracts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ContractsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contracts</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contracts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ContractsPage;
```

pages\export.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ExportPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Export Data</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Export Data page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ExportPage;
```

pages\index.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';

const LaunchMenu = () => {
  const router = useRouter();

  const handleNavigation = (path) => {
    if (path === '/payments') {
      router.push('/payments');
    } else {
      router.push('/under-construction', { 
        query: { feature: path.replace('/', '') } 
      });
    }
  };

  const modules = [
    {
      id: 'payments',
      title: '401k Payments Manager',
      description: 'Manage and Review Client 401k payments',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <rect x="2" y="5" width="20" height="14" rx="2"></rect>
          <line x1="2" y1="10" x2="22" y2="10"></line>
        </svg>
      ),
      path: '/payments'
    },
    {
      id: 'agenda',
      title: 'Agenda Generator',
      description: 'Create and manage meeting agendas',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
          <path d="M14 2v6h6"></path>
          <line x1="16" y1="13" x2="8" y2="13"></line>
          <line x1="16" y1="17" x2="8" y2="17"></line>
          <line x1="10" y1="9" x2="8" y2="9"></line>
        </svg>
      ),
      path: '/agenda'
    },
    {
      id: 'efip',
      title: 'eFIP',
      description: 'Financial Independence Projections',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <line x1="12" y1="20" x2="12" y2="10"></line>
          <line x1="18" y1="20" x2="18" y2="4"></line>
          <line x1="6" y1="20" x2="6" y2="16"></line>
        </svg>
      ),
      path: '/efip'
    },
    {
      id: 'structured-notes',
      title: 'Structured Notes Tracker',
      description: 'GBIL, Cash, and Structured Notes',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
        </svg>
      ),
      path: '/structured-notes'
    },
    {
      id: 'ai-tools',
      title: 'AI Tools',
      description: 'AI-powered investment analysis',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
          <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
          <path d="M12 12l9.2-7.4"></path>
          <path d="M12 12V2"></path>
        </svg>
      ),
      path: '/ai-tools'
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>HohimerPro</title>
      </Head>
      
      <main className="flex-1 flex flex-col justify-center items-center px-4 py-12">
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-gray-900 mb-3">Welcome to HohimerPro</h1>
          <p className="text-xl text-gray-600 max-w-2xl">
            Investment management suite for Hohimer Wealth Management
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl w-full">
          {modules.map((module) => (
            <button
              key={module.id}
              onClick={() => handleNavigation(module.path)}
              className="bg-white border border-gray-200 hover:border-blue-500 rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-200 text-left flex items-start gap-4"
            >
              <div className="p-2 bg-blue-50 text-blue-600 rounded-lg">
                {module.icon}
              </div>
              <div>
                <h2 className="text-xl font-medium text-gray-900 mb-2">{module.title}</h2>
                <p className="text-gray-500">{module.description}</p>
              </div>
            </button>
          ))}
        </div>
      </main>
      
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};

export default LaunchMenu;
```

pages\payments.js
```js
import React, { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import PageLayout from '../components/layout/PageLayout';
import ClientDashboard from '../components/payment/ClientDashboard';
import PaymentForm from '../components/payment/PaymentForm';
import PaymentHistory from '../components/payment/PaymentHistory';
import ErrorDisplay from '../components/ui/ErrorDisplay';
import api from '../lib/api';
import useStore from '../store';
import { useClient } from '../hooks/useClientData';

const PaymentsPage = () => {
  const {
    selectedClientId,
    setSelectedClientId,
    documentViewerOpen,
    setDocumentViewerOpen
  } = useStore();
  const { data: clientDetails } = useClient(selectedClientId);
  const [editingPayment, setEditingPayment] = useState(null);

  // Fetch client list
  const {
    data: clients = [],
    isLoading,
    error,
  } = useQuery(['clients'], () => api.getClients());

  // If no client is selected, select the first one automatically
  useEffect(() => {
    if (!selectedClientId && clients.length > 0) {
      setSelectedClientId(clients[0].client_id);
    }
  }, [clients, selectedClientId, setSelectedClientId]);

  const toggleDocumentViewer = () => {
    setDocumentViewerOpen(!documentViewerOpen);
  };

  const renderContent = () => {
    if (error) {
      return (
        <ErrorDisplay 
          title="Error loading clients"
          error={error}
        />
      );
    }

    if (!selectedClientId) {
      return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <p className="text-center text-gray-500">
            {clients.length > 0
              ? 'Select a client from the sidebar to view payment information.'
              : 'No clients available. Please add clients to the system.'}
          </p>
        </div>
      );
    }

    const client = clients.find(c => c.client_id === selectedClientId);

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between mb-8">
          <div>
            <div>
              {clientDetails?.full_name && (
                <div className="text-sm text-dark-400 mb-1 uppercase tracking-wider">
                  {clientDetails.full_name}
                </div>
              )}
              <h1 className="text-3xl font-bold text-dark-700">
                {isLoading ? 'Loading...' : client?.display_name || 'Client Company Name'}
              </h1>
              <div className="h-1 w-full mt-2 bg-gradient-to-r from-primary-600 to-primary-200 rounded-full"></div>
            </div>
          </div>
          <button
            className={`
              flex items-center gap-2 px-4 py-2.5 rounded-lg shadow-sm transition-all duration-200
              ${documentViewerOpen
                ? 'bg-primary-600 text-white hover:bg-primary-700 shadow-md'
                : 'bg-white border border-light-400 text-dark-600 hover:bg-light-200 hover:border-primary-400'}
            `}
            onClick={toggleDocumentViewer}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className={documentViewerOpen ? 'text-white' : 'text-primary-500'}
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <span className="font-medium">{documentViewerOpen ? "Hide Documents" : "View Documents"}</span>
          </button>
        </div>

        <ClientDashboard clientId={selectedClientId} />

        <div className={`transition-all duration-300 ${!documentViewerOpen ? 'mx-[20%]' : ''}`}>
          <PaymentForm 
            clientId={selectedClientId} 
            editingPayment={editingPayment}
            onEditingPaymentChange={setEditingPayment}
          />
        </div>

        <PaymentHistory 
          clientId={selectedClientId}
          editingPayment={editingPayment}
          onEditingPaymentChange={setEditingPayment}
        />
      </div>
    );
  };

  return (
    <PageLayout clients={clients} isLoading={isLoading}>
      {renderContent()}
    </PageLayout>
  );
};

export default PaymentsPage;
```

pages\summary.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const SummaryPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Summary</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Summary page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default SummaryPage;
```

pages\under-construction.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';

const UnderConstruction = () => {
  const router = useRouter();
  const { feature } = router.query;
  
  const getFeatureName = () => {
    switch(feature) {
      case 'agenda': return 'Agenda Generator';
      case 'efip': return 'eFIP (Financial Independence Projections)';
      case 'structured-notes': return 'Structured Notes Planner';
      case 'ai-tools': return 'AI Tools';
      default: return 'This feature';
    }
  };

  const getFeatureIcon = () => {
    switch(feature) {
      case 'agenda':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <path d="M14 2v6h6"></path>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <line x1="10" y1="9" x2="8" y2="9"></line>
          </svg>
        );
      case 'efip':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="12" y1="20" x2="12" y2="10"></line>
            <line x1="18" y1="20" x2="18" y2="4"></line>
            <line x1="6" y1="20" x2="6" y2="16"></line>
          </svg>
        );
      case 'structured-notes':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
          </svg>
        );
      case 'ai-tools':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
            <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
            <path d="M12 12l9.2-7.4"></path>
            <path d="M12 12V2"></path>
          </svg>
        );
      default:
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>{getFeatureName()} | HohimerPro</title>
      </Head>
      
      <main className="flex-1 flex flex-col items-center justify-center p-4">
        <div className="bg-white shadow-md rounded-lg p-8 max-w-md w-full text-center">
          <div className="flex justify-center mb-6">
            <div className="p-4 bg-yellow-50 text-yellow-600 rounded-full">
              {getFeatureIcon()}
            </div>
          </div>
          
          <h1 className="text-2xl font-bold text-gray-900 mb-2">{getFeatureName()}</h1>
          
          <div className="mb-6 text-yellow-500 text-5xl">🚧</div>
          
          <p className="text-gray-600 mb-8">
            We're currently building this feature. Check back soon for updates!
          </p>
          
          <button
            onClick={() => router.push('/')}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition-colors duration-200 inline-flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M19 12H5M12 19l-7-7 7-7"/>
            </svg>
            Return to Home
          </button>
        </div>
      </main>
      
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};

export default UnderConstruction; 
```

store\index.js
```js
import { create } from 'zustand';

/**
 * Central application state store using Zustand
 */
const useStore = create((set) => ({
  // Client selection
  selectedClientId: null,
  setSelectedClientId: (clientId) => set({ selectedClientId: clientId }),
  
  // Document viewer state
  documentViewerOpen: false,
  setDocumentViewerOpen: (isOpen) => set({ documentViewerOpen: isOpen }),
  selectedDocumentUrl: null,
  setSelectedDocumentUrl: (url) => set({ selectedDocumentUrl: url }),
  
  // Mobile UI state
  isMobileMenuOpen: false,
  setMobileMenuOpen: (isOpen) => set({ isMobileMenuOpen: isOpen }),
  
  // Modal state
  modalOpen: false,
  modalContent: null,
  openModal: (content) => set({ modalOpen: true, modalContent: content }),
  closeModal: () => set({ modalOpen: false, modalContent: null }),
}));

export default useStore;
```

store\queries.js
```js
import { QueryClient } from '@tanstack/react-query';

/**
 * Configured QueryClient for application-wide use
 */
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      // Reduce window refetching to improve UX
      refetchOnWindowFocus: false,
      // Data remains fresh for 5 minutes by default
      staleTime: 1000 * 60 * 5,
      // Retry network and server errors, but not client errors
      retry: (failureCount, error) => {
        // Don't retry client errors (4xx)
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        // Retry up to 2 times for network/server errors
        return failureCount < 2;
      },
      // Exponential backoff with jitter
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
      // Show error details for better debugging
      onError: (error) => {
        console.error('Query error:', error);
      }
    },
    mutations: {
      // Retry mutations for server errors only
      retry: (failureCount, error) => {
        // Don't retry client errors (4xx)
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        // Retry once for server errors
        return failureCount < 1;
      },
      // Exponential backoff for mutations
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 10000)
    }
  },
});

/**
 * Centralized query keys for better cache management
 */
export const queryKeys = {
  clients: {
    all: ['clients'],
    detail: (id) => ['clients', id],
    contract: (id) => ['clients', id, 'contract'],
    payments: (id) => ['clients', id, 'payments'],
    summary: (id) => ['clients', id, 'summary'],
    files: (id) => ['clients', id, 'files'],
    dashboard: (id) => ['clients', id, 'dashboard'],
  },
  payments: {
    all: ['payments'],
    detail: (id) => ['payments', id],
    files: (id) => ['payments', id, 'files'],
  },
  contracts: {
    all: ['contracts'],
    detail: (id) => ['contracts', id],
    periods: (id, clientId) => ['contracts', id, 'periods', clientId],
  },
};
```

styles\globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Inter font - a modern, clean sans-serif font perfect for financial applications */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  /* Typography */
  --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  
  /* Font sizes */
  --text-xs: 0.75rem;   /* 12px */
  --text-sm: 0.875rem;  /* 14px */
  --text-base: 1rem;    /* 16px */
  --text-lg: 1.125rem;  /* 18px */
  --text-xl: 1.25rem;   /* 20px */
  --text-2xl: 1.5rem;   /* 24px */
  --text-3xl: 1.875rem; /* 30px */

  /* Line heights */
  --leading-none: 1;
  --leading-tight: 1.25;
  --leading-snug: 1.375;
  --leading-normal: 1.5;
  --leading-relaxed: 1.625;
  
  /* Letter spacing */
  --tracking-tight: -0.025em;
  --tracking-normal: 0;
  --tracking-wide: 0.025em;
  --tracking-wider: 0.05em;
}

html,
body {
  padding: 0;
  margin: 0;
  font-family: var(--font-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: var(--text-base);
  line-height: var(--leading-normal);
  color: theme('colors.dark.500');
  background-color: theme('colors.light.bg');
}

* {
  box-sizing: border-box;
}

/* Typography Overrides */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: var(--leading-tight);
  margin-top: 0;
  color: theme('colors.dark.700');
}

h1 {
  font-size: var(--text-2xl);
  font-weight: 700;
}

h2 {
  font-size: var(--text-xl);
  font-weight: 600;
}

h3 {
  font-size: var(--text-lg);
  font-weight: 600;
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

/* Table Typography & Styling */
table {
  font-size: var(--text-sm);
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
  overflow: hidden;
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.DEFAULT');
  background-color: theme('colors.light.100');
}

thead {
  background-color: theme('colors.light.300');
}

th {
  font-size: var(--text-xs);
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: var(--tracking-wider);
  color: theme('colors.dark.500');
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid theme('colors.light.400');
}

td {
  font-size: var(--text-sm);
  line-height: var(--leading-snug);
  padding: 1rem;
  border-bottom: 1px solid theme('colors.light.300');
  transition: background-color 0.2s ease;
}

tr:hover td {
  background-color: theme('colors.primary.50');
}

tr:last-child td {
  border-bottom: none;
}

/* Form Typography */
label {
  font-size: var(--text-sm);
  font-weight: 500;
  color: theme('colors.dark.500');
  margin-bottom: 0.25rem;
  display: block;
}

input, select, textarea {
  font-family: var(--font-primary);
  font-size: var(--text-sm);
  padding: 0.625rem 0.75rem;
  border: 1px solid theme('colors.light.500');
  border-radius: 0.375rem;
  background-color: theme('colors.light.100');
  transition: all 0.2s ease;
  width: 100%;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: theme('colors.primary.500');
  box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.15);
}

button {
  font-family: var(--font-primary);
  font-weight: 500;
  font-size: var(--text-sm);
}

/* Links */
a {
  color: theme('colors.primary.600');
  text-decoration: none;
  transition: color 0.2s ease-in-out;
}

a:hover {
  color: theme('colors.primary.700');
}

/* Utility Classes */
.text-xs {
  font-size: var(--text-xs);
  line-height: var(--leading-normal);
}

.text-sm {
  font-size: var(--text-sm);
  line-height: var(--leading-normal);
}

.text-base {
  font-size: var(--text-base);
  line-height: var(--leading-normal);
}

.text-lg {
  font-size: var(--text-lg);
  line-height: var(--leading-normal);
}

.text-xl {
  font-size: var(--text-xl);
  line-height: var(--leading-tight);
}

.text-2xl {
  font-size: var(--text-2xl);
  line-height: var(--leading-tight);
}

.font-light {
  font-weight: 300;
}

.font-normal {
  font-weight: 400;
}

.font-medium {
  font-weight: 500;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

/* ========== COMPONENT STYLES ========== */

/* Card Styling */
.card {
  border-radius: 0.5rem;
  background-color: theme('colors.light.card');
  box-shadow: theme('boxShadow.card');
  transition: box-shadow 0.3s ease, transform 0.3s ease;
  overflow: hidden;
}

.card:hover {
  box-shadow: theme('boxShadow.hover');
}

/* Form Styling */
.form-container {
  background-color: theme('colors.light.card');
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.form');
  border-left: 3px solid theme('colors.primary.600');
}

/* Dark UI Elements */
.navbar-dark {
  background-color: theme('colors.dark.bg');
  color: theme('colors.light.300');
}

.sidebar-dark {
  background-color: theme('colors.dark.card');
  color: theme('colors.light.300');
}

/* Animation classes */
.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes slideUp {
  0% { transform: translateY(10px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

/* Custom scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: theme('colors.light.300');
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: theme('colors.light.500');
  border-radius: 4px;
  transition: background 0.2s ease;
}

::-webkit-scrollbar-thumb:hover {
  background: theme('colors.dark.400');
}
```