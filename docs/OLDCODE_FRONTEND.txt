#### THIS IS THE OLD CODE BUILD ####

public/
└── build.css

src/
├── components/
│   ├── client/
│   │   └── ClientSearch.jsx
│   ├── layout/
│   │   ├── Header.jsx
│   │   ├── PageLayout.jsx
│   │   └── Sidebar.jsx
│   ├── payment/
│   │   ├── PaymentForm/
│   │   │   ├── FormActions.jsx
│   │   │   ├── usePaymentFormState.js
│   │   │   ├── usePaymentFormSubmit.js
│   │   │   └── usePaymentFormValidation.js
│   │   ├── PaymentHistory/
│   │   │   ├── ExpandedPaymentDetails.jsx
│   │   │   ├── PaymentTableRow.jsx
│   │   │   └── usePaymentTableState.js
│   │   ├── ClientDashboard.jsx
│   │   ├── ComplianceCard.jsx
│   │   ├── ContractCard.jsx
│   │   ├── PaymentForm.jsx
│   │   ├── PaymentFormFields.jsx
│   │   ├── PaymentHistory.jsx
│   │   ├── PaymentInfoCard.jsx
│   │   └── SplitPaymentControls.jsx
│   ├── hooks/
│   │   ├── useClientData.js
│   │   ├── useFileData.js
│   │   └── usePaymentData.js
│   ├── layouts/
│   │   └── MainLayout.jsx
│   ├── pages/
│   │   ├── _app.js
│   │   ├── _document.js
│   │   ├── contacts.js
│   │   ├── contracts.js
│   │   ├── export.js
│   │   ├── index.js
│   │   ├── payments.js
│   │   ├── summary.js
│   │   └── under-construction.js
│   └── styles/
│       ├── globals.css
│       └── index.css

next.config.js
package-lock.json
package.json
postcss.config.js
tailwind.config.js


=======


<files>
next.config.js
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  webpack: (config) => {
    config.resolve.extensions = ['.js', '.jsx', '.json', '.ts', '.tsx', ...config.resolve.extensions];
    config.resolve.alias.canvas = false;
    config.resolve.alias.encoding = false;
    return config;
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Cross-Origin-Opener-Policy',
            value: 'same-origin',
          },
          {
            key: 'Cross-Origin-Embedder-Policy',
            value: 'require-corp',
          },
        ],
      },
    ];
  },
};
module.exports = nextConfig;
```

package.json
```json
{
    "name": "401k-payment-tracker-frontend",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "dev": "next dev --port 6069",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "next": "13.5.4",
        "react": "18.2.0",
        "react-dom": "18.2.0",
        "@tanstack/react-query": "^4.35.3",
        "@tanstack/react-query-devtools": "^4.35.3",
        "date-fns": "^2.30.0",
        "react-pdf": "^7.3.3",
        "zustand": "^4.4.1"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.16",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.3",
        "eslint": "8.51.0",
        "eslint-config-next": "13.5.4"
    }
  }
```

postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
} 
```

public\build.css
```css
*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}
::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}
/*
! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com
*/
/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/
*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}
::before,
::after {
  --tw-content: '';
}
/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/
html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}
/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/
body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}
/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/
hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}
/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/
abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}
/*
Remove the default font size and weight for headings.
*/
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}
/*
Reset links to optimize for opt-in styling instead of opt-out.
*/
a {
  color: inherit;
  text-decoration: inherit;
}
/*
Add the correct font weight in Edge and Safari.
*/
b,
strong {
  font-weight: bolder;
}
/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/
code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}
/*
Add the correct font size in all browsers.
*/
small {
  font-size: 80%;
}
/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/
table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}
/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}
/*
Remove the inheritance of text transform in Edge and Firefox.
*/
button,
select {
  text-transform: none;
}
/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/
button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}
/*
Use the modern Firefox focus style for all focusable elements.
*/
:-moz-focusring {
  outline: auto;
}
/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/
:-moz-ui-invalid {
  box-shadow: none;
}
/*
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
  vertical-align: baseline;
}
/*
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}
/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}
/*
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}
/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}
/*
Add the correct display in Chrome and Safari.
*/
summary {
  display: list-item;
}
/*
Removes the default spacing and border for appropriate elements.
*/
blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}
fieldset {
  margin: 0;
  padding: 0;
}
legend {
  padding: 0;
}
ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}
/*
Reset default styling for dialogs.
*/
dialog {
  padding: 0;
}
/*
Prevent resizing textareas horizontally by default.
*/
textarea {
  resize: vertical;
}
/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/
input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}
input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}
/*
Set the default cursor for buttons.
*/
button,
[role="button"] {
  cursor: pointer;
}
/*
Make sure disabled buttons don't get the pointer cursor.
*/
:disabled {
  cursor: default;
}
/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/
img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}
/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/
img,
video {
  max-width: 100%;
  height: auto;
}
/* Make elements with the HTML hidden attribute stay hidden by default */
[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}
.pointer-events-none {
  pointer-events: none;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.inset-y-0 {
  top: 0px;
  bottom: 0px;
}
.left-0 {
  left: 0px;
}
.left-1 {
  left: 0.25rem;
}
.left-3 {
  left: 0.75rem;
}
.right-0 {
  right: 0px;
}
.right-1 {
  right: 0.25rem;
}
.right-3 {
  right: 0.75rem;
}
.top-0 {
  top: 0px;
}
.top-1 {
  top: 0.25rem;
}
.top-1\/2 {
  top: 50%;
}
.z-0 {
  z-index: 0;
}
.z-10 {
  z-index: 10;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}
.mb-1 {
  margin-bottom: 0.25rem;
}
.mb-2 {
  margin-bottom: 0.5rem;
}
.mb-4 {
  margin-bottom: 1rem;
}
.mb-6 {
  margin-bottom: 1.5rem;
}
.ml-1 {
  margin-left: 0.25rem;
}
.ml-2 {
  margin-left: 0.5rem;
}
.mr-2 {
  margin-right: 0.5rem;
}
.mr-3 {
  margin-right: 0.75rem;
}
.mr-8 {
  margin-right: 2rem;
}
.mt-1 {
  margin-top: 0.25rem;
}
.mt-2 {
  margin-top: 0.5rem;
}
.mt-6 {
  margin-top: 1.5rem;
}
.flex {
  display: flex;
}
.inline-flex {
  display: inline-flex;
}
.table {
  display: table;
}
.grid {
  display: grid;
}
.hidden {
  display: none;
}
.h-10 {
  height: 2.5rem;
}
.h-12 {
  height: 3rem;
}
.h-16 {
  height: 4rem;
}
.h-20 {
  height: 5rem;
}
.h-3 {
  height: 0.75rem;
}
.h-4 {
  height: 1rem;
}
.h-5 {
  height: 1.25rem;
}
.h-6 {
  height: 1.5rem;
}
.h-8 {
  height: 2rem;
}
.h-full {
  height: 100%;
}
.max-h-64 {
  max-height: 16rem;
}
.min-h-screen {
  min-height: 100vh;
}
.w-1\/3 {
  width: 33.333333%;
}
.w-10 {
  width: 2.5rem;
}
.w-12 {
  width: 3rem;
}
.w-2\/3 {
  width: 66.666667%;
}
.w-2\/5 {
  width: 40%;
}
.w-3 {
  width: 0.75rem;
}
.w-3\/5 {
  width: 60%;
}
.w-4 {
  width: 1rem;
}
.w-48 {
  width: 12rem;
}
.w-6 {
  width: 1.5rem;
}
.w-8 {
  width: 2rem;
}
.w-80 {
  width: 20rem;
}
.w-full {
  width: 100%;
}
.min-w-full {
  min-width: 100%;
}
.max-w-md {
  max-width: 28rem;
}
.flex-1 {
  flex: 1 1 0%;
}
.flex-grow {
  flex-grow: 1;
}
.-translate-y-1\/2 {
  --tw-translate-y: -50%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.translate-x-1 {
  --tw-translate-x: 0.25rem;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.translate-x-5 {
  --tw-translate-x: 1.25rem;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.rotate-180 {
  --tw-rotate: 180deg;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.rotate-90 {
  --tw-rotate: 90deg;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
@keyframes pulse {
  50% {
    opacity: .5;
  }
}
.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
.animate-spin {
  animation: spin 1s linear infinite;
}
.appearance-none {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}
.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}
.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}
.flex-col {
  flex-direction: column;
}
.items-center {
  align-items: center;
}
.justify-start {
  justify-content: flex-start;
}
.justify-end {
  justify-content: flex-end;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.gap-1 {
  gap: 0.25rem;
}
.gap-2 {
  gap: 0.5rem;
}
.gap-3 {
  gap: 0.75rem;
}
.gap-4 {
  gap: 1rem;
}
.gap-5 {
  gap: 1.25rem;
}
.gap-6 {
  gap: 1.5rem;
}
.-space-x-px > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(-1px * var(--tw-space-x-reverse));
  margin-left: calc(-1px * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-1 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.25rem * var(--tw-space-x-reverse));
  margin-left: calc(0.25rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-3 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.75rem * var(--tw-space-x-reverse));
  margin-left: calc(0.75rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-x-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 0;
  margin-right: calc(1rem * var(--tw-space-x-reverse));
  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));
}
.space-y-1\.5 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(0.375rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.375rem * var(--tw-space-y-reverse));
}
.space-y-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));
}
.space-y-3 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(0.75rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.75rem * var(--tw-space-y-reverse));
}
.space-y-4 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}
.space-y-6 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));
}
.divide-y > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-y-reverse: 0;
  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
}
.divide-gray-200 > :not([hidden]) ~ :not([hidden]) {
  --tw-divide-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-divide-opacity, 1));
}
.overflow-auto {
  overflow: auto;
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-x-auto {
  overflow-x: auto;
}
.overflow-y-auto {
  overflow-y: auto;
}
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.whitespace-nowrap {
  white-space: nowrap;
}
.rounded {
  border-radius: 0.25rem;
}
.rounded-full {
  border-radius: 9999px;
}
.rounded-lg {
  border-radius: 0.5rem;
}
.rounded-md {
  border-radius: 0.375rem;
}
.rounded-none {
  border-radius: 0px;
}
.rounded-l-md {
  border-top-left-radius: 0.375rem;
  border-bottom-left-radius: 0.375rem;
}
.border {
  border-width: 1px;
}
.border-b {
  border-bottom-width: 1px;
}
.border-b-2 {
  border-bottom-width: 2px;
}
.border-l {
  border-left-width: 1px;
}
.border-r {
  border-right-width: 1px;
}
.border-t {
  border-top-width: 1px;
}
.border-blue-600 {
  --tw-border-opacity: 1;
  border-color: rgb(37 99 235 / var(--tw-border-opacity, 1));
}
.border-gray-100 {
  --tw-border-opacity: 1;
  border-color: rgb(243 244 246 / var(--tw-border-opacity, 1));
}
.border-gray-200 {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity, 1));
}
.border-gray-300 {
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity, 1));
}
.border-red-200 {
  --tw-border-opacity: 1;
  border-color: rgb(254 202 202 / var(--tw-border-opacity, 1));
}
.border-red-500 {
  --tw-border-opacity: 1;
  border-color: rgb(239 68 68 / var(--tw-border-opacity, 1));
}
.bg-blue-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(219 234 254 / var(--tw-bg-opacity, 1));
}
.bg-blue-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 246 255 / var(--tw-bg-opacity, 1));
}
.bg-blue-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));
}
.bg-gray-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));
}
.bg-gray-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1));
}
.bg-gray-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}
.bg-green-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(220 252 231 / var(--tw-bg-opacity, 1));
}
.bg-red-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));
}
.bg-red-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));
}
.bg-red-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));
}
.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));
}
.bg-yellow-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 249 195 / var(--tw-bg-opacity, 1));
}
.p-1 {
  padding: 0.25rem;
}
.p-2 {
  padding: 0.5rem;
}
.p-3 {
  padding: 0.75rem;
}
.p-4 {
  padding: 1rem;
}
.p-6 {
  padding: 1.5rem;
}
.px-1\.5 {
  padding-left: 0.375rem;
  padding-right: 0.375rem;
}
.px-2 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}
.px-3 {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}
.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}
.px-6 {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}
.py-0\.5 {
  padding-top: 0.125rem;
  padding-bottom: 0.125rem;
}
.py-1 {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}
.py-1\.5 {
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
}
.py-12 {
  padding-top: 3rem;
  padding-bottom: 3rem;
}
.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}
.py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}
.py-4 {
  padding-top: 1rem;
  padding-bottom: 1rem;
}
.py-6 {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}
.pb-2 {
  padding-bottom: 0.5rem;
}
.pl-10 {
  padding-left: 2.5rem;
}
.pl-3 {
  padding-left: 0.75rem;
}
.pl-8 {
  padding-left: 2rem;
}
.pr-3 {
  padding-right: 0.75rem;
}
.pr-8 {
  padding-right: 2rem;
}
.text-left {
  text-align: left;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}
.text-lg {
  font-size: 1.125rem;
  line-height: 1.75rem;
}
.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}
.text-xl {
  font-size: 1.25rem;
  line-height: 1.75rem;
}
.text-xs {
  font-size: 0.75rem;
  line-height: 1rem;
}
.font-bold {
  font-weight: 700;
}
.font-medium {
  font-weight: 500;
}
.font-semibold {
  font-weight: 600;
}
.uppercase {
  text-transform: uppercase;
}
.tracking-wider {
  letter-spacing: 0.05em;
}
.text-blue-500 {
  --tw-text-opacity: 1;
  color: rgb(59 130 246 / var(--tw-text-opacity, 1));
}
.text-blue-600 {
  --tw-text-opacity: 1;
  color: rgb(37 99 235 / var(--tw-text-opacity, 1));
}
.text-blue-800 {
  --tw-text-opacity: 1;
  color: rgb(30 64 175 / var(--tw-text-opacity, 1));
}
.text-gray-400 {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity, 1));
}
.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity, 1));
}
.text-gray-600 {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity, 1));
}
.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity, 1));
}
.text-gray-800 {
  --tw-text-opacity: 1;
  color: rgb(31 41 55 / var(--tw-text-opacity, 1));
}
.text-gray-900 {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}
.text-green-500 {
  --tw-text-opacity: 1;
  color: rgb(34 197 94 / var(--tw-text-opacity, 1));
}
.text-green-700 {
  --tw-text-opacity: 1;
  color: rgb(21 128 61 / var(--tw-text-opacity, 1));
}
.text-green-800 {
  --tw-text-opacity: 1;
  color: rgb(22 101 52 / var(--tw-text-opacity, 1));
}
.text-red-500 {
  --tw-text-opacity: 1;
  color: rgb(239 68 68 / var(--tw-text-opacity, 1));
}
.text-red-600 {
  --tw-text-opacity: 1;
  color: rgb(220 38 38 / var(--tw-text-opacity, 1));
}
.text-red-700 {
  --tw-text-opacity: 1;
  color: rgb(185 28 28 / var(--tw-text-opacity, 1));
}
.text-red-800 {
  --tw-text-opacity: 1;
  color: rgb(153 27 27 / var(--tw-text-opacity, 1));
}
.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}
.text-yellow-500 {
  --tw-text-opacity: 1;
  color: rgb(234 179 8 / var(--tw-text-opacity, 1));
}
.text-yellow-700 {
  --tw-text-opacity: 1;
  color: rgb(161 98 7 / var(--tw-text-opacity, 1));
}
.text-yellow-800 {
  --tw-text-opacity: 1;
  color: rgb(133 77 14 / var(--tw-text-opacity, 1));
}
.opacity-25 {
  opacity: 0.25;
}
.opacity-75 {
  opacity: 0.75;
}
.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.shadow-lg {
  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.shadow-sm {
  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}
.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.transition-colors {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.transition-transform {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}
* {
  box-sizing: border-box;
}
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: #f1f1f1;
}
::-webkit-scrollbar-thumb {
  background: #c5c5c5;
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}
.hover\:bg-blue-100:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(219 234 254 / var(--tw-bg-opacity, 1));
}
.hover\:bg-blue-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));
}
.hover\:bg-gray-100:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity, 1));
}
.hover\:bg-gray-50:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity, 1));
}
.hover\:bg-red-100:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));
}
.hover\:bg-red-700:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(185 28 28 / var(--tw-bg-opacity, 1));
}
.hover\:text-gray-600:hover {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity, 1));
}
.hover\:text-gray-700:hover {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity, 1));
}
.hover\:text-gray-900:hover {
  --tw-text-opacity: 1;
  color: rgb(17 24 39 / var(--tw-text-opacity, 1));
}
.focus\:border-transparent:focus {
  border-color: transparent;
}
.focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
.focus\:ring-2:focus {
  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}
.focus\:ring-blue-500:focus {
  --tw-ring-opacity: 1;
  --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));
}
.focus\:ring-offset-2:focus {
  --tw-ring-offset-width: 2px;
}
@media (min-width: 640px) {
  .sm\:inline-block {
    display: inline-block;
  }
  .sm\:flex {
    display: flex;
  }
  .sm\:hidden {
    display: none;
  }
  .sm\:flex-1 {
    flex: 1 1 0%;
  }
  .sm\:items-center {
    align-items: center;
  }
  .sm\:justify-between {
    justify-content: space-between;
  }
}
@media (min-width: 768px) {
  .md\:flex {
    display: flex;
  }
  .md\:hidden {
    display: none;
  }
  .md\:w-2\/5 {
    width: 40%;
  }
  .md\:grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .md\:grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .md\:grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .md\:flex-row {
    flex-direction: row;
  }
}
@media (min-width: 1024px) {
  .lg\:grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}
```

src\components\client\ClientSearch.jsx
```jsx
import React, { useState, useEffect } from 'react';
import useStore from '../../store';
const ClientSearch = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState(clients);
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  return (
    <div className="relative mb-4">
      <div className="relative group">
        <svg
          className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-dark-400 group-hover:text-primary-500 transition-colors duration-200"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input
          type="search"
          placeholder="Search clients..."
          className="pl-10 pr-8 w-full p-2.5 rounded-lg border border-light-400 bg-light-200
                    focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent
                    shadow-sm hover:shadow transition-all duration-200 text-dark-600 placeholder-dark-400"
          value={searchTerm}
          onChange={handleSearchChange}
          disabled={isLoading}
        />
        {searchTerm && (
          <button
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-dark-400 hover:text-primary-600 transition-colors duration-200"
            onClick={handleClearSearch}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
      </div>
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-light-400 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto animate-fade-in">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2.5 hover:bg-light-200 flex items-center first:rounded-t-lg last:rounded-b-lg border-b border-light-300 last:border-b-0"
              onClick={() => {
                setSelectedClientId(client.client_id);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : client.compliance_status === 'yellow'
                        ? 'text-yellow-500'
                        : 'text-red-500'
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-500">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-500">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};
export default ClientSearch;
```

src\components\layout\Header.jsx
```jsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
const Header = () => {
  const router = useRouter();
  const navItems = [
    { title: 'HOME', path: '/', active: router.pathname === '/' },
    { title: 'PAYMENTS', path: '/payments', active: router.pathname === '/payments' },
    { title: 'SUMMARY', path: '/summary', active: router.pathname === '/summary' },
    { title: 'CONTACTS', path: '/contacts', active: router.pathname === '/contacts' },
    { title: 'CONTRACTS', path: '/contracts', active: router.pathname === '/contracts' },
    { title: 'EXPORT DATA', path: '/export', active: router.pathname === '/export' },
  ];
  return (
    <header className="navbar-dark shadow-md">
      <div className="flex h-14 items-center justify-between px-6">
        <div className="flex items-center">
          <Link href="/" className="text-xl font-semibold text-white mr-8 hover:text-primary-300 transition-colors duration-200">
            HohimerPro
          </Link>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                href={item.path}
                className={`${
                  router.pathname === item.path 
                    ? 'bg-primary-600 text-white shadow-sm' 
                    : 'text-light-300 hover:bg-dark-accent hover:text-white'
                } rounded-md px-4 py-2 text-sm font-medium h-10 flex items-center transition-colors duration-200`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-light-300 hover:text-white transition-colors duration-200">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto bg-dark-600 px-3">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`${
                router.pathname === item.path
                  ? 'border-b-2 border-primary-500 text-white'
                  : 'text-light-400 hover:text-white'
              } px-4 py-2 text-sm`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};
export default Header;
```

src\components\layout\PageLayout.jsx
```jsx
import React from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import DocumentViewer from '../document/DocumentViewer';
import useStore from '../../store';
const PageLayout = ({ children, clients = [], isLoading = false }) => {
  const { documentViewerOpen } = useStore();
  return (
    <div className="flex flex-col min-h-screen bg-light-200">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        <Sidebar clients={clients} isLoading={isLoading} />
        <div className="flex flex-1 overflow-hidden">
          <div className={`flex-1 overflow-auto px-5 py-6 ${documentViewerOpen ? 'w-3/5' : 'w-full'}`}>
            <div className={`mx-auto ${documentViewerOpen ? 'max-w-full' : 'max-w-full'}`}>
              {children}
            </div>
          </div>
          <DocumentViewer />
        </div>
      </div>
    </div>
  );
};
export default PageLayout;
```

src\components\layout\Sidebar.jsx
```jsx
import React, { useState } from 'react';
import useStore from '../../store';
import ClientSearch from '../client/ClientSearch';
import { useRouter } from 'next/router';
const Sidebar = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [showByProvider, setShowByProvider] = useState(false);
  const router = useRouter();
  const groupClientsByProvider = () => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {})
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  const groupedClients = groupClientsByProvider();
  const StatusIcon = ({ status }) => {
    if (status === 'green') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-green-500"
        >
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
      );
    } else if (status === 'yellow') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-yellow-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    } else {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-red-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    }
  };
  if (isLoading) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-6 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
        <div className="p-2 flex-1 overflow-auto">
          <div className="animate-pulse space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between mt-3">
          <span className="text-sm font-medium text-gray-700">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      <div className="p-2 flex-1 overflow-auto">
        {groupedClients.map(([provider, providerClients]) => (
          <div key={provider} className="mb-2">
            {showByProvider && (
              <div className="px-3 py-2 text-xs font-semibold text-gray-600 bg-gray-50 rounded-md mb-1">
                {provider}
              </div>
            )}
            {providerClients.map(client => (
              <button
                key={client.client_id}
                className={`w-full flex items-center py-2 px-3 mb-1 text-left rounded transition-colors ${
                  selectedClientId === client.client_id 
                    ? 'bg-gray-100 border-l-4 border-primary-600 font-medium text-dark-700' 
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedClientId(client.client_id)}
              >
                <span className="truncate flex-grow">{client.display_name}</span>
                <span className="ml-2 flex-shrink-0">
                  <StatusIcon status={client.compliance_status} />
                </span>
              </button>
            ))}
          </div>
        ))}
        {clients.length === 0 && (
          <div className="p-4 text-center text-gray-500">
            No clients available
          </div>
        )}
      </div>
    </div>
  );
};
export default Sidebar;
```

src\components\payment\ClientDashboard.jsx
```jsx
import React from 'react';
import ContractCard from './ContractCard';
import PaymentInfoCard from './PaymentInfoCard';
import ComplianceCard from './ComplianceCard';
import ErrorDisplay from '../ui/ErrorDisplay';
import { useClient, useClientContract, useClientDashboard } from '../../hooks/useClientData';
import { usePaymentHistory } from '../../hooks/usePaymentData';
import useStore from '../../store';
const ClientDashboard = ({ clientId }) => {
  const { documentViewerOpen } = useStore();
  const {
    data: dashboardData,
    isLoading: isDashboardLoading,
    error: dashboardError,
  } = useClientDashboard(clientId);
  const {
    data: client,
    isLoading: isClientLoading,
    error: clientError,
  } = useClient(clientId);
  const {
    data: contract,
    isLoading: isContractLoading,
    error: contractError,
  } = useClientContract(clientId);
  const {
    data: payments = [],
    isLoading: isPaymentsLoading,
    error: paymentsError,
  } = usePaymentHistory(clientId, { page: 1, limit: 5 });
  const isLoading = isClientLoading || isContractLoading || isPaymentsLoading || isDashboardLoading;
  const error = clientError || contractError || paymentsError || dashboardError;
  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading client information"
        error={error}
      />
    );
  }
  const cardLayoutClass = documentViewerOpen
    ? "grid grid-cols-1 lg:grid-cols-2 gap-6"
    : "grid grid-cols-1 md:grid-cols-3 gap-6";
  return (
    <div className="space-y-6">
      <div className={cardLayoutClass}>
        <ContractCard
          contract={contract}
          isLoading={isLoading}
        />
        <PaymentInfoCard
          client={client}
          contract={contract}
          payments={payments}
          isLoading={isLoading}
        />
        <ComplianceCard
          dashboardData={dashboardData}
          isLoading={isDashboardLoading}
        />
      </div>
    </div>
  );
};
export default ClientDashboard;
```

src\components\payment\ComplianceCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency, generateFeeReferences } from '../../lib/formatUtils';
const ComplianceCard = ({ dashboardData, isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
        </div>
        <div className="animate-pulse flex flex-col md:flex-row gap-4 mt-3">
          <div className="flex-1">
            <div className="h-10 bg-gray-200 rounded w-2/3 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </Card>
    );
  }
  const overduePeriods = dashboardData?.payment_status?.overdue_periods || [];
  const hasOverduePeriods = overduePeriods.length > 0;
  const currentStatus = dashboardData?.payment_status?.current_status || 'Due';
  const currentPeriod = dashboardData?.payment_status?.current_period || 'N/A';
  const contract = dashboardData?.contract;
  const client = dashboardData?.client;
  const getStatusBgColor = () => {
    if (hasOverduePeriods || currentStatus === 'Overdue') return 'bg-red-50 border-red-200 text-red-700';
    if (currentStatus === 'Due') return 'bg-yellow-50 border-yellow-200 text-yellow-700';
    if (currentStatus === 'Current') return 'bg-green-50 border-green-200 text-green-700';
    return 'bg-green-50 border-green-200 text-green-700'; 
  };
  const getStatusText = () => {
    if (hasOverduePeriods) return 'Payment Overdue';
    if (currentStatus === 'Due') return 'Payment Due';
    if (currentStatus === 'Current') return 'Up to Date';
    return currentStatus; 
  };
  const lastRecordedAUM = dashboardData?.recent_payments?.find(p => p.total_assets)?.total_assets || null;
  const feeReferences = contract ? generateFeeReferences(contract, lastRecordedAUM) : null;
  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Status</h3>
      </div>
      <div className="flex flex-col gap-4 mt-4">
        {/* Payment Status Indicator */}
        <div className="flex-1">
          <div className={`rounded border p-3 ${getStatusBgColor()}`}>
            <div className="flex items-center gap-2">
              <StatusIcon status={hasOverduePeriods || currentStatus === 'Overdue' ? "red" : (currentStatus === 'Due' ? "yellow" : "green")} />
              <span className="font-medium">{getStatusText()}</span>
            </div>
            {/* Current Period Status */}
            <div className="mt-2 text-sm">
              <span className="font-medium">Current Period:</span> {currentPeriod}
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-white bg-opacity-50">
                {currentStatus}
              </span>
            </div>
          </div>
          {/* Overdue Periods */}
          {hasOverduePeriods && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-dark-600 mb-2">Missing Previous Period</h4>
              <div className="flex flex-wrap gap-2">
                {overduePeriods.map((period, index) => (
                  <span
                    key={index}
                    className="px-2 py-1 bg-red-100 text-red-800 rounded-md text-xs font-medium"
                  >
                    {period}
                  </span>
                ))}
              </div>
            </div>
          )}
          {/* Contract info */}
          {contract && (
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm">
              <div className="text-dark-500">
                <span className="font-medium">Schedule:</span> {contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly'}
              </div>
              <div className="text-dark-500">
                <span className="font-medium">Fee Type:</span> {contract.fee_type === 'flat' ? 'Flat' : 'Percentage'}
              </div>
            </div>
          )}
        </div>
        {/* Fee Reference */}
        {feeReferences && (
          <div className="mt-2 border-t border-light-300 pt-3">
            <h4 className="text-sm font-medium text-dark-600 mb-2">Fee Reference</h4>
            <div className="grid grid-cols-3 gap-2">
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Monthly</div>
                <div className="font-medium text-dark-700">{feeReferences.monthly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Quarterly</div>
                <div className="font-medium text-dark-700">{feeReferences.quarterly}</div>
              </div>
              <div className="bg-light-200 p-2 rounded text-center">
                <div className="text-xs text-dark-500">Annual</div>
                <div className="font-medium text-dark-700">{feeReferences.annual}</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};
const StatusIcon = ({ status }) => {
  if (status === 'green') {
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-500">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
        <polyline points="22 4 12 14.01 9 11.01"></polyline>
      </svg>
    );
  }
  if (status === 'yellow') {
    return (
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
    );
  }
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-500">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>
  );
};
export default ComplianceCard;
```

src\components\payment\ContractCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/formatUtils';
const ContractCard = ({ contract, isLoading }) => {
  if (isLoading) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  if (!contract) {
    return (
      <Card 
        variant="default"
        elevation="default"
      >
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
        </div>
        <div className="py-6 text-center text-gray-500">
          No contract information available
        </div>
      </Card>
    );
  }
  const details = [
    {
      label: 'Contract Number',
      value: contract.contract_number || 'N/A',
    },
    {
      label: 'Plan Provider',
      value: contract.provider_name,
    },
    {
      label: 'Payment Frequency',
      value: contract.payment_schedule === 'monthly' ? 'Monthly' : 'Quarterly',
    },
    {
      label: 'Fee Structure',
      value: contract.fee_type === 'flat' ? 'Flat Rate' : 'Percentage of AUM',
    },
    {
      label: 'Fee Amount',
      value:
        contract.fee_type === 'flat'
          ? formatCurrency(contract.flat_rate)
          : `${(contract.percent_rate * 100).toFixed(3)}%`,
    },
  ];
  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Contract Details</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div key={idx} className="flex justify-between py-1.5 px-2 -mx-2 rounded hover:bg-light-100 transition-colors">
            <dt className="text-dark-500">{item.label}</dt>
            <dd className="font-medium text-dark-700">{item.value}</dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};
export default ContractCard;
```

src\components\payment\PaymentForm.jsx
```jsx
import React, { useState } from 'react';
import Card from '../ui/Card';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import { useClientContract } from '../../hooks/useClientData';
import { useAvailablePeriods } from '../../hooks/usePaymentData';
import PaymentFormFields from './PaymentFormFields';
import ConfirmDialog from '../ui/ConfirmDialog';
import FormActions from './PaymentForm/FormActions';
import { usePaymentFormState } from './PaymentForm/usePaymentFormState';
import { usePaymentFormValidation } from './PaymentForm/usePaymentFormValidation';
import { usePaymentFormSubmit } from './PaymentForm/usePaymentFormSubmit';
const PaymentForm = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { data: contract, isLoading: isContractLoading } = useClientContract(clientId);
  const { data: periodsData, isLoading: isPeriodsLoading } = useAvailablePeriods(
    contract?.contract_id,
    clientId,
    { enabled: !!contract?.contract_id && !!clientId }
  );
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [isFormDirty, setIsFormDirty] = useState(false);
  const {
    formValues,
    resetForm,
    handleInputChange,
    handleSplitToggle
  } = usePaymentFormState(clientId, contract, periodsData, editingPayment, setIsFormDirty);
  const {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  } = usePaymentFormValidation();
  const {
    handleSubmit,
    isSubmitting,
    submitError
  } = usePaymentFormSubmit(clientId, contract, editingPayment, () => {
    resetForm();
    clearAllErrors();
  });
  const handleInputChangeWithValidation = (field, value) => {
    handleInputChange(field, value);
    clearFieldError(field);
  };
  const handleFormSubmit = (e) => {
    e.preventDefault();
    handleSubmit(formValues, setFormErrors, validateForm);
  };
  const handleReset = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      resetForm();
      clearAllErrors();
    }
  };
  const clearEditingPayment = () => {
    if (onEditingPaymentChange) {
      onEditingPaymentChange(null);
    }
  };
  const handleCancelEdit = () => {
    if (isFormDirty) {
      setShowConfirmDialog(true);
    } else {
      clearEditingPayment();
    }
  };
  const handleConfirmReset = () => {
    resetForm();
    clearAllErrors();
    setShowConfirmDialog(false);
    if (editingPayment) {
      clearEditingPayment();
    }
  };
  const isDisabled = !clientId || !contract;
  return (
    <div className={`animate-fade-in relative ${editingPayment ? 'form-focus' : ''}`}>
      <Card className="p-4 mb-4 relative z-10" elevation={editingPayment ? "raised" : "default"}>
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold text-dark-700 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
              <rect x="3" y="5" width="18" height="14" rx="2" ry="2"></rect>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            {editingPayment ? 'Edit Payment' : 'Record New Payment'}
          </h2>
          {editingPayment && (
            <button
              onClick={handleCancelEdit}
              className="text-sm text-dark-500 hover:text-dark-700 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
              Cancel Edit
            </button>
          )}
        </div>
        {isContractLoading ? (
          <div className="flex justify-center py-6">
            <LoadingSpinner />
          </div>
        ) : !contract ? (
          <EmptyState 
            title="Select a client"
            message="Please select a client to add payment details"
            className="py-6"
          />
        ) : (
          <>
            <ConfirmDialog
              isOpen={showConfirmDialog}
              title="Unsaved Changes"
              message="You have unsaved changes. Are you sure you want to clear the form?"
              confirmText="Clear Form"
              cancelText="Cancel"
              confirmVariant="danger"
              onConfirm={handleConfirmReset}
              onCancel={() => setShowConfirmDialog(false)}
            />
            <form onSubmit={handleFormSubmit} className="space-y-4">
              <PaymentFormFields
                formValues={formValues}
                handleInputChange={handleInputChangeWithValidation}
                handleSplitToggle={handleSplitToggle}
                periodOptions={periodsData}
                isDisabled={isDisabled}
                isPeriodsLoading={isPeriodsLoading}
                contract={contract}
                formErrors={formErrors}
              />
              <FormActions
                editingPayment={editingPayment}
                isSubmitting={isSubmitting}
                submitError={submitError}
                onReset={handleReset}
                onSubmit={handleFormSubmit}
              />
            </form>
          </>
        )}
      </Card>
      {editingPayment && (
        <div className="fixed inset-0 bg-dark-800 bg-opacity-30 z-0" />
      )}
    </div>
  );
};
export default PaymentForm;
```

src\components\payment\PaymentForm\FormActions.jsx
```jsx
import React from 'react';
import Button from '../../ui/Button';
import ErrorDisplay from '../../ui/ErrorDisplay';
const FormActions = ({ 
  editingPayment, 
  isSubmitting, 
  submitError,
  onReset, 
  onSubmit 
}) => {
  return (
    <>
      {submitError && (
        <ErrorDisplay 
          title="Submission Error"
          error={submitError}
        />
      )}
      <div className="flex justify-end gap-3 mt-3">
        <Button
          variant="secondary"
          type="button"
          onClick={onReset}
          disabled={isSubmitting}
        >
          {editingPayment ? 'Cancel' : 'Clear Form'}
        </Button>
        <Button
          variant="primary"
          type="submit"
          disabled={isSubmitting}
          onClick={onSubmit}
        >
          {isSubmitting ? 'Submitting...' : editingPayment ? 'Update Payment' : 'Record Payment'}
        </Button>
      </div>
    </>
  );
};
export default FormActions;
```

src\components\payment\PaymentForm\usePaymentFormState.js
```js
import { useState, useEffect } from 'react';
export const usePaymentFormState = (clientId, contract, periodsData, editingPayment, setIsFormDirty) => {
  const defaultFormValues = {
    received_date: new Date().toISOString().split('T')[0],
    total_assets: '',
    actual_fee: '',
    method: '',
    notes: '',
    is_split_payment: false,
    start_period: '',
    end_period: '',
  };
  const [formValues, setFormValues] = useState(defaultFormValues);
  const [initialFormState, setInitialFormState] = useState(defaultFormValues);
  useEffect(() => {
    if (clientId && !editingPayment) {
      resetForm();
    }
  }, [clientId]);
  const findDefaultPeriod = () => {
    if (!periodsData?.periods?.length || !contract?.payment_schedule) {
      return '';
    }
    const today = new Date();
    const currentMonth = today.getMonth() + 1; 
    const currentYear = today.getFullYear();
    if (contract.payment_schedule === 'monthly') {
      const prevMonth = currentMonth === 1 ? 12 : currentMonth - 1;
      const prevYear = currentMonth === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevMonth}-${prevYear}`;
      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    } else {
      const currentQuarter = Math.ceil(currentMonth / 3);
      const prevQuarter = currentQuarter === 1 ? 4 : currentQuarter - 1;
      const prevYear = currentQuarter === 1 ? currentYear - 1 : currentYear;
      const periodValue = `${prevQuarter}-${prevYear}`;
      const foundPeriod = periodsData.periods.find(p => p.value === periodValue);
      return foundPeriod ? foundPeriod.value : periodsData.periods[0].value;
    }
  };
  useEffect(() => {
    if (periodsData?.periods?.length && !formValues.start_period && !editingPayment) {
      const defaultPeriod = findDefaultPeriod();
      if (defaultPeriod) {
        setFormValues(prev => ({
          ...prev,
          start_period: defaultPeriod
        }));
      }
    }
  }, [periodsData, editingPayment, contract]);
  useEffect(() => {
    if (editingPayment) {
      const isMonthlyPayment = editingPayment.applied_start_month !== null;
      const formattedValues = {
        received_date: editingPayment.received_date,
        total_assets: editingPayment.total_assets?.toString() || '',
        actual_fee: editingPayment.actual_fee?.toString() || '',
        method: editingPayment.method || '',
        notes: editingPayment.notes || '',
        is_split_payment: editingPayment.is_split_payment || false,
        start_period: isMonthlyPayment
          ? `${editingPayment.applied_start_month}-${editingPayment.applied_start_month_year}`
          : `${editingPayment.applied_start_quarter}-${editingPayment.applied_start_quarter_year}`,
        end_period: editingPayment.is_split_payment
          ? (isMonthlyPayment
            ? `${editingPayment.applied_end_month}-${editingPayment.applied_end_month_year}`
            : `${editingPayment.applied_end_quarter}-${editingPayment.applied_end_quarter_year}`)
          : '',
      };
      setFormValues(formattedValues);
      setInitialFormState({ ...formattedValues });
      setIsFormDirty && setIsFormDirty(false);
    }
  }, [editingPayment, setIsFormDirty]);
  useEffect(() => {
    const isDirty = JSON.stringify(formValues) !== JSON.stringify(initialFormState);
    setIsFormDirty && setIsFormDirty(isDirty);
  }, [formValues, initialFormState, setIsFormDirty]);
  const resetForm = () => {
    setFormValues({ ...defaultFormValues });
    setInitialFormState({ ...defaultFormValues });
    setIsFormDirty && setIsFormDirty(false);
  };
  const handleInputChange = (field, value) => {
    setFormValues((prev) => ({
      ...prev,
      [field]: value,
    }));
  };
  const handleSplitToggle = () => {
    setFormValues(prev => ({
      ...prev,
      is_split_payment: !prev.is_split_payment,
      end_period: !prev.is_split_payment ? prev.start_period : ''
    }));
  };
  return {
    formValues,
    setFormValues,
    initialFormState,
    setInitialFormState,
    resetForm,
    handleInputChange,
    handleSplitToggle
  };
};
```

src\components\payment\PaymentForm\usePaymentFormSubmit.js
```js
import { useCreatePayment, useUpdatePayment } from '../../../hooks/usePaymentData';
export const usePaymentFormSubmit = (clientId, contract, editingPayment, resetForm) => {
  const createPaymentMutation = useCreatePayment();
  const updatePaymentMutation = useUpdatePayment();
  const handleSubmit = (formValues, setFormErrors, validateForm) => {
    const errors = validateForm(formValues);
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    const paymentData = {
      contract_id: contract.contract_id,
      client_id: clientId,
      received_date: formValues.received_date,
      total_assets: formValues.total_assets ? parseFloat(formValues.total_assets) : null,
      actual_fee: parseFloat(formValues.actual_fee),
      method: formValues.method || null,
      notes: formValues.notes || null,
    };
    const isMonthly = contract.payment_schedule === 'monthly';
    const startPeriodParts = formValues.start_period.split('-');
    if (isMonthly) {
      paymentData.applied_start_month = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_month_year = parseInt(startPeriodParts[1], 10);
      if (formValues.is_split_payment && formValues.end_period) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_month = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_month_year = parseInt(endPeriodParts[1], 10);
      } else {
        paymentData.applied_end_month = paymentData.applied_start_month;
        paymentData.applied_end_month_year = paymentData.applied_start_month_year;
      }
    } else {
      paymentData.applied_start_quarter = parseInt(startPeriodParts[0], 10);
      paymentData.applied_start_quarter_year = parseInt(startPeriodParts[1], 10);
      if (formValues.is_split_payment && formValues.end_period) {
        const endPeriodParts = formValues.end_period.split('-');
        paymentData.applied_end_quarter = parseInt(endPeriodParts[0], 10);
        paymentData.applied_end_quarter_year = parseInt(endPeriodParts[1], 10);
      } else {
        paymentData.applied_end_quarter = paymentData.applied_start_quarter;
        paymentData.applied_end_quarter_year = paymentData.applied_start_quarter_year;
      }
    }
    if (editingPayment) {
      updatePaymentMutation.mutate(
        { id: editingPayment.payment_id, data: paymentData },
        {
          onSuccess: () => {
            resetForm();
          },
        }
      );
    } else {
      createPaymentMutation.mutate(paymentData, {
        onSuccess: () => {
          resetForm();
        },
      });
    }
  };
  return {
    handleSubmit,
    createPaymentMutation,
    updatePaymentMutation,
    isSubmitting: createPaymentMutation.isLoading || updatePaymentMutation.isLoading,
    submitError: createPaymentMutation.error || updatePaymentMutation.error
  };
};
```

src\components\payment\PaymentForm\usePaymentFormValidation.js
```js
import { useState } from 'react';
export const usePaymentFormValidation = () => {
  const [formErrors, setFormErrors] = useState({});
  const validateForm = (formValues) => {
    const errors = {};
    if (!formValues.received_date) {
      errors.received_date = 'Received date is required';
    }
    if (!formValues.actual_fee) {
      errors.actual_fee = 'Payment amount is required';
    } else if (isNaN(parseFloat(formValues.actual_fee))) {
      errors.actual_fee = 'Payment amount must be a number';
    }
    if (!formValues.start_period) {
      errors.start_period = 'Applied period is required';
    }
    if (formValues.is_split_payment && !formValues.end_period) {
      errors.end_period = 'End period is required for split payments';
    }
    return errors;
  };
  const clearFieldError = (field) => {
    if (formErrors[field]) {
      setFormErrors((prev) => ({
        ...prev,
        [field]: null,
      }));
    }
  };
  const clearAllErrors = () => {
    setFormErrors({});
  };
  return {
    formErrors,
    setFormErrors,
    validateForm,
    clearFieldError,
    clearAllErrors
  };
};
```

src\components\payment\PaymentFormFields.jsx
```jsx
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import DatePicker from '../ui/DatePicker';
import Input from '../ui/Input';
import Select from '../ui/Select';
import { PAYMENT_METHODS } from '../../lib/constants';
import { formatCurrency } from '../../lib/formatUtils';
import { formatDate } from '../../lib/dateUtils';
import SplitPaymentControls from './SplitPaymentControls';
import api from '../../lib/api';
/**
 * Form fields for payment entry/editing
 */
const PaymentFormFields = ({
  formValues,
  handleInputChange,
  handleSplitToggle,
  periodOptions,
  isDisabled,
  isPeriodsLoading,
  contract,
  formErrors
}) => {
  const formattedPeriodOptions = periodOptions?.periods?.map(period => ({
    label: period.label,
    value: period.value
  })) || [];
  const { data: feeCalculation } = useQuery(
    ['expected-fee', contract?.contract_id, formValues.total_assets],
    () => api.calculateFee(contract.contract_id, parseFloat(formValues.total_assets)),
    {
      enabled: !!contract?.contract_id && !!formValues.total_assets && !isNaN(parseFloat(formValues.total_assets)),
      staleTime: 1000 * 60 * 5, 
    }
  );
  const expectedFee = feeCalculation?.expected_fee || null;
  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
        <DatePicker
          label="Received Date"
          value={formValues.received_date}
          onChange={(value) => handleInputChange('received_date', value)}
          required
          disabled={isDisabled}
          error={formErrors.received_date}
        />
        <SplitPaymentControls
          isSplitPayment={formValues.is_split_payment}
          startPeriod={formValues.start_period}
          endPeriod={formValues.end_period}
          periodOptions={formattedPeriodOptions}
          handleSplitToggle={handleSplitToggle}
          handlePeriodChange={handleInputChange}
          isDisabled={isDisabled || isPeriodsLoading}
          errors={formErrors}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
        <Input
          label="Assets Under Management"
          type="text"
          value={formValues.total_assets}
          onChange={(value) => handleInputChange('total_assets', value)}
          placeholder="Enter AUM (optional)"
          prefix="$"
          disabled={isDisabled}
        />
        <Input
          label="Payment Amount"
          type="text"
          value={formValues.actual_fee}
          onChange={(value) => handleInputChange('actual_fee', value)}
          placeholder="Enter payment amount"
          prefix="$"
          required
          disabled={isDisabled}
          error={formErrors.actual_fee}
        />
        <Select
          label="Payment Method"
          options={PAYMENT_METHODS}
          value={formValues.method}
          onChange={(value) => handleInputChange('method', value)}
          placeholder="Select method (optional)"
          disabled={isDisabled}
        />
      </div>
      <div className="space-y-3 p-3 bg-gray-50 rounded-md">
        <Input
          label="Notes"
          type="text"
          value={formValues.notes}
          onChange={(value) => handleInputChange('notes', value)}
          placeholder="Enter any notes about this payment"
          disabled={isDisabled}
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
          {/* Expected Fee Card */}
          {contract && (
            <div className="p-2 bg-blue-50 rounded text-sm">
              <div className="font-medium text-blue-800">Expected Fee:</div>
              <div className="text-blue-600">
                {expectedFee !== null
                  ? formatCurrency(expectedFee)
                  : (contract?.fee_type === 'percentage' ? 'Needs AUM data' : 'N/A')}
              </div>
              <div className="text-xs text-blue-500 mt-1">
                {feeCalculation?.calculation_method || 
                  (contract?.fee_type === 'flat' 
                    ? 'Flat fee as specified in contract'
                    : 'Enter AUM to calculate expected fee')}
              </div>
            </div>
          )}
          {/* Next Payment Due - Moved to backend calculations */}
        </div>
      </div>
    </>
  );
};
export default PaymentFormFields;
```

src\components\payment\PaymentHistory.jsx
```jsx
import React from 'react';
import { usePaymentHistory, useDeletePayment } from '../../hooks/usePaymentData';
import LoadingSpinner from '../ui/LoadingSpinner';
import EmptyState from '../ui/EmptyState';
import ErrorDisplay from '../ui/ErrorDisplay';
import ConfirmDialog from '../ui/ConfirmDialog';
import Card from '../ui/Card';
import Button from '../ui/Button';
import PaymentTableRow from './PaymentHistory/PaymentTableRow';
import ExpandedPaymentDetails from './PaymentHistory/ExpandedPaymentDetails';
import { usePaymentTableState } from './PaymentHistory/usePaymentTableState';
import useStore from '../../store';
const PaymentHistory = ({ clientId, editingPayment, onEditingPaymentChange }) => {
  const { setDocumentViewerOpen, setSelectedDocumentUrl } = useStore();
  const {
    page,
    year,
    expandedPaymentId,
    showDeleteConfirm,
    setPage,
    setYear,
    toggleExpandRow,
    confirmDelete,
    cancelDelete,
    getAvailableYears
  } = usePaymentTableState();
  const {
    data: payments = [],
    isLoading,
    error,
    isPreviousData,
  } = usePaymentHistory(clientId, { page, limit: 10, year });
  const deletePaymentMutation = useDeletePayment();
  const handleEdit = (payment) => {
    onEditingPaymentChange && onEditingPaymentChange(payment);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  const handleDelete = (paymentId) => {
    deletePaymentMutation.mutate({ id: paymentId, clientId });
    cancelDelete();
  };
  const handleViewFile = (payment) => {
    if (payment.has_files) {
      setSelectedDocumentUrl(`/api/files/payment/${payment.payment_id}`);
      setDocumentViewerOpen(true);
    }
  };
  const availableYears = getAvailableYears();
  if (error) {
    return (
      <ErrorDisplay 
        title="Error loading payment history"
        error={error}
      />
    );
  }
  return (
    <div className="animate-fade-in mt-3">
      <div className="flex items-center justify-between mb-2">
        <h2 className="text-xl font-semibold text-dark-700 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-500 mr-2">
            <path d="M19 5H5a2 2 0 00-2 2v10a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2z"></path>
            <line x1="8" y1="2" x2="8" y2="5"></line>
            <line x1="16" y1="2" x2="16" y2="5"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Payment History
        </h2>
        <div className="flex items-center space-x-2">
          <label className="text-sm text-dark-500">Filter by Year:</label>
          <select
            className="border border-light-500 rounded-md text-sm p-1.5 bg-white shadow-sm focus:ring-1 focus:ring-primary-400 focus:border-primary-400 transition-all duration-200"
            value={year || ''}
            onChange={(e) => setYear(e.target.value === '' ? null : e.target.value)}
          >
            <option value="">All Years</option>
            {availableYears.map((y) => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
      </div>
      {isLoading ? (
        <div className="flex justify-center py-5">
          <LoadingSpinner />
        </div>
      ) : payments.length === 0 ? (
        <EmptyState 
          title="No payment records found"
          className="bg-white border border-light-300 p-5 rounded-lg text-center shadow-sm"
        />
      ) : (
        <Card className="p-0 overflow-hidden" elevation="default" variant="default">
          <div className="overflow-x-auto -mx-1">
            <table className="min-w-full table-fixed border-collapse">
              <thead>
                <tr className="bg-light-200 border-b border-light-300">
                  <th className="w-[2%] py-2.5 px-1 text-left text-xs font-medium text-dark-600 uppercase tracking-wider"></th>
                  <th className="w-[11%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Date</th>
                  <th className="w-[17%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Provider</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Period</th>
                  <th className="w-[12%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">AUM</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Expected</th>
                  <th className="w-[13%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Actual</th>
                  <th className="w-[14%] py-2.5 px-2 text-left text-xs font-medium text-dark-600 uppercase tracking-wider">Variance</th>
                  <th className="w-[6%] py-2.5 px-1 text-center text-xs font-medium text-dark-600 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-light-300">
                {payments.map((payment) => (
                  <React.Fragment key={payment.payment_id}>
                    <PaymentTableRow
                      payment={payment}
                      isExpanded={expandedPaymentId === payment.payment_id}
                      showDeleteConfirm={showDeleteConfirm}
                      onToggleExpand={toggleExpandRow}
                      onEdit={handleEdit}
                      onViewFile={handleViewFile}
                      onConfirmDelete={handleDelete}
                      onCancelDelete={cancelDelete}
                      onDeleteClick={confirmDelete}
                      isDeleting={deletePaymentMutation.isLoading}
                    />
                    {expandedPaymentId === payment.payment_id && (
                      <ExpandedPaymentDetails payment={payment} />
                    )}
                  </React.Fragment>
                ))}
              </tbody>
            </table>
          </div>
          {/* Pagination */}
          <div className="flex items-center justify-between px-4 py-2 bg-light-200 border-t border-light-300">
            <div className="text-sm text-dark-500">
              Showing {payments.length} payments
            </div>
            <nav className="flex items-center space-x-2">
              <Button
                variant="secondary"
                size="sm"
                onClick={() => setPage(Math.max(page - 1, 1))}
                disabled={page === 1 || isPreviousData}
              >
                Previous
              </Button>
              <Button
                variant="secondary"
                size="sm"
                onClick={() => {
                  if (payments.length === 10 && !isPreviousData) {
                    setPage(page + 1);
                  }
                }}
                disabled={payments.length < 10 || isPreviousData}
              >
                Next
              </Button>
            </nav>
          </div>
        </Card>
      )}
      <ConfirmDialog
        isOpen={!!showDeleteConfirm}
        title="Confirm Delete"
        message="Are you sure you want to delete this payment? This action cannot be undone."
        confirmText="Delete"
        cancelText="Cancel"
        confirmVariant="danger"
        onConfirm={() => handleDelete(showDeleteConfirm)}
        onCancel={cancelDelete}
        isLoading={deletePaymentMutation.isLoading}
      />
    </div>
  );
};
export default PaymentHistory;
```

src\components\payment\PaymentHistory\ExpandedPaymentDetails.jsx
```jsx
import React from 'react';
import { formatPeriodRange } from '../../../lib/dateUtils';
import { formatCurrency } from '../../../lib/formatUtils';
const ExpandedPaymentDetails = ({ payment }) => {
  if (!payment.is_split_payment) {
    return null;
  }
  return (
    <tr>
      <td className="py-0"></td>
      <td colSpan="8" className="py-0">
        <div className="bg-light-200 p-2 my-1 rounded-md">
          <h4 className="text-sm font-medium text-dark-700 mb-2">
            {formatPeriodRange(payment)}
          </h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
            {payment.periods?.map((period, i) => (
              <div
                key={i}
                className="bg-white p-2 rounded border border-light-300 shadow-sm"
              >
                <div className="text-xs text-dark-500">
                  {period.period}
                </div>
                <div className="text-sm font-medium">
                  {formatCurrency(period.amount)}
                </div>
              </div>
            ))}
          </div>
        </div>
      </td>
    </tr>
  );
};
export default ExpandedPaymentDetails;
```

src\components\payment\PaymentHistory\PaymentTableRow.jsx
```jsx
import React from 'react';
import { formatDate, formatAppliedPeriod } from '../../../lib/dateUtils';
import { formatCurrency } from '../../../lib/formatUtils';
import StatusBadge from '../../ui/StatusBadge';
const PaymentTableRow = ({ 
  payment, 
  isExpanded,
  showDeleteConfirm,
  onToggleExpand,
  onEdit,
  onViewFile,
  onConfirmDelete,
  onCancelDelete,
  onDeleteClick,
  isDeleting
}) => {
  const expectedFee = payment.expected_fee;
  const variance = payment.variance || { status: 'unknown', message: 'N/A' };
  return (
    <tr className="hover:bg-light-200" data-payment-id={payment.payment_id}>
      <td className="py-2 px-1">
        {payment.is_split_payment && (
          <button
            className="w-6 h-6 flex items-center justify-center text-dark-400 hover:text-primary-600 transition-colors"
            onClick={() => onToggleExpand(payment.payment_id)}
            aria-label="Toggle payment details"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className={`transition-transform ${isExpanded ? 'rotate-90' : ''}`}
            >
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        )}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">{formatDate(payment.received_date)}</td>
      <td className="py-2 px-2 truncate">{payment.provider_name || 'N/A'}</td>
      <td className="py-2 px-2 whitespace-nowrap">
        {payment.is_split_payment ? (
          <div className="flex items-center">
            <span className="px-2 py-1 text-xs rounded bg-light-300 text-dark-600">Split</span>
            <span className="ml-2 text-dark-500">
              {payment.periods?.length || 0}
            </span>
          </div>
        ) : formatAppliedPeriod(payment)}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {payment.total_assets ? formatCurrency(payment.total_assets) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap">
        {expectedFee !== null ? formatCurrency(expectedFee) : 'N/A'}
      </td>
      <td className="py-2 px-2 whitespace-nowrap font-medium">{formatCurrency(payment.actual_fee)}</td>
      <td className="py-2 px-2">
        <StatusBadge
          status={variance.status}
          label={variance.message}
          size="md"
        />
      </td>
      <td className="py-2 px-1">
        <div className="grid grid-cols-3 gap-1 justify-items-center">
          <div className="w-6">
            {payment.has_files && (
              <button
                onClick={() => onViewFile(payment)}
                className="text-blue-500 hover:text-blue-600 transition-colors file-indicator"
                title="View document"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10 9 9 9 8 9"></polyline>
                </svg>
              </button>
            )}
          </div>
          <div className="w-6">
            <button
              onClick={() => onEdit(payment)}
              className="text-dark-500 hover:text-primary-600 transition-colors"
              aria-label="Edit payment"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="18"
                height="18"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
            </button>
          </div>
          <div className="w-6">
            {showDeleteConfirm === payment.payment_id ? (
              <div className="flex items-center">
                <button
                  className="text-dark-500 hover:text-status-success transition-colors"
                  onClick={() => onConfirmDelete(payment.payment_id)}
                  disabled={isDeleting}
                  aria-label="Confirm delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                </button>
                <button
                  className="text-dark-500 hover:text-dark-700 ml-1 transition-colors"
                  onClick={onCancelDelete}
                  aria-label="Cancel delete"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                  </svg>
                </button>
              </div>
            ) : (
              <button
                onClick={() => onDeleteClick(payment.payment_id)}
                className="text-dark-500 hover:text-status-error transition-colors"
                aria-label="Delete payment"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <polyline points="3 6 5 6 21 6"></polyline>
                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  <line x1="10" y1="11" x2="10" y2="17"></line>
                  <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
              </button>
            )}
          </div>
        </div>
      </td>
    </tr>
  );
};
export default PaymentTableRow;
```

src\components\payment\PaymentHistory\usePaymentTableState.js
```js
import { useState } from 'react';
export const usePaymentTableState = () => {
  const [page, setPage] = useState(1);
  const [year, setYear] = useState(null);
  const [expandedPaymentId, setExpandedPaymentId] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);
  const toggleExpandRow = (paymentId) => {
    setExpandedPaymentId(expandedPaymentId === paymentId ? null : paymentId);
  };
  const confirmDelete = (paymentId) => {
    setShowDeleteConfirm(paymentId);
  };
  const cancelDelete = () => {
    setShowDeleteConfirm(null);
  };
  const getAvailableYears = () => {
    const currentYear = new Date().getFullYear();
    const availableYears = [];
    for (let y = currentYear; y >= currentYear - 5; y--) {
      availableYears.push(y);
    }
    return availableYears;
  };
  return {
    page,
    year,
    expandedPaymentId,
    showDeleteConfirm,
    setPage,
    setYear,
    toggleExpandRow,
    confirmDelete,
    cancelDelete,
    getAvailableYears
  };
};
```

src\components\payment\PaymentInfoCard.jsx
```jsx
import React from 'react';
import Card from '../ui/Card';
import { formatCurrency } from '../../lib/formatUtils';
import { formatDate } from '../../lib/dateUtils';
import { MONTH_NAMES } from '../../lib/constants';
const PaymentInfoCard = ({ client, contract, payments = [], isLoading }) => {
  if (isLoading) {
    return (
      <Card variant="default" elevation="default">
        <div className="pb-2">
          <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
        </div>
        <div className="animate-pulse mt-3">
          <div className="grid grid-cols-1 gap-2">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex justify-between py-1">
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                <div className="h-4 bg-gray-200 rounded w-1/3"></div>
              </div>
            ))}
          </div>
        </div>
      </Card>
    );
  }
  const latestPayment = payments && payments.length > 0 ? payments[0] : null;
  const lastRecordedAUM = payments?.find(p => p.total_assets)?.total_assets || null;
  const getCurrentPeriod = () => {
    if (!contract) return 'N/A';
    const now = new Date();
    const currentMonth = now.getMonth(); 
    const currentYear = now.getFullYear();
    if (contract.payment_schedule === 'monthly') {
      return `${MONTH_NAMES[currentMonth]} ${currentYear}`;
    } else {
      const currentQuarter = Math.floor(currentMonth / 3) + 1;
      return `Q${currentQuarter} ${currentYear}`;
    }
  };
  const getExpectedFee = () => {
    if (!contract) return 'N/A';
    if (contract.fee_type === 'flat' && contract.flat_rate !== null) {
      return formatCurrency(contract.flat_rate);
    }
    if ((contract.fee_type === 'percentage' || contract.fee_type === 'percent') &&
      contract.percent_rate !== null) {
      if (lastRecordedAUM !== null) {
        const fee = lastRecordedAUM * contract.percent_rate;
        return formatCurrency(fee);
      }
      return 'Needs AUM data';
    }
    return 'N/A';
  };
  const isCurrentPeriodPaid = () => {
    if (!latestPayment || !contract) return false;
    const now = new Date();
    const currentMonth = now.getMonth() + 1; 
    const currentYear = now.getFullYear();
    const currentQuarter = Math.floor((now.getMonth()) / 3) + 1;
    if (contract.payment_schedule === 'monthly') {
      return latestPayment.applied_end_month === currentMonth &&
        latestPayment.applied_end_month_year === currentYear;
    } else {
      return latestPayment.applied_end_quarter === currentQuarter &&
        latestPayment.applied_end_quarter_year === currentYear;
    }
  };
  const details = [
    {
      label: 'AUM',
      value: lastRecordedAUM !== null ? formatCurrency(lastRecordedAUM) : 'No AUM data',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Expected Fee',
      value: getExpectedFee(),
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="16"></line>
          <line x1="8" y1="12" x2="16" y2="12"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment',
      value: latestPayment ? formatDate(latestPayment.received_date) : 'No payments recorded',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Last Payment Amount',
      value: latestPayment ? formatCurrency(latestPayment.actual_fee) : 'N/A',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-dark-400">
          <line x1="12" y1="1" x2="12" y2="23"></line>
          <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
        </svg>
      )
    },
    {
      label: 'Current Period',
      value: getCurrentPeriod(),
      highlight: true,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary-500">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
      )
    },
    {
      label: 'Payment Status',
      value: isCurrentPeriodPaid() ? 'Paid' : 'Due',
      highlight: !isCurrentPeriodPaid(),
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={!isCurrentPeriodPaid() ? 'text-amber-500' : 'text-green-500'}>
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12 6 12 12 16 14"></polyline>
        </svg>
      )
    },
  ];
  return (
    <Card variant="default" elevation="default">
      <div className="pb-2">
        <h3 className="text-base font-semibold text-dark-700 border-b border-light-300 pb-2">Payment Information</h3>
      </div>
      <dl className="grid grid-cols-1 gap-2 text-sm mt-4">
        {details.map((item, idx) => (
          <div
            key={idx}
            className={`
              flex justify-between items-center py-1.5 px-2 -mx-2 rounded
              ${item.highlight ? 'bg-light-200 border border-light-400' : ''}
            `}
          >
            <dt className="text-dark-500 flex items-center gap-2">
              {item.icon}
              {item.label}
            </dt>
            <dd className={`font-medium ${item.highlight ? 'text-primary-600' : 'text-dark-700'}`}>
              {item.value}
            </dd>
          </div>
        ))}
      </dl>
    </Card>
  );
};
export default PaymentInfoCard;
```

src\components\payment\SplitPaymentControls.jsx
```jsx
import React from 'react';
import Select from '../ui/Select';
/**
 * Period selection controls for split payments
 */
const SplitPaymentControls = ({
  isSplitPayment,
  startPeriod,
  endPeriod,
  periodOptions,
  handleSplitToggle,
  handlePeriodChange,
  isDisabled,
  errors
}) => {
  const filteredEndPeriods = React.useMemo(() => {
    if (!startPeriod || !periodOptions) {
      return periodOptions || [];
    }
    const startParts = startPeriod.split('-');
    if (startParts.length !== 2) return periodOptions;
    const startMonth = parseInt(startParts[0], 10);
    const startYear = parseInt(startParts[1], 10);
    return periodOptions.filter(period => {
      const parts = period.value.split('-');
      if (parts.length !== 2) return true;
      const month = parseInt(parts[0], 10);
      const year = parseInt(parts[1], 10);
      return (year > startYear) || (year === startYear && month >= startMonth);
    });
  }, [startPeriod, periodOptions]);
  return (
    <div className="space-y-2 w-full">
      <div className="flex items-center justify-between">
        <label className="text-sm font-medium">Applied Period</label>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-500">Single</span>
          <button
            type="button"
            className={`h-5 w-10 rounded-full relative ${isSplitPayment ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            onClick={handleSplitToggle}
            disabled={isDisabled || !startPeriod}
            aria-label={isSplitPayment ? 'Switch to single period' : 'Switch to split period'}
          >
            <div
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-transform ${isSplitPayment ? 'translate-x-5' : 'translate-x-1'
                }`}
            ></div>
          </button>
          <span className="text-sm text-gray-500">Split</span>
        </div>
      </div>
      <div className={`${isSplitPayment ? 'grid grid-cols-2 gap-2' : 'w-full'}`}>
        <Select
          options={periodOptions || []}
          value={startPeriod}
          onChange={(value) => handlePeriodChange('start_period', value)}
          placeholder="Select period"
          disabled={isDisabled}
          required
          error={errors?.start_period}
        />
        {isSplitPayment && (
          <Select
            options={filteredEndPeriods}
            value={endPeriod}
            onChange={(value) => handlePeriodChange('end_period', value)}
            placeholder="End period"
            disabled={isDisabled || !startPeriod}
            required
            error={errors?.end_period}
          />
        )}
      </div>
    </div>
  );
};
export default SplitPaymentControls;
```

src\hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
/**
 * Hook to fetch all clients
 * @param {string} provider - Optional provider filter
 * @returns {Object} - Query result with clients data
 */
export const useClientList = (provider = null) => {
  return useQuery(
    queryKeys.clients.all,
    () => api.getClients(provider ? { provider } : undefined),
    {
      keepPreviousData: true,
      staleTime: 1000 * 60 * 5, 
    }
  );
};
/**
 * Hook to fetch a single client by ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with client data
 */
export const useClient = (clientId) => {
  return useQuery(
    queryKeys.clients.detail(clientId),
    () => api.getClient(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, 
      onError: (error) => {
        console.error(`Error fetching client ${clientId}:`, error);
      },
    }
  );
};
/**
 * Hook to fetch client contract
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with contract data
 */
export const useClientContract = (clientId) => {
  return useQuery(
    queryKeys.clients.contract(clientId),
    () => api.getClientContract(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60 * 10, 
      onError: (error) => {
        console.error(`Error fetching contract for client ${clientId}:`, error);
      },
    }
  );
};
/**
 * Hook to fetch client dashboard data (replaces multiple API calls)
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with complete dashboard data
 */
export const useClientDashboard = (clientId) => {
  return useQuery(
    queryKeys.clients.dashboard(clientId),
    () => api.getClientDashboard(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, 
      onError: (error) => {
        console.error(`Error fetching dashboard for client ${clientId}:`, error);
      },
    }
  );
};
```

src\hooks\useFileData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
/**
 * Hook to check if a payment has associated files
 * @param {number} paymentId - Payment ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for payment files
 */
export const usePaymentFiles = (paymentId, options = {}) => {
  const { enabled = true } = options;
  return useQuery(
    queryKeys.payments.files(paymentId),
    () => api.getPaymentFiles(paymentId),
    {
      enabled: !!paymentId && enabled,
      staleTime: 1000 * 60 * 5, 
      cacheTime: 1000 * 60 * 10, 
      retry: 1,
      onError: (error) => {
        console.error(`Error fetching files for payment ${paymentId}:`, error);
        return [];
      }
    }
  );
};
/**
 * Hook to check if a client has any associated files
 * @param {number} clientId - Client ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for client files check
 */
export const useClientFiles = (clientId, options = {}) => {
  const { enabled = true } = options;
  return useQuery(
    queryKeys.clients.files(clientId),
    () => api.checkClientFiles(clientId),
    {
      enabled: !!clientId && enabled,
      staleTime: 1000 * 60 * 5, 
      cacheTime: 1000 * 60 * 10, 
      retry: 1,
      onError: (error) => {
        console.error(`Error checking files for client ${clientId}:`, error);
      }
    }
  );
};
/**
 * Cache for payment file status to reduce API calls
 */
const paymentFileCache = new Map();
/**
 * Set file status for a payment in the cache
 * @param {number} paymentId - Payment ID
 * @param {boolean} hasFiles - Whether the payment has files
 */
export const setPaymentFileStatus = (paymentId, hasFiles) => {
  paymentFileCache.set(paymentId, !!hasFiles);
};
/**
 * Get file status for a payment from the cache
 * @param {number} paymentId - Payment ID
 * @returns {boolean|undefined} - True if has files, false if not, undefined if not in cache
 */
export const getPaymentFileStatus = (paymentId) => {
  return paymentFileCache.has(paymentId) 
    ? paymentFileCache.get(paymentId) 
    : undefined;
};
/**
 * Clear file status cache
 */
export const clearFileCache = () => {
  paymentFileCache.clear();
};
/**
 * Check if a payment has files with cache support
 * @param {number} paymentId - Payment ID
 * @returns {Promise<boolean>} - Promise resolving to true if payment has files
 */
export const checkPaymentHasFiles = async (paymentId) => {
  if (paymentFileCache.has(paymentId)) {
    return paymentFileCache.get(paymentId);
  }
  try {
    const result = await api.checkPaymentFiles(paymentId);
    const hasFiles = !!result?.has_files;
    setPaymentFileStatus(paymentId, hasFiles);
    return hasFiles;
  } catch (error) {
    console.error(`Error checking files for payment ${paymentId}:`, error);
    return false;
  }
};
```

src\hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
import { clearFileCache } from './useFileData';
/**
 * Hook to fetch payment history for a client
 * @param {number} clientId - Client ID
 * @param {Object} options - Query options including pagination and filters
 * @returns {Object} - Query result with payments data
 */
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;
  const params = { page, limit };
  if (year !== null) {
    params.year = year;
  }
  return useQuery(
    [...queryKeys.clients.payments(clientId), page, limit, year],
    () => api.getPayments(clientId, params),
    {
      enabled: !!clientId,
      keepPreviousData: true,
      staleTime: 1000 * 60, 
      onError: (error) => {
        console.error(`Error fetching payments for client ${clientId}:`, error);
      }
    }
  );
};
/**
 * Hook to fetch a single payment
 * @param {number} paymentId - Payment ID
 * @returns {Object} - Query result with payment data
 */
export const usePayment = (paymentId) => {
  return useQuery(
    queryKeys.payments.detail(paymentId),
    () => api.getPayment(paymentId),
    {
      enabled: !!paymentId,
      staleTime: 1000 * 60, 
      onError: (error) => {
        console.error(`Error fetching payment ${paymentId}:`, error);
      }
    }
  );
};
/**
 * Hook to fetch available periods for a contract
 * @param {number} contractId - Contract ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with periods data
 */
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery(
    queryKeys.contracts.periods(contractId, clientId),
    () => api.getAvailablePeriods(contractId, clientId),
    {
      enabled: !!contractId && !!clientId,
      staleTime: 1000 * 60 * 60, 
      onError: (error) => {
        console.error(`Error fetching periods for contract ${contractId}:`, error);
      }
    }
  );
};
/**
 * Hook to create a new payment
 * @returns {Object} - Mutation object for creating payment
 */
export const useCreatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    (paymentData) => api.createPayment(paymentData),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
      onError: (error) => {
        console.error('Error creating payment:', error);
      }
    }
  );
};
/**
 * Hook to update an existing payment
 * @returns {Object} - Mutation object for updating payment
 */
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    ({ id, data }) => api.updatePayment(id, data),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(queryKeys.payments.detail(data.payment_id));
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error updating payment:', error);
      }
    }
  );
};
/**
 * Hook to delete a payment
 * @returns {Object} - Mutation object for deleting payment
 */
export const useDeletePayment = () => {
  const queryClient = useQueryClient();
  return useMutation(
    ({ id, clientId }) => api.deletePayment(id).then(() => ({ id, clientId })),
    {
      onSuccess: ({ id, clientId }) => {
        queryClient.invalidateQueries(queryKeys.clients.payments(clientId));
        queryClient.invalidateQueries(queryKeys.clients.summary(clientId));
        queryClient.invalidateQueries(queryKeys.clients.detail(clientId));
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error deleting payment:', error);
      }
    }
  );
};
```

src\index.css
```css
/* Form focus effect */
.form-focus {
  position: relative;
  z-index: 50;
}
.form-focus::before {
  content: '';
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(2px);
  z-index: 40;
  animation: fadeIn 0.2s ease-out;
}
.form-focus > * {
  position: relative;
  z-index: 50;
  transform: translateY(0);
  transition: transform 0.2s ease-out;
  animation: cardRaise 0.3s cubic-bezier(0.19, 1, 0.22, 1);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
@keyframes cardRaise {
  from { transform: translateY(10px); }
  to { transform: translateY(0); }
}
/* Comprehensive vertical spacing reduction */
/* Global container spacing */
.card-container > * {
  margin-bottom: 0.75rem !important; /* Reduced from default 1rem */
}
.card-container > *:last-child {
  margin-bottom: 0 !important;
}
/* Card internal spacing */
.card {
  padding: 0.875rem !important;
}
/* Form spacing */
.space-y-5 > * {
  margin-top: 1rem !important;
  margin-bottom: 0 !important;
}
.space-y-5 > *:first-child {
  margin-top: 0 !important;
}
/* Header spacing */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5rem !important;
}
/* Padding classes */
.py-3 {
  padding-top: 0.625rem !important;
  padding-bottom: 0.625rem !important;
}
.py-4 {
  padding-top: 0.875rem !important;
  padding-bottom: 0.875rem !important;
}
.py-5 {
  padding-top: 1.125rem !important;
  padding-bottom: 1.125rem !important;
}
.p-5 {
  padding: 1.125rem !important;
}
.p-4 {
  padding: 0.875rem !important;
}
/* Margin classes */
.mt-6 {
  margin-top: 1.25rem !important;
}
.mt-5 {
  margin-top: 1.125rem !important;
}
.mt-4 {
  margin-top: 0.875rem !important;
}
.mb-4 {
  margin-bottom: 0.875rem !important;
}
.mb-6 {
  margin-bottom: 1.25rem !important;
}
.my-4 {
  margin-top: 0.875rem !important;
  margin-bottom: 0.875rem !important;
} 
```

src\layouts\MainLayout.jsx
```jsx
        <div className="flex-1 overflow-auto">
          <main className="container mx-auto px-4 pt-4 pb-5 card-container">
            {children}
          </main>
        </div> 
```

src\pages\_app.js
```js
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { queryClient } from '../store/queries';
import '../styles/globals.css';
function MyApp({ Component, pageProps }) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  );
}
export default MyApp;
```

src\pages\_document.js
```js
import { Html, Head, Main, NextScript } from 'next/document';
export default function Document() {
  return (
    <Html>
      <Head>
        <link rel="stylesheet" href="/build.css" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
} 
```

src\pages\contacts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ContactsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contacts</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contacts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ContactsPage;
```

src\pages\contracts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ContractsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contracts</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contracts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ContractsPage;
```

src\pages\export.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const ExportPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Export Data</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Export Data page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default ExportPage;
```

src\pages\index.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
const LaunchMenu = () => {
  const router = useRouter();
  const handleNavigation = (path) => {
    if (path === '/payments') {
      router.push('/payments');
    } else {
      router.push('/under-construction', { 
        query: { feature: path.replace('/', '') } 
      });
    }
  };
  const modules = [
    {
      id: 'payments',
      title: '401k Payments Manager',
      description: 'Manage and Review Client 401k payments',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <rect x="2" y="5" width="20" height="14" rx="2"></rect>
          <line x1="2" y1="10" x2="22" y2="10"></line>
        </svg>
      ),
      path: '/payments'
    },
    {
      id: 'agenda',
      title: 'Agenda Generator',
      description: 'Create and manage meeting agendas',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
          <path d="M14 2v6h6"></path>
          <line x1="16" y1="13" x2="8" y2="13"></line>
          <line x1="16" y1="17" x2="8" y2="17"></line>
          <line x1="10" y1="9" x2="8" y2="9"></line>
        </svg>
      ),
      path: '/agenda'
    },
    {
      id: 'efip',
      title: 'eFIP',
      description: 'Financial Independence Projections',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <line x1="12" y1="20" x2="12" y2="10"></line>
          <line x1="18" y1="20" x2="18" y2="4"></line>
          <line x1="6" y1="20" x2="6" y2="16"></line>
        </svg>
      ),
      path: '/efip'
    },
    {
      id: 'structured-notes',
      title: 'Structured Notes Tracker',
      description: 'GBIL, Cash, and Structured Notes',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
        </svg>
      ),
      path: '/structured-notes'
    },
    {
      id: 'ai-tools',
      title: 'AI Tools',
      description: 'AI-powered investment analysis',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
          <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
          <path d="M12 12l9.2-7.4"></path>
          <path d="M12 12V2"></path>
        </svg>
      ),
      path: '/ai-tools'
    }
  ];
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>HohimerPro</title>
      </Head>
      <main className="flex-1 flex flex-col justify-center items-center px-4 py-12">
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-gray-900 mb-3">Welcome to HohimerPro</h1>
          <p className="text-xl text-gray-600 max-w-2xl">
            Investment management suite for Hohimer Wealth Management
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl w-full">
          {modules.map((module) => (
            <button
              key={module.id}
              onClick={() => handleNavigation(module.path)}
              className="bg-white border border-gray-200 hover:border-blue-500 rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-200 text-left flex items-start gap-4"
            >
              <div className="p-2 bg-blue-50 text-blue-600 rounded-lg">
                {module.icon}
              </div>
              <div>
                <h2 className="text-xl font-medium text-gray-900 mb-2">{module.title}</h2>
                <p className="text-gray-500">{module.description}</p>
              </div>
            </button>
          ))}
        </div>
      </main>
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};
export default LaunchMenu;
```

src\pages\payments.js
```js
import React, { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import PageLayout from '../components/layout/PageLayout';
import ClientDashboard from '../components/payment/ClientDashboard';
import PaymentForm from '../components/payment/PaymentForm';
import PaymentHistory from '../components/payment/PaymentHistory';
import ErrorDisplay from '../components/ui/ErrorDisplay';
import api from '../lib/api';
import useStore from '../store';
import { useClient } from '../hooks/useClientData';
const PaymentsPage = () => {
  const {
    selectedClientId,
    setSelectedClientId,
    documentViewerOpen,
    setDocumentViewerOpen
  } = useStore();
  const { data: clientDetails } = useClient(selectedClientId);
  const [editingPayment, setEditingPayment] = useState(null);
  const {
    data: clients = [],
    isLoading,
    error,
  } = useQuery(['clients'], () => api.getClients());
  useEffect(() => {
    if (!selectedClientId && clients.length > 0) {
      setSelectedClientId(clients[0].client_id);
    }
  }, [clients, selectedClientId, setSelectedClientId]);
  const toggleDocumentViewer = () => {
    setDocumentViewerOpen(!documentViewerOpen);
  };
  const renderContent = () => {
    if (error) {
      return (
        <ErrorDisplay 
          title="Error loading clients"
          error={error}
        />
      );
    }
    if (!selectedClientId) {
      return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <p className="text-center text-gray-500">
            {clients.length > 0
              ? 'Select a client from the sidebar to view payment information.'
              : 'No clients available. Please add clients to the system.'}
          </p>
        </div>
      );
    }
    const client = clients.find(c => c.client_id === selectedClientId);
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between mb-8">
          <div>
            <div>
              {clientDetails?.full_name && (
                <div className="text-sm text-dark-400 mb-1 uppercase tracking-wider">
                  {clientDetails.full_name}
                </div>
              )}
              <h1 className="text-3xl font-bold text-dark-700">
                {isLoading ? 'Loading...' : client?.display_name || 'Client Company Name'}
              </h1>
              <div className="h-1 w-full mt-2 bg-gradient-to-r from-primary-600 to-primary-200 rounded-full"></div>
            </div>
          </div>
          <button
            className={`
              flex items-center gap-2 px-4 py-2.5 rounded-lg shadow-sm transition-all duration-200
              ${documentViewerOpen
                ? 'bg-primary-600 text-white hover:bg-primary-700 shadow-md'
                : 'bg-white border border-light-400 text-dark-600 hover:bg-light-200 hover:border-primary-400'}
            `}
            onClick={toggleDocumentViewer}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className={documentViewerOpen ? 'text-white' : 'text-primary-500'}
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <span className="font-medium">{documentViewerOpen ? "Hide Documents" : "View Documents"}</span>
          </button>
        </div>
        <ClientDashboard clientId={selectedClientId} />
        <div className={`transition-all duration-300 ${!documentViewerOpen ? 'mx-[20%]' : ''}`}>
          <PaymentForm 
            clientId={selectedClientId} 
            editingPayment={editingPayment}
            onEditingPaymentChange={setEditingPayment}
          />
        </div>
        <PaymentHistory 
          clientId={selectedClientId}
          editingPayment={editingPayment}
          onEditingPaymentChange={setEditingPayment}
        />
      </div>
    );
  };
  return (
    <PageLayout clients={clients} isLoading={isLoading}>
      {renderContent()}
    </PageLayout>
  );
};
export default PaymentsPage;
```

src\pages\summary.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';
const SummaryPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Summary</h1>
      </div>
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Summary page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};
export default SummaryPage;
```

src\pages\under-construction.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
const UnderConstruction = () => {
  const router = useRouter();
  const { feature } = router.query;
  const getFeatureName = () => {
    switch(feature) {
      case 'agenda': return 'Agenda Generator';
      case 'efip': return 'eFIP (Financial Independence Projections)';
      case 'structured-notes': return 'Structured Notes Planner';
      case 'ai-tools': return 'AI Tools';
      default: return 'This feature';
    }
  };
  const getFeatureIcon = () => {
    switch(feature) {
      case 'agenda':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <path d="M14 2v6h6"></path>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <line x1="10" y1="9" x2="8" y2="9"></line>
          </svg>
        );
      case 'efip':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="12" y1="20" x2="12" y2="10"></line>
            <line x1="18" y1="20" x2="18" y2="4"></line>
            <line x1="6" y1="20" x2="6" y2="16"></line>
          </svg>
        );
      case 'structured-notes':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
          </svg>
        );
      case 'ai-tools':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
            <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
            <path d="M12 12l9.2-7.4"></path>
            <path d="M12 12V2"></path>
          </svg>
        );
      default:
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
        );
    }
  };
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>{getFeatureName()} | HohimerPro</title>
      </Head>
      <main className="flex-1 flex flex-col items-center justify-center p-4">
        <div className="bg-white shadow-md rounded-lg p-8 max-w-md w-full text-center">
          <div className="flex justify-center mb-6">
            <div className="p-4 bg-yellow-50 text-yellow-600 rounded-full">
              {getFeatureIcon()}
            </div>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">{getFeatureName()}</h1>
          <div className="mb-6 text-yellow-500 text-5xl">🚧</div>
          <p className="text-gray-600 mb-8">
            We're currently building this feature. Check back soon for updates!
          </p>
          <button
            onClick={() => router.push('/')}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition-colors duration-200 inline-flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M19 12H5M12 19l-7-7 7-7"/>
            </svg>
            Return to Home
          </button>
        </div>
      </main>
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};
export default UnderConstruction; 
```

src\styles\globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
/* Import Inter font - a modern, clean sans-serif font perfect for financial applications */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
:root {
  /* Typography */
  --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  /* Font sizes */
  --text-xs: 0.75rem;   /* 12px */
  --text-sm: 0.875rem;  /* 14px */
  --text-base: 1rem;    /* 16px */
  --text-lg: 1.125rem;  /* 18px */
  --text-xl: 1.25rem;   /* 20px */
  --text-2xl: 1.5rem;   /* 24px */
  --text-3xl: 1.875rem; /* 30px */
  /* Line heights */
  --leading-none: 1;
  --leading-tight: 1.25;
  --leading-snug: 1.375;
  --leading-normal: 1.5;
  --leading-relaxed: 1.625;
  /* Letter spacing */
  --tracking-tight: -0.025em;
  --tracking-normal: 0;
  --tracking-wide: 0.025em;
  --tracking-wider: 0.05em;
}
html,
body {
  padding: 0;
  margin: 0;
  font-family: var(--font-primary);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: var(--text-base);
  line-height: var(--leading-normal);
  color: theme('colors.dark.500');
  background-color: theme('colors.light.bg');
}
* {
  box-sizing: border-box;
}
/* Typography Overrides */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: var(--leading-tight);
  margin-top: 0;
  color: theme('colors.dark.700');
}
h1 {
  font-size: var(--text-2xl);
  font-weight: 700;
}
h2 {
  font-size: var(--text-xl);
  font-weight: 600;
}
h3 {
  font-size: var(--text-lg);
  font-weight: 600;
}
p {
  margin-top: 0;
  margin-bottom: 1rem;
}
/* Table Typography & Styling */
table {
  font-size: var(--text-sm);
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
  overflow: hidden;
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.DEFAULT');
  background-color: theme('colors.light.100');
}
thead {
  background-color: theme('colors.light.300');
}
th {
  font-size: var(--text-xs);
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: var(--tracking-wider);
  color: theme('colors.dark.500');
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid theme('colors.light.400');
}
td {
  font-size: var(--text-sm);
  line-height: var(--leading-snug);
  padding: 1rem;
  border-bottom: 1px solid theme('colors.light.300');
  transition: background-color 0.2s ease;
}
tr:hover td {
  background-color: theme('colors.primary.50');
}
tr:last-child td {
  border-bottom: none;
}
/* Form Typography */
label {
  font-size: var(--text-sm);
  font-weight: 500;
  color: theme('colors.dark.500');
  margin-bottom: 0.25rem;
  display: block;
}
input, select, textarea {
  font-family: var(--font-primary);
  font-size: var(--text-sm);
  padding: 0.625rem 0.75rem;
  border: 1px solid theme('colors.light.500');
  border-radius: 0.375rem;
  background-color: theme('colors.light.100');
  transition: all 0.2s ease;
  width: 100%;
}
input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: theme('colors.primary.500');
  box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.15);
}
button {
  font-family: var(--font-primary);
  font-weight: 500;
  font-size: var(--text-sm);
}
/* Links */
a {
  color: theme('colors.primary.600');
  text-decoration: none;
  transition: color 0.2s ease-in-out;
}
a:hover {
  color: theme('colors.primary.700');
}
/* Utility Classes */
.text-xs {
  font-size: var(--text-xs);
  line-height: var(--leading-normal);
}
.text-sm {
  font-size: var(--text-sm);
  line-height: var(--leading-normal);
}
.text-base {
  font-size: var(--text-base);
  line-height: var(--leading-normal);
}
.text-lg {
  font-size: var(--text-lg);
  line-height: var(--leading-normal);
}
.text-xl {
  font-size: var(--text-xl);
  line-height: var(--leading-tight);
}
.text-2xl {
  font-size: var(--text-2xl);
  line-height: var(--leading-tight);
}
.font-light {
  font-weight: 300;
}
.font-normal {
  font-weight: 400;
}
.font-medium {
  font-weight: 500;
}
.font-semibold {
  font-weight: 600;
}
.font-bold {
  font-weight: 700;
}
/* ========== COMPONENT STYLES ========== */
/* Card Styling */
.card {
  border-radius: 0.5rem;
  background-color: theme('colors.light.card');
  box-shadow: theme('boxShadow.card');
  transition: box-shadow 0.3s ease, transform 0.3s ease;
  overflow: hidden;
}
.card:hover {
  box-shadow: theme('boxShadow.hover');
}
/* Form Styling */
.form-container {
  background-color: theme('colors.light.card');
  border-radius: 0.5rem;
  box-shadow: theme('boxShadow.form');
  border-left: 3px solid theme('colors.primary.600');
}
/* Dark UI Elements */
.navbar-dark {
  background-color: theme('colors.dark.bg');
  color: theme('colors.light.300');
}
.sidebar-dark {
  background-color: theme('colors.dark.card');
  color: theme('colors.light.300');
}
/* Animation classes */
.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}
.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}
@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}
@keyframes slideUp {
  0% { transform: translateY(10px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}
/* Custom scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-track {
  background: theme('colors.light.300');
  border-radius: 4px;
}
::-webkit-scrollbar-thumb {
  background: theme('colors.light.500');
  border-radius: 4px;
  transition: background 0.2s ease;
}
::-webkit-scrollbar-thumb:hover {
  background: theme('colors.dark.400');
}
```

tailwind.config.js
```js
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/pages/**/*.{js,ts,jsx,tsx}",
      "./src/components/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
      extend: {
        colors: {
          primary: {
            50: '#f5f3ff',
            100: '#ede9fe',
            200: '#ddd6fe',
            300: '#c4b5fd',
            400: '#a78bfa',
            500: '#8b5cf6',
            600: '#7c3aed',
            700: '#6d28d9',
            800: '#5b21b6',
            900: '#4c1d95',
            950: '#2e1065',
          },
          dark: {
            400: '#4b5563', 
            500: '#374151', 
            600: '#1f2937', 
            700: '#111827', 
            800: '#030712', 
            bg: '#1a1a2e',
            card: '#16213e',
            accent: '#0f3460',
          },
          light: {
            100: '#ffffff',
            200: '#f9fafb', 
            300: '#f3f4f6', 
            400: '#e5e7eb', 
            500: '#d1d5db', 
            bg: '#f8f9fc',
            card: '#ffffff',
          },
          status: {
            success: '#10b981', 
            warning: '#f59e0b', 
            error: '#ef4444',  
            info: '#3b82f6',   
          }
        },
        boxShadow: {
          'sm': '0 1px 2px rgba(0, 0, 0, 0.05)',
          'DEFAULT': '0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)',
          'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
          'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
          'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
          'nav': '0 1px 3px rgba(0, 0, 0, 0.08)',
          'card': '0 2px 4px rgba(0, 0, 0, 0.02), 0 8px 16px rgba(0, 0, 0, 0.05)',
          'hover': '0 4px 8px rgba(0, 0, 0, 0.04), 0 12px 24px rgba(0, 0, 0, 0.08)',
          'form': '0 8px 30px rgba(0, 0, 0, 0.06)',
          'none': 'none',
        },
        animation: {
          'fade-in': 'fadeIn 0.3s ease-in-out',
          'slide-up': 'slideUp 0.3s ease-out',
          'pulse-subtle': 'pulseSubtle 2s infinite',
        },
        keyframes: {
          fadeIn: {
            '0%': { opacity: '0' },
            '100%': { opacity: '1' },
          },
          slideUp: {
            '0%': { transform: 'translateY(10px)', opacity: '0' },
            '100%': { transform: 'translateY(0)', opacity: '1' },
          },
          pulseSubtle: {
            '0%, 100%': { opacity: '1' },
            '50%': { opacity: '0.8' },
          }
        },
      },
    },
    plugins: [],
  };
```
</files>