hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to fetch all clients
 * @param {string} provider - Optional provider filter
 * @returns {Object} - Query result with clients data
 */
export const useClientList = (provider = null) => {
  return useQuery(
    queryKeys.clients.all,
    () => api.getClients(provider ? { provider } : undefined),
    {
      keepPreviousData: true,
      staleTime: 1000 * 60 * 5, // 5 minutes
    }
  );
};

/**
 * Hook to fetch a single client by ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with client data
 */
export const useClient = (clientId) => {
  return useQuery(
    queryKeys.clients.detail(clientId),
    () => api.getClient(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client contract
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with contract data
 */
export const useClientContract = (clientId) => {
  return useQuery(
    queryKeys.clients.contract(clientId),
    () => api.getClientContract(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60 * 10, // 10 minutes - contracts change rarely
      onError: (error) => {
        console.error(`Error fetching contract for client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client dashboard data (replaces multiple API calls)
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with complete dashboard data
 */
export const useClientDashboard = (clientId) => {
  return useQuery(
    queryKeys.clients.dashboard(clientId),
    () => api.getClientDashboard(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching dashboard for client ${clientId}:`, error);
      },
    }
  );
};
```

hooks\useFileData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to check if a payment has associated files
 * @param {number} paymentId - Payment ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for payment files
 */
export const usePaymentFiles = (paymentId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.payments.files(paymentId),
    () => api.getPaymentFiles(paymentId),
    {
      enabled: !!paymentId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error fetching files for payment ${paymentId}:`, error);
        return [];
      }
    }
  );
};

/**
 * Hook to check if a client has any associated files
 * @param {number} clientId - Client ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for client files check
 */
export const useClientFiles = (clientId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.clients.files(clientId),
    () => api.checkClientFiles(clientId),
    {
      enabled: !!clientId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error checking files for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Cache for payment file status to reduce API calls
 */
const paymentFileCache = new Map();

/**
 * Set file status for a payment in the cache
 * @param {number} paymentId - Payment ID
 * @param {boolean} hasFiles - Whether the payment has files
 */
export const setPaymentFileStatus = (paymentId, hasFiles) => {
  paymentFileCache.set(paymentId, !!hasFiles);
};

/**
 * Get file status for a payment from the cache
 * @param {number} paymentId - Payment ID
 * @returns {boolean|undefined} - True if has files, false if not, undefined if not in cache
 */
export const getPaymentFileStatus = (paymentId) => {
  return paymentFileCache.has(paymentId) 
    ? paymentFileCache.get(paymentId) 
    : undefined;
};

/**
 * Clear file status cache
 */
export const clearFileCache = () => {
  paymentFileCache.clear();
};

/**
 * Check if a payment has files with cache support
 * @param {number} paymentId - Payment ID
 * @returns {Promise<boolean>} - Promise resolving to true if payment has files
 */
export const checkPaymentHasFiles = async (paymentId) => {
  // Check cache first
  if (paymentFileCache.has(paymentId)) {
    return paymentFileCache.get(paymentId);
  }
  
  try {
    const result = await api.checkPaymentFiles(paymentId);
    const hasFiles = !!result?.has_files;
    
    // Update cache
    setPaymentFileStatus(paymentId, hasFiles);
    
    return hasFiles;
  } catch (error) {
    console.error(`Error checking files for payment ${paymentId}:`, error);
    return false;
  }
};
```

hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
import { clearFileCache } from './useFileData';

/**
 * Hook to fetch payment history for a client
 * @param {number} clientId - Client ID
 * @param {Object} options - Query options including pagination and filters
 * @returns {Object} - Query result with payments data
 */
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;

  // Create params object without null/undefined values
  const params = { page, limit };
  if (year !== null) {
    params.year = year;
  }

  return useQuery(
    [...queryKeys.clients.payments(clientId), page, limit, year],
    () => api.getPayments(clientId, params),
    {
      enabled: !!clientId,
      keepPreviousData: true,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payments for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch a single payment
 * @param {number} paymentId - Payment ID
 * @returns {Object} - Query result with payment data
 */
export const usePayment = (paymentId) => {
  return useQuery(
    queryKeys.payments.detail(paymentId),
    () => api.getPayment(paymentId),
    {
      enabled: !!paymentId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payment ${paymentId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch available periods for a contract
 * @param {number} contractId - Contract ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with periods data
 */
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery(
    queryKeys.contracts.periods(contractId, clientId),
    () => api.getAvailablePeriods(contractId, clientId),
    {
      enabled: !!contractId && !!clientId,
      staleTime: 1000 * 60 * 60, // 1 hour
      onError: (error) => {
        console.error(`Error fetching periods for contract ${contractId}:`, error);
      }
    }
  );
};

/**
 * Hook to create a new payment
 * @returns {Object} - Mutation object for creating payment
 */
export const useCreatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    (paymentData) => api.createPayment(paymentData),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
      onError: (error) => {
        console.error('Error creating payment:', error);
      }
    }
  );
};

/**
 * Hook to update an existing payment
 * @returns {Object} - Mutation object for updating payment
 */
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, data }) => api.updatePayment(id, data),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.payments.detail(data.payment_id));
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error updating payment:', error);
      }
    }
  );
};

/**
 * Hook to delete a payment
 * @returns {Object} - Mutation object for deleting payment
 */
export const useDeletePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, clientId }) => api.deletePayment(id).then(() => ({ id, clientId })),
    {
      onSuccess: ({ id, clientId }) => {
        // Invalidate affected queries
        queryClient.invalidateQueries(queryKeys.clients.payments(clientId));
        queryClient.invalidateQueries(queryKeys.clients.summary(clientId));
        queryClient.invalidateQueries(queryKeys.clients.detail(clientId));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error deleting payment:', error);
      }
    }
  );
};
```

layouts\MainLayout.jsx
```jsx
        <div className="flex-1 overflow-auto">
          <main className="container mx-auto px-4 pt-4 pb-5 card-container">
            {children}
          </main>
        </div> 
```

lib\api.js
```js
/**
 * API service for communicating with the backend
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';



/**
 * Perform an API request with error handling
 * @param {string} endpoint - API endpoint
 * @param {Object} options - Request options
 * @returns {Promise<any>} - Response data
 */
async function request(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };

  const config = {
    ...options,
    headers,
  };

  try {
    const response = await fetch(url, config);

    // Handle client errors (4xx)
    if (response.status >= 400 && response.status < 500) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || `API error: ${response.status} ${response.statusText}`);
    }

    // Handle server errors (5xx) - let React Query handle retries
    if (!response.ok) {
      throw new Error(`Server error: ${response.status} ${response.statusText}`);
    }

    // No content
    if (response.status === 204) {
      return null;
    }

    return await response.json();
  } catch (error) {
    // Provide more user-friendly error messages for network issues
    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
      throw new Error('Cannot connect to the server. Please check your network connection and make sure the backend is running.');
    }

    throw error;
  }
}


/**
 * API service with all available endpoints
 */
const api = {
  // Client endpoints
  getClients: (params) => {
    const queryString = params ? new URLSearchParams(params).toString() : '';
    return request(`/clients${queryString ? '?' + queryString : ''}`);
  },
  getClient: (id) => request(`/clients/${id}`),
  getClientDashboard: (id) => request(`/clients/${id}/dashboard`),

  // Contract endpoints
  getContract: (id) => request(`/contracts/${id}`),
  getClientContract: (clientId) => request(`/clients/${clientId}/contract`),
  getAvailablePeriods: (contractId, clientId) =>
    request(`/contracts/${contractId}/periods?client_id=${clientId}`),

  // Payment endpoints
  getPayments: (clientId, params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return request(`/clients/${clientId}/payments?${queryString}`);
  },
  getPayment: (id) => request(`/payments/${id}`),
  createPayment: (data) => request('/payments', {
    method: 'POST',
    body: JSON.stringify(data),
  }),
  updatePayment: (id, data) => request(`/payments/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  }),
  deletePayment: (id) => request(`/payments/${id}`, {
    method: 'DELETE',
  }),

  // Calculation endpoints
  calculateFee: (contractId, totalAssets) => request('/calculate-fee', {
    method: 'POST',
    body: JSON.stringify({ contract_id: contractId, total_assets: totalAssets }),
  }),
  calculateVariance: (actualFee, expectedFee) => request(`/calculate-variance?actual_fee=${actualFee}&expected_fee=${expectedFee}`, {
    method: 'POST',
  }),

  // File endpoints
  checkPaymentFiles: (paymentId) =>
    request(`/files/check/payment/${paymentId}`),
  checkClientFiles: (clientId) =>
    request(`/files/check/client/${clientId}`),
  getPaymentFiles: (paymentId) =>
    request(`/files/payment/${paymentId}`),
};

export default api;
```

lib\constants.js
```js
/**
 * Application-wide constants
 */

// Month names used for displaying dates
export const MONTH_NAMES = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

// Payment methods used in forms and displays
export const PAYMENT_METHODS = [
  { label: 'Auto - ACH', value: 'Auto - ACH' },
  { label: 'Auto - Check', value: 'Auto - Check' },
  { label: 'Invoice - Check', value: 'Invoice - Check' },
  { label: 'Wire Transfer', value: 'Wire Transfer' },
  { label: 'Check', value: 'Check' },
];

// Status colors for status badges and indicators
export const STATUS_COLORS = {
  // Compliance statuses
  green: 'bg-green-100 text-green-800',
  yellow: 'bg-yellow-100 text-yellow-800',
  red: 'bg-red-100 text-red-800',

  // Fee variance statuses
  exact: 'bg-blue-100 text-blue-800',
  acceptable: 'bg-green-100 text-green-800',
  warning: 'bg-yellow-100 text-yellow-800',
  alert: 'bg-red-100 text-red-800',
  unknown: 'bg-gray-100 text-gray-800',
  gray: 'bg-gray-100 text-gray-800',
};

// Fee types
export const FEE_TYPES = {
  FLAT: 'flat',
  PERCENTAGE: 'percentage',
  PERCENT: 'percent'
};

// Payment schedules
export const PAYMENT_SCHEDULES = {
  MONTHLY: 'monthly',
  QUARTERLY: 'quarterly'
};

// Payment status
export const PAYMENT_STATUS = {
  PAID: 'Paid',
  DUE: 'Due',
  OVERDUE: 'Overdue'
};
```

lib\dateUtils.js
```js
import { format, parseISO } from 'date-fns';
import { MONTH_NAMES } from './constants';

/**
 * Format a date string or Date object to a human-readable format
 * @param {string|Date} dateInput - ISO date string or Date object
 * @param {string} formatStr - Optional format string
 * @returns {string} - Formatted date string
 */
export const formatDate = (dateInput, formatStr = 'MMM d, yyyy') => {
  if (!dateInput) return 'N/A';
  try {
    // Handle both string dates and Date objects
    const date = dateInput instanceof Date ? dateInput : parseISO(dateInput);
    return format(date, formatStr);
  } catch (error) {
    return 'Invalid Date';
  }
};

// Business logic functions moved to backend API
// calculateNextPaymentDue() - Use backend calculations instead

/**
 * Format applied period from payment data
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period string
 */
export const formatAppliedPeriod = (payment) => {
  if (!payment) return 'N/A';

  if (payment.applied_start_quarter) {
    return `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
  }

  if (payment.applied_start_month) {
    const monthIndex = payment.applied_start_month - 1; // Convert to 0-based index
    if (monthIndex >= 0 && monthIndex < 12) {
      return `${MONTH_NAMES[monthIndex]} ${payment.applied_start_month_year}`;
    }
  }

  return 'N/A';
};

/**
 * Format period range for split payments
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period range
 */
export const formatPeriodRange = (payment) => {
  if (!payment || !payment.is_split_payment) return formatAppliedPeriod(payment);

  let startPeriod, endPeriod;

  if (payment.applied_start_quarter) {
    startPeriod = `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
    endPeriod = `Q${payment.applied_end_quarter} ${payment.applied_end_quarter_year}`;
  } else if (payment.applied_start_month) {
    const startMonthIndex = payment.applied_start_month - 1;
    const endMonthIndex = payment.applied_end_month - 1;

    if (startMonthIndex >= 0 && startMonthIndex < 12 &&
      endMonthIndex >= 0 && endMonthIndex < 12) {
      startPeriod = `${MONTH_NAMES[startMonthIndex]} ${payment.applied_start_month_year}`;
      endPeriod = `${MONTH_NAMES[endMonthIndex]} ${payment.applied_end_month_year}`;
    } else {
      return 'Invalid Period';
    }
  } else {
    return 'N/A';
  }

  return `${startPeriod} - ${endPeriod}`;
};

// isPeriodInPast() - Business logic moved to backend
```

lib\formatUtils.js
```js
/**
 * Formatting utilities for the frontend.
 * This file contains only presentation/formatting functions, no business logic.
 */

import { FEE_TYPES } from './constants';

/**
 * Format a number as currency
 * @param {number} value - Number to format
 * @returns {string} - Formatted currency string
 */
export const formatCurrency = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Format a number as percentage
 * @param {number} value - Number to format (as a decimal, e.g. 0.42 for 42%)
 * @returns {string} - Formatted percentage string
 */
export const formatPercentage = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Generate fee references for different payment frequencies
 * NOTE: This is display logic for fee reference tables.
 * TODO: Consider moving to backend API for Sprint 4+
 * 
 * @param {Object} contract - Contract object
 * @param {number} baseAssets - Base asset amount for percentage calculations (optional)
 * @returns {Object|null} - Object with monthly, quarterly, and annual rates
 */
export const generateFeeReferences = (contract, baseAssets = null) => {
  if (!contract) return null;

  let monthlyRate, quarterlyRate, annualRate;

  if (contract.fee_type === FEE_TYPES.FLAT) {
    // Flat rate contracts: scale by frequency
    if (contract.payment_schedule === 'monthly') {
      monthlyRate = contract.flat_rate;
      quarterlyRate = monthlyRate * 3;
      annualRate = monthlyRate * 12;
    } else {
      // Quarterly payment schedule
      quarterlyRate = contract.flat_rate;
      monthlyRate = quarterlyRate / 3;
      annualRate = quarterlyRate * 4;
    }
    
    return {
      monthly: formatCurrency(monthlyRate),
      quarterly: formatCurrency(quarterlyRate),
      annual: formatCurrency(annualRate)
    };
  } else if (contract.percent_rate) {
    // Percentage contracts: the stored rate is already scaled to payment frequency
    // We need to show the effective dollar amounts based on frequency
    const percentRate = contract.percent_rate;
    
    if (baseAssets) {
      // Calculate dollar amounts based on frequency
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = baseAssets * percentRate;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly payment schedule
        quarterlyRate = baseAssets * percentRate;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: formatCurrency(monthlyRate),
        quarterly: formatCurrency(quarterlyRate),
        annual: formatCurrency(annualRate)
      };
    } else {
      // No assets available, show percentage rates with proper scaling
      if (contract.payment_schedule === 'monthly') {
        // Monthly rate is the base
        monthlyRate = percentRate * 100;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly rate is the base
        quarterlyRate = percentRate * 100;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: `${monthlyRate.toFixed(3)}%`,
        quarterly: `${quarterlyRate.toFixed(3)}%`,
        annual: `${annualRate.toFixed(3)}%`
      };
    }
  }

  return null;
};
```

pages\_app.js
```js
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { queryClient } from '../store/queries';
import '../styles/globals.css';

function MyApp({ Component, pageProps }) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
      {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}
    </QueryClientProvider>
  );
}

export default MyApp;
```

pages\_document.js
```js
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html>
      <Head>
        <link rel="stylesheet" href="/build.css" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
} 
```

pages\contacts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ContactsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contacts</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contacts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ContactsPage;
```

pages\contracts.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ContractsPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Contracts</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Contracts page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ContractsPage;
```

pages\export.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const ExportPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Export Data</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Export Data page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default ExportPage;
```

pages\index.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';

const LaunchMenu = () => {
  const router = useRouter();

  const handleNavigation = (path) => {
    if (path === '/payments') {
      router.push('/payments');
    } else {
      router.push('/under-construction', { 
        query: { feature: path.replace('/', '') } 
      });
    }
  };

  const modules = [
    {
      id: 'payments',
      title: '401k Payments Manager',
      description: 'Manage and Review Client 401k payments',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <rect x="2" y="5" width="20" height="14" rx="2"></rect>
          <line x1="2" y1="10" x2="22" y2="10"></line>
        </svg>
      ),
      path: '/payments'
    },
    {
      id: 'agenda',
      title: 'Agenda Generator',
      description: 'Create and manage meeting agendas',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
          <path d="M14 2v6h6"></path>
          <line x1="16" y1="13" x2="8" y2="13"></line>
          <line x1="16" y1="17" x2="8" y2="17"></line>
          <line x1="10" y1="9" x2="8" y2="9"></line>
        </svg>
      ),
      path: '/agenda'
    },
    {
      id: 'efip',
      title: 'eFIP',
      description: 'Financial Independence Projections',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <line x1="12" y1="20" x2="12" y2="10"></line>
          <line x1="18" y1="20" x2="18" y2="4"></line>
          <line x1="6" y1="20" x2="6" y2="16"></line>
        </svg>
      ),
      path: '/efip'
    },
    {
      id: 'structured-notes',
      title: 'Structured Notes Tracker',
      description: 'GBIL, Cash, and Structured Notes',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
        </svg>
      ),
      path: '/structured-notes'
    },
    {
      id: 'ai-tools',
      title: 'AI Tools',
      description: 'AI-powered investment analysis',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
          <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
          <path d="M12 12l9.2-7.4"></path>
          <path d="M12 12V2"></path>
        </svg>
      ),
      path: '/ai-tools'
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>HohimerPro</title>
      </Head>
      
      <main className="flex-1 flex flex-col justify-center items-center px-4 py-12">
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-gray-900 mb-3">Welcome to HohimerPro</h1>
          <p className="text-xl text-gray-600 max-w-2xl">
            Investment management suite for Hohimer Wealth Management
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl w-full">
          {modules.map((module) => (
            <button
              key={module.id}
              onClick={() => handleNavigation(module.path)}
              className="bg-white border border-gray-200 hover:border-blue-500 rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-200 text-left flex items-start gap-4"
            >
              <div className="p-2 bg-blue-50 text-blue-600 rounded-lg">
                {module.icon}
              </div>
              <div>
                <h2 className="text-xl font-medium text-gray-900 mb-2">{module.title}</h2>
                <p className="text-gray-500">{module.description}</p>
              </div>
            </button>
          ))}
        </div>
      </main>
      
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};

export default LaunchMenu;
```

pages\payments.js
```js
import React, { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import PageLayout from '../components/layout/PageLayout';
import ClientDashboard from '../components/payment/ClientDashboard';
import PaymentForm from '../components/payment/PaymentForm';
import PaymentHistory from '../components/payment/PaymentHistory';
import ErrorDisplay from '../components/ui/ErrorDisplay';
import api from '../lib/api';
import useStore from '../store';
import { useClient } from '../hooks/useClientData';

const PaymentsPage = () => {
  const {
    selectedClientId,
    setSelectedClientId,
    documentViewerOpen,
    setDocumentViewerOpen
  } = useStore();
  const { data: clientDetails } = useClient(selectedClientId);
  const [editingPayment, setEditingPayment] = useState(null);

  // Fetch client list
  const {
    data: clients = [],
    isLoading,
    error,
  } = useQuery(['clients'], () => api.getClients());

  // If no client is selected, select the first one automatically
  useEffect(() => {
    if (!selectedClientId && clients.length > 0) {
      setSelectedClientId(clients[0].client_id);
    }
  }, [clients, selectedClientId, setSelectedClientId]);

  const toggleDocumentViewer = () => {
    setDocumentViewerOpen(!documentViewerOpen);
  };

  const renderContent = () => {
    if (error) {
      return (
        <ErrorDisplay 
          title="Error loading clients"
          error={error}
        />
      );
    }

    if (!selectedClientId) {
      return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <p className="text-center text-gray-500">
            {clients.length > 0
              ? 'Select a client from the sidebar to view payment information.'
              : 'No clients available. Please add clients to the system.'}
          </p>
        </div>
      );
    }

    const client = clients.find(c => c.client_id === selectedClientId);

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between mb-8">
          <div>
            <div>
              {clientDetails?.full_name && (
                <div className="text-sm text-dark-400 mb-1 uppercase tracking-wider">
                  {clientDetails.full_name}
                </div>
              )}
              <h1 className="text-3xl font-bold text-dark-700">
                {isLoading ? 'Loading...' : client?.display_name || 'Client Company Name'}
              </h1>
              <div className="h-1 w-full mt-2 bg-gradient-to-r from-primary-600 to-primary-200 rounded-full"></div>
            </div>
          </div>
          <button
            className={`
              flex items-center gap-2 px-4 py-2.5 rounded-lg shadow-sm transition-all duration-200
              ${documentViewerOpen
                ? 'bg-primary-600 text-white hover:bg-primary-700 shadow-md'
                : 'bg-white border border-light-400 text-dark-600 hover:bg-light-200 hover:border-primary-400'}
            `}
            onClick={toggleDocumentViewer}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className={documentViewerOpen ? 'text-white' : 'text-primary-500'}
            >
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
            <span className="font-medium">{documentViewerOpen ? "Hide Documents" : "View Documents"}</span>
          </button>
        </div>

        <ClientDashboard clientId={selectedClientId} />

        <div className={`transition-all duration-300 ${!documentViewerOpen ? 'mx-[20%]' : ''}`}>
          <PaymentForm 
            clientId={selectedClientId} 
            editingPayment={editingPayment}
            onEditingPaymentChange={setEditingPayment}
          />
        </div>

        <PaymentHistory 
          clientId={selectedClientId}
          editingPayment={editingPayment}
          onEditingPaymentChange={setEditingPayment}
        />
      </div>
    );
  };

  return (
    <PageLayout clients={clients} isLoading={isLoading}>
      {renderContent()}
    </PageLayout>
  );
};

export default PaymentsPage;
```

pages\summary.js
```js
import React from 'react';
import PageLayout from '../components/layout/PageLayout';
import Card from '../components/ui/Card';

const SummaryPage = () => {
  return (
    <PageLayout>
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Summary</h1>
      </div>
      
      <Card className="text-center py-12">
        <div className="max-w-md mx-auto">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-12 w-12 mx-auto text-gray-400 mb-4" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" 
            />
          </svg>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            Page Under Construction
          </h2>
          <p className="text-gray-500 mb-6">
            The Summary page is currently being developed. Please check back later.
          </p>
        </div>
      </Card>
    </PageLayout>
  );
};

export default SummaryPage;
```

pages\under-construction.js
```js
import React from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';

const UnderConstruction = () => {
  const router = useRouter();
  const { feature } = router.query;
  
  const getFeatureName = () => {
    switch(feature) {
      case 'agenda': return 'Agenda Generator';
      case 'efip': return 'eFIP (Financial Independence Projections)';
      case 'structured-notes': return 'Structured Notes Planner';
      case 'ai-tools': return 'AI Tools';
      default: return 'This feature';
    }
  };

  const getFeatureIcon = () => {
    switch(feature) {
      case 'agenda':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <path d="M14 2v6h6"></path>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <line x1="10" y1="9" x2="8" y2="9"></line>
          </svg>
        );
      case 'efip':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="12" y1="20" x2="12" y2="10"></line>
            <line x1="18" y1="20" x2="18" y2="4"></line>
            <line x1="6" y1="20" x2="6" y2="16"></line>
          </svg>
        );
      case 'structured-notes':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"></path>
          </svg>
        );
      case 'ai-tools':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M12 2a10 10 0 1 0 10 10H12V2z"></path>
            <path d="M12 2a10 10 0 0 1 10 10h-10V2z"></path>
            <path d="M12 12l9.2-7.4"></path>
            <path d="M12 12V2"></path>
          </svg>
        );
      default:
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Head>
        <title>{getFeatureName()} | HohimerPro</title>
      </Head>
      
      <main className="flex-1 flex flex-col items-center justify-center p-4">
        <div className="bg-white shadow-md rounded-lg p-8 max-w-md w-full text-center">
          <div className="flex justify-center mb-6">
            <div className="p-4 bg-yellow-50 text-yellow-600 rounded-full">
              {getFeatureIcon()}
            </div>
          </div>
          
          <h1 className="text-2xl font-bold text-gray-900 mb-2">{getFeatureName()}</h1>
          
          <div className="mb-6 text-yellow-500 text-5xl">🚧</div>
          
          <p className="text-gray-600 mb-8">
            We're currently building this feature. Check back soon for updates!
          </p>
          
          <button
            onClick={() => router.push('/')}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition-colors duration-200 inline-flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M19 12H5M12 19l-7-7 7-7"/>
            </svg>
            Return to Home
          </button>
        </div>
      </main>
      
      <footer className="bg-white border-t border-gray-200 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-gray-500 text-sm">
          &copy; {new Date().getFullYear()} Hohimer Wealth Management. All rights reserved.
        </div>
      </footer>
    </div>
  );
};

export default UnderConstruction; 
```

store\index.js
```js
import { create } from 'zustand';

/**
 * Central application state store using Zustand
 */
const useStore = create((set) => ({
  // Client selection
  selectedClientId: null,
  setSelectedClientId: (clientId) => set({ selectedClientId: clientId }),
  
  // Document viewer state
  documentViewerOpen: false,
  setDocumentViewerOpen: (isOpen) => set({ documentViewerOpen: isOpen }),
  selectedDocumentUrl: null,
  setSelectedDocumentUrl: (url) => set({ selectedDocumentUrl: url }),
  
  // Mobile UI state
  isMobileMenuOpen: false,
  setMobileMenuOpen: (isOpen) => set({ isMobileMenuOpen: isOpen }),
  
  // Modal state
  modalOpen: false,
  modalContent: null,
  openModal: (content) => set({ modalOpen: true, modalContent: content }),
  closeModal: () => set({ modalOpen: false, modalContent: null }),
}));

export default useStore;
```

store\queries.js
```js
import { QueryClient } from '@tanstack/react-query';

/**
 * Configured QueryClient for application-wide use
 */
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      // Reduce window refetching to improve UX
      refetchOnWindowFocus: false,
      // Data remains fresh for 5 minutes by default
      staleTime: 1000 * 60 * 5,
      // Retry network and server errors, but not client errors
      retry: (failureCount, error) => {
        // Don't retry client errors (4xx)
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        // Retry up to 2 times for network/server errors
        return failureCount < 2;
      },
      // Exponential backoff with jitter
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
      // Show error details for better debugging
      onError: (error) => {
        console.error('Query error:', error);
      }
    },
    mutations: {
      // Retry mutations for server errors only
      retry: (failureCount, error) => {
        // Don't retry client errors (4xx)
        if (error?.message?.includes('API error') && error.message.includes('4')) {
          return false;
        }
        // Retry once for server errors
        return failureCount < 1;
      },
      // Exponential backoff for mutations
      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 10000)
    }
  },
});

/**
 * Centralized query keys for better cache management
 */
export const queryKeys = {
  clients: {
    all: ['clients'],
    detail: (id) => ['clients', id],
    contract: (id) => ['clients', id, 'contract'],
    payments: (id) => ['clients', id, 'payments'],
    summary: (id) => ['clients', id, 'summary'],
    files: (id) => ['clients', id, 'files'],
    dashboard: (id) => ['clients', id, 'dashboard'],
  },
  payments: {
    all: ['payments'],
    detail: (id) => ['payments', id],
    files: (id) => ['payments', id, 'files'],
  },
  contracts: {
    all: ['contracts'],
    detail: (id) => ['contracts', id],
    periods: (id, clientId) => ['contracts', id, 'periods', clientId],
  },
};
```