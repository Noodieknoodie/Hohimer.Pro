client\ClientSearch.jsx
```jsx
import React, { useState, useEffect } from 'react';
import useStore from '../../store';

const ClientSearch = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredClients, setFilteredClients] = useState(clients);
  
  // Update filtered clients when search term or clients change
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredClients(clients);
      return;
    }
    
    const lowerSearchTerm = searchTerm.toLowerCase();
    const filtered = clients.filter(client => 
      client.display_name.toLowerCase().includes(lowerSearchTerm) ||
      (client.provider_name && client.provider_name.toLowerCase().includes(lowerSearchTerm))
    );
    
    setFilteredClients(filtered);
  }, [searchTerm, clients]);
  
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  
  const handleClearSearch = () => {
    setSearchTerm('');
  };
  
  return (
    <div className="relative mb-4">
      <div className="relative group">
        <svg
          className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-dark-400 group-hover:text-primary-500 transition-colors duration-200"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        
        <input
          type="search"
          placeholder="Search clients..."
          className="pl-10 pr-8 w-full p-2.5 rounded-lg border border-light-400 bg-light-200
                    focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent
                    shadow-sm hover:shadow transition-all duration-200 text-dark-600 placeholder-dark-400"
          value={searchTerm}
          onChange={handleSearchChange}
          disabled={isLoading}
        />
        
        {searchTerm && (
          <button
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-dark-400 hover:text-primary-600 transition-colors duration-200"
            onClick={handleClearSearch}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
      </div>
      
      {searchTerm && filteredClients.length > 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-light-400 rounded-lg shadow-lg z-10 max-h-64 overflow-y-auto animate-fade-in">
          {filteredClients.map(client => (
            <button
              key={client.client_id}
              className="w-full text-left px-4 py-2.5 hover:bg-light-200 flex items-center first:rounded-t-lg last:rounded-b-lg border-b border-light-300 last:border-b-0"
              onClick={() => {
                setSelectedClientId(client.client_id);
                setSearchTerm('');
              }}
            >
              <span className="mr-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className={
                    client.compliance_status === 'green'
                      ? 'text-green-500'
                      : client.compliance_status === 'yellow'
                        ? 'text-yellow-500'
                        : 'text-red-500'
                  }
                >
                  <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
              </span>
              <div className="flex-1">
                <div className="font-medium">{client.display_name}</div>
                {client.provider_name && (
                  <div className="text-xs text-gray-500">{client.provider_name}</div>
                )}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {searchTerm && filteredClients.length === 0 && (
        <div className="absolute left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 p-4 text-center text-gray-500">
          No clients found matching "{searchTerm}"
        </div>
      )}
    </div>
  );
};

export default ClientSearch;
```

document\DocumentViewer.jsx
```jsx
import React, { useState, useEffect } from 'react';
import { Document, Page, pdfjs } from 'react-pdf';
import useStore from '../../store';
import { usePaymentFiles } from '../../hooks/useFileData';

// Set up the worker for PDF.js
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

const DocumentViewer = () => {
  const { 
    documentViewerOpen, 
    setDocumentViewerOpen, 
    selectedDocumentUrl 
  } = useStore();
  
  const [selectedFileId, setSelectedFileId] = useState(null);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [pdfError, setPdfError] = useState(false);
  const [scale, setScale] = useState(1.0);
  
  // Extract payment ID from the URL
  const paymentIdMatch = selectedDocumentUrl?.match(/\/payment\/(\d+)/);
  const paymentId = paymentIdMatch ? parseInt(paymentIdMatch[1]) : null;
  
  // Fetch files for the selected payment
  const { 
    data: files = [], 
    isLoading,
    isError
  } = usePaymentFiles(paymentId, { 
    enabled: !!paymentId && documentViewerOpen 
  });
  
  // When files are loaded, select the first file by default
  useEffect(() => {
    if (files.length > 0 && !selectedFileId) {
      setSelectedFileId(files[0].file_id);
      // Reset PDF state when a new file is selected
      setNumPages(null);
      setPageNumber(1);
      setPdfError(false);
    }
  }, [files, selectedFileId]);
  
  // Reset state when document viewer is closed
  useEffect(() => {
    if (!documentViewerOpen) {
      setSelectedFileId(null);
      setNumPages(null);
      setPageNumber(1);
      setPdfError(false);
    }
  }, [documentViewerOpen]);
  
  if (!documentViewerOpen) {
    return null;
  }
  
  const selectedFile = files.find(file => file.file_id === selectedFileId);
  
  // Function to handle PDF document loading
  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
    setPdfError(false);
  };
  
  // Function to handle PDF document loading errors
  const onDocumentLoadError = (error) => {
    console.error('Error while loading PDF:', error);
    setPdfError(true);
  };
  
  // Navigation functions for multi-page PDFs
  const goToPrevPage = () => {
    if (pageNumber > 1) {
      setPageNumber(pageNumber - 1);
    }
  };
  
  const goToNextPage = () => {
    if (pageNumber < numPages) {
      setPageNumber(pageNumber + 1);
    }
  };
  
  // Zoom functions
  const zoomIn = () => {
    setScale(prev => Math.min(prev + 0.2, 2.5));
  };
  
  const zoomOut = () => {
    setScale(prev => Math.max(prev - 0.2, 0.6));
  };
  
  const resetZoom = () => {
    setScale(1.0);
  };
  
  return (
    <div className="w-2/5 border-l border-gray-200 bg-white flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h2 className="text-lg font-medium text-gray-800">Document Preview</h2>
        <div className="flex items-center space-x-2">
          <button 
            className="w-8 h-8 flex items-center justify-center rounded-md hover:bg-gray-100"
            title="Close"
            onClick={() => setDocumentViewerOpen(false)}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
      
      <div className="flex-grow flex flex-col overflow-hidden">
        {isLoading ? (
          <div className="flex-1 flex items-center justify-center">
            <div className="w-10 h-10 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin"></div>
          </div>
        ) : isError ? (
          <div className="flex-1 flex items-center justify-center p-4 bg-red-50 text-red-700">
            Error loading document. Please try again.
          </div>
        ) : files.length === 0 ? (
          <div className="flex-1 flex items-center justify-center p-4 bg-gray-50 text-gray-500">
            No documents available for this payment.
          </div>
        ) : (
          <>
            {/* File selector */}
            {files.length > 1 && (
              <div className="flex p-2 border-b border-gray-200 overflow-x-auto">
                {files.map(file => (
                  <button
                    key={file.file_id}
                    className={`px-3 py-1.5 text-sm rounded-md mr-2 whitespace-nowrap ${
                      selectedFileId === file.file_id 
                        ? 'bg-primary-100 text-primary-700 border border-primary-300' 
                        : 'bg-gray-50 text-gray-700 border border-gray-200 hover:bg-gray-100'
                    }`}
                    onClick={() => {
                      setSelectedFileId(file.file_id);
                      setPageNumber(1);
                      setNumPages(null);
                      setPdfError(false);
                      setScale(1.0);
                    }}
                  >
                    {file.file_name}
                  </button>
                ))}
              </div>
            )}
            
            {/* Document display area */}
            <div className="flex-1 p-4 overflow-hidden flex flex-col">
              {selectedFile ? (
                <div className="h-full flex flex-col">
                  <div className="bg-gray-50 p-2 rounded-md mb-2 text-sm text-gray-700">
                    <div className="font-medium">{selectedFile.file_name}</div>
                    <div className="text-xs text-gray-500 mt-1">
                      Path: {selectedFile.full_path || selectedFile.onedrive_path}
                    </div>
                  </div>
                  
                  {/* PDF Viewer */}
                  <div className="flex-1 flex flex-col items-center bg-gray-100 rounded-md overflow-hidden">
                    {pdfError ? (
                      <div className="h-full flex items-center justify-center text-center p-4">
                        <div>
                          <svg 
                            xmlns="http://www.w3.org/2000/svg" 
                            width="64" 
                            height="64" 
                            viewBox="0 0 24 24" 
                            fill="none" 
                            stroke="currentColor" 
                            strokeWidth="2" 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            className="mx-auto mb-4 text-red-400"
                          >
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                          </svg>
                          <p className="text-red-600 font-medium mb-2">Error loading PDF</p>
                          <p className="text-sm text-gray-500 mb-4">
                            Unable to load the PDF file. Please make sure the file exists and is accessible.
                          </p>
                          <p className="text-xs text-gray-400">
                            File path: {selectedFile.full_path || selectedFile.onedrive_path}
                          </p>
                        </div>
                      </div>
                    ) : (
                      <>
                        {/* Zoom controls */}
                        <div className="w-full flex justify-center p-2 bg-gray-50 border-b border-gray-200">
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={zoomOut}
                              disabled={scale <= 0.6}
                              className={`p-1 rounded ${scale <= 0.6 ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-200'}`}
                              title="Zoom out"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <circle cx="11" cy="11" r="8"></circle>
                                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                <line x1="8" y1="11" x2="14" y2="11"></line>
                              </svg>
                            </button>
                            <button
                              onClick={resetZoom}
                              className="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300 text-gray-700"
                              title="Reset zoom"
                            >
                              {Math.round(scale * 100)}%
                            </button>
                            <button
                              onClick={zoomIn}
                              disabled={scale >= 2.5}
                              className={`p-1 rounded ${scale >= 2.5 ? 'text-gray-300' : 'text-gray-700 hover:bg-gray-200'}`}
                              title="Zoom in"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <circle cx="11" cy="11" r="8"></circle>
                                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                <line x1="11" y1="8" x2="11" y2="14"></line>
                                <line x1="8" y1="11" x2="14" y2="11"></line>
                              </svg>
                            </button>
                          </div>
                        </div>
                        
                        <div className="flex-1 w-full overflow-auto flex justify-center p-4">
                          <Document
                            file={selectedFile.full_path}
                            onLoadSuccess={onDocumentLoadSuccess}
                            onLoadError={onDocumentLoadError}
                            loading={
                              <div className="flex items-center justify-center h-full">
                                <div className="w-10 h-10 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin"></div>
                              </div>
                            }
                          >
                            <Page 
                              pageNumber={pageNumber} 
                              scale={scale}
                              renderTextLayer={false}
                              renderAnnotationLayer={false}
                            />
                          </Document>
                        </div>
                        
                        {/* Page navigation for multi-page PDFs */}
                        {numPages > 1 && (
                          <div className="p-3 bg-white border-t border-gray-200 flex items-center justify-between">
                            <button
                              onClick={goToPrevPage}
                              disabled={pageNumber <= 1}
                              className={`p-2 rounded-md ${
                                pageNumber <= 1
                                  ? 'text-gray-300 cursor-not-allowed'
                                  : 'text-gray-600 hover:bg-gray-100'
                              }`}
                            >
                              <svg 
                                xmlns="http://www.w3.org/2000/svg" 
                                width="20" 
                                height="20" 
                                viewBox="0 0 24 24" 
                                fill="none" 
                                stroke="currentColor" 
                                strokeWidth="2" 
                                strokeLinecap="round" 
                                strokeLinejoin="round"
                              >
                                <polyline points="15 18 9 12 15 6"></polyline>
                              </svg>
                            </button>
                            <span className="text-sm text-gray-600">
                              Page {pageNumber} of {numPages}
                            </span>
                            <button
                              onClick={goToNextPage}
                              disabled={pageNumber >= numPages}
                              className={`p-2 rounded-md ${
                                pageNumber >= numPages
                                  ? 'text-gray-300 cursor-not-allowed'
                                  : 'text-gray-600 hover:bg-gray-100'
                              }`}
                            >
                              <svg 
                                xmlns="http://www.w3.org/2000/svg" 
                                width="20" 
                                height="20" 
                                viewBox="0 0 24 24" 
                                fill="none" 
                                stroke="currentColor" 
                                strokeWidth="2" 
                                strokeLinecap="round" 
                                strokeLinejoin="round"
                              >
                                <polyline points="9 18 15 12 9 6"></polyline>
                              </svg>
                            </button>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              ) : (
                <div className="h-full flex items-center justify-center bg-gray-100 rounded-md">
                  <div className="text-center text-gray-500">
                    No file selected
                  </div>
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default DocumentViewer;
```

layout\Header.jsx
```jsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

const Header = () => {
  const router = useRouter();
  
  const navItems = [
    { title: 'HOME', path: '/', active: router.pathname === '/' },
    { title: 'PAYMENTS', path: '/payments', active: router.pathname === '/payments' },
    { title: 'SUMMARY', path: '/summary', active: router.pathname === '/summary' },
    { title: 'CONTACTS', path: '/contacts', active: router.pathname === '/contacts' },
    { title: 'CONTRACTS', path: '/contracts', active: router.pathname === '/contracts' },
    { title: 'EXPORT DATA', path: '/export', active: router.pathname === '/export' },
  ];
  
  return (
    <header className="navbar-dark shadow-md">
      <div className="flex h-14 items-center justify-between px-6">
        <div className="flex items-center">
          <Link href="/" className="text-xl font-semibold text-white mr-8 hover:text-primary-300 transition-colors duration-200">
            HohimerPro
          </Link>
          <nav className="hidden md:flex space-x-1">
            {navItems.map((item) => (
              <Link 
                key={item.path} 
                href={item.path}
                className={`${
                  router.pathname === item.path 
                    ? 'bg-primary-600 text-white shadow-sm' 
                    : 'text-light-300 hover:bg-dark-accent hover:text-white'
                } rounded-md px-4 py-2 text-sm font-medium h-10 flex items-center transition-colors duration-200`}
              >
                {item.title}
              </Link>
            ))}
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <button className="flex items-center gap-2 p-2 text-light-300 hover:text-white transition-colors duration-200">
            <span className="hidden sm:inline-block text-sm font-medium">Admin User</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="6 9 12 15 18 9"></polyline>
            </svg>
          </button>
        </div>
      </div>
      <div className="md:hidden overflow-x-auto bg-dark-600 px-3">
        <nav className="flex">
          {navItems.map((item) => (
            <Link
              key={item.path}
              href={item.path}
              className={`${
                router.pathname === item.path
                  ? 'border-b-2 border-primary-500 text-white'
                  : 'text-light-400 hover:text-white'
              } px-4 py-2 text-sm`}
            >
              {item.title}
            </Link>
          ))}
        </nav>
      </div>
    </header>
  );
};

export default Header;
```

layout\PageLayout.jsx
```jsx
import React from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import DocumentViewer from '../document/DocumentViewer';
import useStore from '../../store';

const PageLayout = ({ children, clients = [], isLoading = false }) => {
  const { documentViewerOpen } = useStore();
  
  return (
    <div className="flex flex-col min-h-screen bg-light-200">
      <Header />
      
      <div className="flex flex-1 overflow-hidden">
        <Sidebar clients={clients} isLoading={isLoading} />
        
        <div className="flex flex-1 overflow-hidden">
          <div className={`flex-1 overflow-auto px-5 py-6 ${documentViewerOpen ? 'w-3/5' : 'w-full'}`}>
            <div className={`mx-auto ${documentViewerOpen ? 'max-w-full' : 'max-w-full'}`}>
              {children}
            </div>
          </div>
          
          <DocumentViewer />
        </div>
      </div>
    </div>
  );
};

export default PageLayout;
```

layout\Sidebar.jsx
```jsx
import React, { useState } from 'react';
import useStore from '../../store';
import ClientSearch from '../client/ClientSearch';
import { useRouter } from 'next/router';

const Sidebar = ({ clients = [], isLoading = false }) => {
  const { selectedClientId, setSelectedClientId } = useStore();
  const [showByProvider, setShowByProvider] = useState(false);
  const router = useRouter();
  
  // Group clients by provider
  const groupClientsByProvider = () => {
    if (!showByProvider) {
      return [['All', clients]];
    }
    
    return Object.entries(
      clients.reduce((acc, client) => {
        const provider = client.provider_name || 'No Provider';
        if (!acc[provider]) acc[provider] = [];
        acc[provider].push(client);
        return acc;
      }, {})
    ).sort((a, b) => a[0].localeCompare(b[0]));
  };
  
  const groupedClients = groupClientsByProvider();
  
  // Get the status icon based on compliance status
  const StatusIcon = ({ status }) => {
    if (status === 'green') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-green-500"
        >
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22 4 12 14.01 9 11.01"></polyline>
        </svg>
      );
    } else if (status === 'yellow') {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-yellow-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    } else {
      return (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="16" 
          height="16" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="text-red-500"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="8" x2="12" y2="12"></line>
          <line x1="12" y1="16" x2="12.01" y2="16"></line>
        </svg>
      );
    }
  };
  
  if (isLoading) {
    return (
      <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-gray-200 rounded"></div>
            <div className="h-6 bg-gray-200 rounded w-2/3"></div>
          </div>
        </div>
        <div className="p-2 flex-1 overflow-auto">
          <div className="animate-pulse space-y-3">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="w-80 border-r border-gray-200 bg-white flex flex-col h-full">
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Clients</h2>
        <ClientSearch clients={clients} isLoading={isLoading} />
        <div className="flex items-center justify-between mt-3">
          <span className="text-sm font-medium text-gray-700">View by Provider</span>
          <button 
            className={`h-5 w-10 rounded-full relative ${showByProvider ? 'bg-blue-600' : 'bg-gray-200'}`}
            onClick={() => setShowByProvider(!showByProvider)}
          >
            <div 
              className={`absolute w-3 h-3 rounded-full bg-white top-1 transition-all ${
                showByProvider ? 'right-1' : 'left-1'
              }`}
            ></div>
          </button>
        </div>
      </div>
      <div className="p-2 flex-1 overflow-auto">
        {groupedClients.map(([provider, providerClients]) => (
          <div key={provider} className="mb-2">
            {showByProvider && (
              <div className="px-3 py-2 text-xs font-semibold text-gray-600 bg-gray-50 rounded-md mb-1">
                {provider}
              </div>
            )}
            {providerClients.map(client => (
              <button
                key={client.client_id}
                className={`w-full flex items-center py-2 px-3 mb-1 text-left rounded transition-colors ${
                  selectedClientId === client.client_id 
                    ? 'bg-gray-100 border-l-4 border-primary-600 font-medium text-dark-700' 
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedClientId(client.client_id)}
              >
                <span className="truncate flex-grow">{client.display_name}</span>
                <span className="ml-2 flex-shrink-0">
                  <StatusIcon status={client.compliance_status} />
                </span>
              </button>
            ))}
          </div>
        ))}
        
        {clients.length === 0 && (
          <div className="p-4 text-center text-gray-500">
            No clients available
          </div>
        )}
      </div>
    </div>
  );
};

export default Sidebar;
```