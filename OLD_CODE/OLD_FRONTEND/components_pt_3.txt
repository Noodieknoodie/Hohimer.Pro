components\ui\Button.jsx
```jsx
import React from 'react';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = '',
  iconLeft = null,
  iconRight = null,
  ...props 
}) => {
  const variantStyles = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 hover:shadow-sm shadow-sm',
    secondary: 'bg-white border border-light-500 text-dark-500 hover:bg-light-200 hover:border-light-500 hover:text-dark-600 shadow-sm',
    outline: 'bg-transparent border border-primary-600 text-primary-600 hover:bg-primary-50 hover:border-primary-700 hover:text-primary-700 shadow-sm',
    dark: 'bg-dark-600 text-white hover:bg-dark-700 hover:shadow-sm shadow-sm',
    ghost: 'text-dark-500 hover:bg-light-300 hover:text-dark-600',
    danger: 'bg-status-error text-white hover:bg-red-700 hover:shadow-sm shadow-sm',
  };
  
  const sizeStyles = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-base',
  };
  
  return (
    <button
      className={`
        ${variantStyles[variant]} 
        ${sizeStyles[size]} 
        flex items-center justify-center gap-2
        rounded-md font-medium 
        transition-all duration-200 ease-in-out
        focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-primary-500
        ${className}
      `}
      {...props}
    >
      {iconLeft && <span className="flex-shrink-0">{iconLeft}</span>}
      <span>{children}</span>
      {iconRight && <span className="flex-shrink-0">{iconRight}</span>}
    </button>
  );
};

export default Button;
```

components\ui\Card.jsx
```jsx
import React from 'react';

const Card = ({ 
  children, 
  title,
  className = '',
  titleClassName = '',
  bodyClassName = '',
  variant = 'default',
  size = 'default',
  elevation = 'default',
  ...props 
}) => {
  const elevationClasses = {
    none: '',
    default: 'shadow-sm',
    raised: 'shadow-md',
    floating: 'shadow-lg',
  };

  const variantClasses = {
    default: 'bg-white border border-light-300',
    outlined: 'bg-white border border-light-300',
    filled: 'bg-light-100 border border-light-200',
  };

  // Default to p-3 (smaller than before) if no padding class is specified in className
  const hasPaddingClass = /\bp-\d+\b/.test(className);
  const paddingClass = hasPaddingClass ? '' : 'p-3';

  const baseClasses = 'rounded-lg';
  const elevationClass = elevationClasses[elevation] || elevationClasses.default;
  const variantClass = variantClasses[variant] || variantClasses.default;

  return (
    <div 
      className={`${baseClasses} ${elevationClass} ${variantClass} ${paddingClass} ${className}`}
      {...props}
    >
      {title && (
        <div className={`px-5 py-4 border-b border-light-400 font-medium ${titleClassName}`}>
          <h3 className="text-lg">{title}</h3>
        </div>
      )}
      <div className={`${size} ${bodyClassName}`}>
        {children}
      </div>
    </div>
  );
};

export default Card;
```

components\ui\ConfirmDialog.jsx
```jsx
import React from 'react';
import Card from './Card';
import Button from './Button';

const ConfirmDialog = ({ 
  isOpen = true,
  title = "Confirm Action", 
  message = "Are you sure you want to proceed?", 
  confirmText = "Confirm",
  cancelText = "Cancel",
  confirmVariant = "danger",
  onConfirm, 
  onCancel,
  isLoading = false
}) => {
  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-dark-800 bg-opacity-75 flex items-center justify-center z-50">
      <Card className="max-w-md w-full" elevation="default">
        <div className="p-4">
          <h3 className="text-lg font-medium mb-2 text-dark-700">{title}</h3>
          <p className="mb-3 text-dark-500">{message}</p>
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={onCancel}
              disabled={isLoading}
            >
              {cancelText}
            </Button>
            <Button
              variant={confirmVariant}
              onClick={onConfirm}
              disabled={isLoading}
            >
              {isLoading ? 'Processing...' : confirmText}
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default ConfirmDialog;
```

components\ui\DatePicker.jsx
```jsx
import React from 'react';

const DatePicker = ({
  label,
  value,
  onChange,
  placeholder = '',
  disabled = false,
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative">
        <input
          type="date"
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 pl-8 pr-3 border rounded-md
            ${error ? 'border-red-500' : 'border-gray-200'}
            ${disabled ? 'bg-gray-100 text-gray-500' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
          `}
        />
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-gray-400"
          >
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
      </div>
      {error && <p className="text-red-500 text-xs">{error}</p>}
    </div>
  );
};

export default DatePicker;
```

components\ui\EmptyState.jsx
```jsx
import React from 'react';

const EmptyState = ({ 
  title, 
  message, 
  icon = null,
  className = '',
  bgColor = 'bg-gray-50',
  textColor = 'text-gray-500'
}) => (
  <div className={`flex-1 flex items-center justify-center p-4 ${bgColor} ${textColor} ${className}`}>
    <div className="text-center">
      {icon}
      <p className="font-medium mb-1">{title}</p>
      {message && <p className="text-sm">{message}</p>}
    </div>
  </div>
);

export default EmptyState;
```

components\ui\ErrorDisplay.jsx
```jsx
import React from 'react';

const ErrorDisplay = ({ title, message, error }) => (
  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
    <h3 className="font-medium mb-1">{title}</h3>
    <p>{error?.message || message}</p>
  </div>
);

export default ErrorDisplay;
```

components\ui\Input.jsx
```jsx
import React from 'react';

const Input = ({
  label,
  type = 'text',
  value,
  onChange,
  placeholder = '',
  prefix = null,
  disabled = false,
  className = '',
  required = false,
  error = null,
}) => {
  return (
    <div className="space-y-1.5">
      {label && (
        <label className="text-sm font-medium flex items-center text-dark-600">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
      )}
      <div className="relative group">
        {prefix && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 group-hover:text-primary-500 transition-colors duration-200">
            {prefix}
          </div>
        )}
        <input
          type={type}
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            w-full h-10 rounded-md border shadow-sm
            ${error ? 'border-red-500' : 'border-gray-200 group-hover:border-primary-300'}
            ${prefix ? 'pl-8' : 'pl-3'}
            ${disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : 'bg-white text-gray-900'}
            focus:outline-none focus:ring-2 focus:ring-primary-400 focus:border-transparent
            transition-all duration-200 ease-in-out
            ${className}
          `}
        />
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-primary-200 group-hover:shadow-sm transition-all duration-200"></div>
        )}
      </div>
      {error && <p className="text-red-500 text-xs mt-1">{error}</p>}
    </div>
  );
};

export default Input;
```

components\ui\Loader.jsx
```jsx
import React from 'react';

const Loader = ({ size = 'md', color = 'blue' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12',
  };
  
  const colorClasses = {
    blue: 'text-blue-600',
    gray: 'text-gray-600',
    white: 'text-white',
  };
  
  return (
    <svg
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
};

export default Loader;
```

components\ui\LoadingSpinner.jsx
```jsx
import React from 'react';

const LoadingSpinner = ({ size = 'default', className = '' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    default: 'w-10 h-10',
    lg: 'w-16 h-16'
  };

  return (
    <div className={`border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin ${sizeClasses[size]} ${className}`} />
  );
};

export default LoadingSpinner;
```

components\ui\Select.jsx
```jsx
import React from 'react';

/**
 * Select component with consistent styling
 */
const Select = ({
  label,
  options = [],
  value,
  onChange,
  placeholder = 'Select an option',
  disabled = false,
  required = false,
  error = null,
  className = '',
  size = 'default',
}) => {
  const sizeStyles = {
    sm: 'h-8 px-2 text-sm',
    default: 'h-10 px-3 text-sm',
    lg: 'h-12 px-4 text-base',
  };
  
  return (
    <div className={`space-y-1.5 w-full ${className}`}>
      {label && (
        <label className="text-sm font-medium text-dark-600 flex items-center">
          {label}
          {required && <span className="text-status-error ml-1">*</span>}
        </label>
      )}
      
      <div className="relative w-full group">
        <select
          value={value || ''}
          onChange={(e) => onChange(e.target.value)}
          disabled={disabled}
          className={`
            w-full rounded-md appearance-none shadow-sm
            ${sizeStyles[size] || sizeStyles.default}
            transition-all duration-200 ease-in-out
            ${error ? 'border-status-error' : 'border-light-400 group-hover:border-light-500'}
            ${disabled ? 'bg-light-300 text-dark-400 cursor-not-allowed' : 'bg-light-100 text-dark-600'}
            focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-transparent
          `}
        >
          <option value="" disabled>
            {placeholder}
          </option>
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        
        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="text-dark-400 group-hover:text-dark-500 transition-colors duration-200"
          >
            <polyline points="6 9 12 15 18 9"></polyline>
          </svg>
        </div>
        
        {!error && !disabled && (
          <div className="absolute inset-0 border border-transparent rounded-md pointer-events-none group-hover:border-light-400 transition-all duration-200"></div>
        )}
      </div>
      
      {error && (
        <p className="text-status-error text-xs mt-1 animate-fade-in">{error}</p>
      )}
    </div>
  );
};

export default Select;
```

components\ui\StatusBadge.jsx
```jsx
import React from 'react';
import { STATUS_COLORS } from '../../lib/constants';

/**
 * Status badge component for displaying statuses with appropriate colors
 * @param {string} status - Status identifier (exact, acceptable, warning, alert, unknown)
 * @param {string} label - Text label to display
 * @param {string} size - Size variant (xs, sm, md, lg)
 */
const StatusBadge = ({ status, label, size = 'md' }) => {
  const sizeClasses = {
    xs: 'px-1 py-0.5 text-xs',
    sm: 'px-1.5 py-0.5 text-xs',
    md: 'px-2 py-1 text-xs',
    lg: 'px-3 py-1.5 text-sm',
  };

  const colorClass = STATUS_COLORS[status] || STATUS_COLORS.gray;
  const sizeClass = sizeClasses[size] || sizeClasses.md;

  // Format the display label for clarity
  const getDisplayLabel = () => {
    if (!label || label === 'N/A') return 'N/A';

    // Show symbols for common statuses
    switch (status) {
      case 'exact':
        return '✓ Exact';
      case 'acceptable':
        return '✓ ' + label;
      case 'unknown':
        return 'N/A';
      default:
        return label;
    }
  };

  return (
    <span className={`inline-flex items-center font-medium rounded-full ${colorClass} ${sizeClass}`}>
      {getDisplayLabel()}
    </span>
  );
};

export default StatusBadge;
```

hooks\useClientData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to fetch all clients
 * @param {string} provider - Optional provider filter
 * @returns {Object} - Query result with clients data
 */
export const useClientList = (provider = null) => {
  return useQuery(
    queryKeys.clients.all,
    () => api.getClients(provider ? { provider } : undefined),
    {
      keepPreviousData: true,
      staleTime: 1000 * 60 * 5, // 5 minutes
    }
  );
};

/**
 * Hook to fetch a single client by ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with client data
 */
export const useClient = (clientId) => {
  return useQuery(
    queryKeys.clients.detail(clientId),
    () => api.getClient(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client contract
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with contract data
 */
export const useClientContract = (clientId) => {
  return useQuery(
    queryKeys.clients.contract(clientId),
    () => api.getClientContract(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60 * 10, // 10 minutes - contracts change rarely
      onError: (error) => {
        console.error(`Error fetching contract for client ${clientId}:`, error);
      },
    }
  );
};

/**
 * Hook to fetch client dashboard data (replaces multiple API calls)
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with complete dashboard data
 */
export const useClientDashboard = (clientId) => {
  return useQuery(
    queryKeys.clients.dashboard(clientId),
    () => api.getClientDashboard(clientId),
    {
      enabled: !!clientId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching dashboard for client ${clientId}:`, error);
      },
    }
  );
};
```

hooks\useFileData.js
```js
import { useQuery } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';

/**
 * Hook to check if a payment has associated files
 * @param {number} paymentId - Payment ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for payment files
 */
export const usePaymentFiles = (paymentId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.payments.files(paymentId),
    () => api.getPaymentFiles(paymentId),
    {
      enabled: !!paymentId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error fetching files for payment ${paymentId}:`, error);
        return [];
      }
    }
  );
};

/**
 * Hook to check if a client has any associated files
 * @param {number} clientId - Client ID
 * @param {Object} options - Additional query options
 * @returns {Object} - Query result for client files check
 */
export const useClientFiles = (clientId, options = {}) => {
  const { enabled = true } = options;
  
  return useQuery(
    queryKeys.clients.files(clientId),
    () => api.checkClientFiles(clientId),
    {
      enabled: !!clientId && enabled,
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      retry: 1,
      onError: (error) => {
        console.error(`Error checking files for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Cache for payment file status to reduce API calls
 */
const paymentFileCache = new Map();

/**
 * Set file status for a payment in the cache
 * @param {number} paymentId - Payment ID
 * @param {boolean} hasFiles - Whether the payment has files
 */
export const setPaymentFileStatus = (paymentId, hasFiles) => {
  paymentFileCache.set(paymentId, !!hasFiles);
};

/**
 * Get file status for a payment from the cache
 * @param {number} paymentId - Payment ID
 * @returns {boolean|undefined} - True if has files, false if not, undefined if not in cache
 */
export const getPaymentFileStatus = (paymentId) => {
  return paymentFileCache.has(paymentId) 
    ? paymentFileCache.get(paymentId) 
    : undefined;
};

/**
 * Clear file status cache
 */
export const clearFileCache = () => {
  paymentFileCache.clear();
};

/**
 * Check if a payment has files with cache support
 * @param {number} paymentId - Payment ID
 * @returns {Promise<boolean>} - Promise resolving to true if payment has files
 */
export const checkPaymentHasFiles = async (paymentId) => {
  // Check cache first
  if (paymentFileCache.has(paymentId)) {
    return paymentFileCache.get(paymentId);
  }
  
  try {
    const result = await api.checkPaymentFiles(paymentId);
    const hasFiles = !!result?.has_files;
    
    // Update cache
    setPaymentFileStatus(paymentId, hasFiles);
    
    return hasFiles;
  } catch (error) {
    console.error(`Error checking files for payment ${paymentId}:`, error);
    return false;
  }
};
```

hooks\usePaymentData.js
```js
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../lib/api';
import { queryKeys } from '../store/queries';
import { clearFileCache } from './useFileData';

/**
 * Hook to fetch payment history for a client
 * @param {number} clientId - Client ID
 * @param {Object} options - Query options including pagination and filters
 * @returns {Object} - Query result with payments data
 */
export const usePaymentHistory = (clientId, options = {}) => {
  const { page = 1, limit = 10, year = null } = options;

  // Create params object without null/undefined values
  const params = { page, limit };
  if (year !== null) {
    params.year = year;
  }

  return useQuery(
    [...queryKeys.clients.payments(clientId), page, limit, year],
    () => api.getPayments(clientId, params),
    {
      enabled: !!clientId,
      keepPreviousData: true,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payments for client ${clientId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch a single payment
 * @param {number} paymentId - Payment ID
 * @returns {Object} - Query result with payment data
 */
export const usePayment = (paymentId) => {
  return useQuery(
    queryKeys.payments.detail(paymentId),
    () => api.getPayment(paymentId),
    {
      enabled: !!paymentId,
      staleTime: 1000 * 60, // 1 minute
      onError: (error) => {
        console.error(`Error fetching payment ${paymentId}:`, error);
      }
    }
  );
};

/**
 * Hook to fetch available periods for a contract
 * @param {number} contractId - Contract ID
 * @param {number} clientId - Client ID
 * @returns {Object} - Query result with periods data
 */
export const useAvailablePeriods = (contractId, clientId) => {
  return useQuery(
    queryKeys.contracts.periods(contractId, clientId),
    () => api.getAvailablePeriods(contractId, clientId),
    {
      enabled: !!contractId && !!clientId,
      staleTime: 1000 * 60 * 60, // 1 hour
      onError: (error) => {
        console.error(`Error fetching periods for contract ${contractId}:`, error);
      }
    }
  );
};

/**
 * Hook to create a new payment
 * @returns {Object} - Mutation object for creating payment
 */
export const useCreatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    (paymentData) => api.createPayment(paymentData),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));
      },
      onError: (error) => {
        console.error('Error creating payment:', error);
      }
    }
  );
};

/**
 * Hook to update an existing payment
 * @returns {Object} - Mutation object for updating payment
 */
export const useUpdatePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, data }) => api.updatePayment(id, data),
    {
      onSuccess: (data) => {
        // Invalidate all relevant queries
        queryClient.invalidateQueries(queryKeys.payments.detail(data.payment_id));
        queryClient.invalidateQueries(queryKeys.clients.payments(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.summary(data.client_id));
        queryClient.invalidateQueries(queryKeys.clients.detail(data.client_id));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error updating payment:', error);
      }
    }
  );
};

/**
 * Hook to delete a payment
 * @returns {Object} - Mutation object for deleting payment
 */
export const useDeletePayment = () => {
  const queryClient = useQueryClient();

  return useMutation(
    ({ id, clientId }) => api.deletePayment(id).then(() => ({ id, clientId })),
    {
      onSuccess: ({ id, clientId }) => {
        // Invalidate affected queries
        queryClient.invalidateQueries(queryKeys.clients.payments(clientId));
        queryClient.invalidateQueries(queryKeys.clients.summary(clientId));
        queryClient.invalidateQueries(queryKeys.clients.detail(clientId));

        // Clear file cache
        clearFileCache();
      },
      onError: (error) => {
        console.error('Error deleting payment:', error);
      }
    }
  );
};
```

layouts\MainLayout.jsx
```jsx
        <div className="flex-1 overflow-auto">
          <main className="container mx-auto px-4 pt-4 pb-5 card-container">
            {children}
          </main>
        </div> 
```

lib\api.js
```js
/**
 * API service for communicating with the backend
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';



/**
 * Perform an API request with error handling
 * @param {string} endpoint - API endpoint
 * @param {Object} options - Request options
 * @returns {Promise<any>} - Response data
 */
async function request(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };

  const config = {
    ...options,
    headers,
  };

  try {
    const response = await fetch(url, config);

    // Handle client errors (4xx)
    if (response.status >= 400 && response.status < 500) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || `API error: ${response.status} ${response.statusText}`);
    }

    // Handle server errors (5xx) - let React Query handle retries
    if (!response.ok) {
      throw new Error(`Server error: ${response.status} ${response.statusText}`);
    }

    // No content
    if (response.status === 204) {
      return null;
    }

    return await response.json();
  } catch (error) {
    // Provide more user-friendly error messages for network issues
    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
      throw new Error('Cannot connect to the server. Please check your network connection and make sure the backend is running.');
    }

    throw error;
  }
}


/**
 * API service with all available endpoints
 */
const api = {
  // Client endpoints
  getClients: (params) => {
    const queryString = params ? new URLSearchParams(params).toString() : '';
    return request(`/clients${queryString ? '?' + queryString : ''}`);
  },
  getClient: (id) => request(`/clients/${id}`),
  getClientDashboard: (id) => request(`/clients/${id}/dashboard`),

  // Contract endpoints
  getContract: (id) => request(`/contracts/${id}`),
  getClientContract: (clientId) => request(`/clients/${clientId}/contract`),
  getAvailablePeriods: (contractId, clientId) =>
    request(`/contracts/${contractId}/periods?client_id=${clientId}`),

  // Payment endpoints
  getPayments: (clientId, params = {}) => {
    const queryString = new URLSearchParams(params).toString();
    return request(`/clients/${clientId}/payments?${queryString}`);
  },
  getPayment: (id) => request(`/payments/${id}`),
  createPayment: (data) => request('/payments', {
    method: 'POST',
    body: JSON.stringify(data),
  }),
  updatePayment: (id, data) => request(`/payments/${id}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  }),
  deletePayment: (id) => request(`/payments/${id}`, {
    method: 'DELETE',
  }),

  // Calculation endpoints
  calculateFee: (contractId, totalAssets) => request('/calculate-fee', {
    method: 'POST',
    body: JSON.stringify({ contract_id: contractId, total_assets: totalAssets }),
  }),
  calculateVariance: (actualFee, expectedFee) => request(`/calculate-variance?actual_fee=${actualFee}&expected_fee=${expectedFee}`, {
    method: 'POST',
  }),

  // File endpoints
  checkPaymentFiles: (paymentId) =>
    request(`/files/check/payment/${paymentId}`),
  checkClientFiles: (clientId) =>
    request(`/files/check/client/${clientId}`),
  getPaymentFiles: (paymentId) =>
    request(`/files/payment/${paymentId}`),
};

export default api;
```

lib\constants.js
```js
/**
 * Application-wide constants
 */

// Month names used for displaying dates
export const MONTH_NAMES = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

// Payment methods used in forms and displays
export const PAYMENT_METHODS = [
  { label: 'Auto - ACH', value: 'Auto - ACH' },
  { label: 'Auto - Check', value: 'Auto - Check' },
  { label: 'Invoice - Check', value: 'Invoice - Check' },
  { label: 'Wire Transfer', value: 'Wire Transfer' },
  { label: 'Check', value: 'Check' },
];

// Status colors for status badges and indicators
export const STATUS_COLORS = {
  // Compliance statuses
  green: 'bg-green-100 text-green-800',
  yellow: 'bg-yellow-100 text-yellow-800',
  red: 'bg-red-100 text-red-800',

  // Fee variance statuses
  exact: 'bg-blue-100 text-blue-800',
  acceptable: 'bg-green-100 text-green-800',
  warning: 'bg-yellow-100 text-yellow-800',
  alert: 'bg-red-100 text-red-800',
  unknown: 'bg-gray-100 text-gray-800',
  gray: 'bg-gray-100 text-gray-800',
};

// Fee types
export const FEE_TYPES = {
  FLAT: 'flat',
  PERCENTAGE: 'percentage',
  PERCENT: 'percent'
};

// Payment schedules
export const PAYMENT_SCHEDULES = {
  MONTHLY: 'monthly',
  QUARTERLY: 'quarterly'
};

// Payment status
export const PAYMENT_STATUS = {
  PAID: 'Paid',
  DUE: 'Due',
  OVERDUE: 'Overdue'
};
```

lib\dateUtils.js
```js
import { format, parseISO } from 'date-fns';
import { MONTH_NAMES } from './constants';

/**
 * Format a date string or Date object to a human-readable format
 * @param {string|Date} dateInput - ISO date string or Date object
 * @param {string} formatStr - Optional format string
 * @returns {string} - Formatted date string
 */
export const formatDate = (dateInput, formatStr = 'MMM d, yyyy') => {
  if (!dateInput) return 'N/A';
  try {
    // Handle both string dates and Date objects
    const date = dateInput instanceof Date ? dateInput : parseISO(dateInput);
    return format(date, formatStr);
  } catch (error) {
    return 'Invalid Date';
  }
};

// Business logic functions moved to backend API
// calculateNextPaymentDue() - Use backend calculations instead

/**
 * Format applied period from payment data
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period string
 */
export const formatAppliedPeriod = (payment) => {
  if (!payment) return 'N/A';

  if (payment.applied_start_quarter) {
    return `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
  }

  if (payment.applied_start_month) {
    const monthIndex = payment.applied_start_month - 1; // Convert to 0-based index
    if (monthIndex >= 0 && monthIndex < 12) {
      return `${MONTH_NAMES[monthIndex]} ${payment.applied_start_month_year}`;
    }
  }

  return 'N/A';
};

/**
 * Format period range for split payments
 * @param {Object} payment - Payment object
 * @returns {string} - Formatted period range
 */
export const formatPeriodRange = (payment) => {
  if (!payment || !payment.is_split_payment) return formatAppliedPeriod(payment);

  let startPeriod, endPeriod;

  if (payment.applied_start_quarter) {
    startPeriod = `Q${payment.applied_start_quarter} ${payment.applied_start_quarter_year}`;
    endPeriod = `Q${payment.applied_end_quarter} ${payment.applied_end_quarter_year}`;
  } else if (payment.applied_start_month) {
    const startMonthIndex = payment.applied_start_month - 1;
    const endMonthIndex = payment.applied_end_month - 1;

    if (startMonthIndex >= 0 && startMonthIndex < 12 &&
      endMonthIndex >= 0 && endMonthIndex < 12) {
      startPeriod = `${MONTH_NAMES[startMonthIndex]} ${payment.applied_start_month_year}`;
      endPeriod = `${MONTH_NAMES[endMonthIndex]} ${payment.applied_end_month_year}`;
    } else {
      return 'Invalid Period';
    }
  } else {
    return 'N/A';
  }

  return `${startPeriod} - ${endPeriod}`;
};

// isPeriodInPast() - Business logic moved to backend
```

lib\formatUtils.js
```js
/**
 * Formatting utilities for the frontend.
 * This file contains only presentation/formatting functions, no business logic.
 */

import { FEE_TYPES } from './constants';

/**
 * Format a number as currency
 * @param {number} value - Number to format
 * @returns {string} - Formatted currency string
 */
export const formatCurrency = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Format a number as percentage
 * @param {number} value - Number to format (as a decimal, e.g. 0.42 for 42%)
 * @returns {string} - Formatted percentage string
 */
export const formatPercentage = (value) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

/**
 * Generate fee references for different payment frequencies
 * NOTE: This is display logic for fee reference tables.
 * TODO: Consider moving to backend API for Sprint 4+
 * 
 * @param {Object} contract - Contract object
 * @param {number} baseAssets - Base asset amount for percentage calculations (optional)
 * @returns {Object|null} - Object with monthly, quarterly, and annual rates
 */
export const generateFeeReferences = (contract, baseAssets = null) => {
  if (!contract) return null;

  let monthlyRate, quarterlyRate, annualRate;

  if (contract.fee_type === FEE_TYPES.FLAT) {
    // Flat rate contracts: scale by frequency
    if (contract.payment_schedule === 'monthly') {
      monthlyRate = contract.flat_rate;
      quarterlyRate = monthlyRate * 3;
      annualRate = monthlyRate * 12;
    } else {
      // Quarterly payment schedule
      quarterlyRate = contract.flat_rate;
      monthlyRate = quarterlyRate / 3;
      annualRate = quarterlyRate * 4;
    }
    
    return {
      monthly: formatCurrency(monthlyRate),
      quarterly: formatCurrency(quarterlyRate),
      annual: formatCurrency(annualRate)
    };
  } else if (contract.percent_rate) {
    // Percentage contracts: the stored rate is already scaled to payment frequency
    // We need to show the effective dollar amounts based on frequency
    const percentRate = contract.percent_rate;
    
    if (baseAssets) {
      // Calculate dollar amounts based on frequency
      if (contract.payment_schedule === 'monthly') {
        monthlyRate = baseAssets * percentRate;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly payment schedule
        quarterlyRate = baseAssets * percentRate;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: formatCurrency(monthlyRate),
        quarterly: formatCurrency(quarterlyRate),
        annual: formatCurrency(annualRate)
      };
    } else {
      // No assets available, show percentage rates with proper scaling
      if (contract.payment_schedule === 'monthly') {
        // Monthly rate is the base
        monthlyRate = percentRate * 100;
        quarterlyRate = monthlyRate * 3;
        annualRate = monthlyRate * 12;
      } else {
        // Quarterly rate is the base
        quarterlyRate = percentRate * 100;
        monthlyRate = quarterlyRate / 3;
        annualRate = quarterlyRate * 4;
      }
      
      return {
        monthly: `${monthlyRate.toFixed(3)}%`,
        quarterly: `${quarterlyRate.toFixed(3)}%`,
        annual: `${annualRate.toFixed(3)}%`
      };
    }
  }

  return null;
};
```