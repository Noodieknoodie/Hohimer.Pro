models\__init__.py
```py

```

models\period.py
```py
"""
Period model to replace string-based period handling.
Fixes bugs with period comparisons and arithmetic operations.
"""
from typing import Union, List
from datetime import datetime
import re


class Period:
    """
    A Period represents either a monthly or quarterly period with proper comparison and arithmetic.
    
    Internal storage uses integers for year and value (month 1-12 or quarter 1-4).
    String representation maintained for backward compatibility with existing APIs.
    """
    
    def __init__(self, year: int, value: int, is_monthly: bool = True):
        """
        Initialize a Period.
        
        Args:
            year: The year (e.g., 2023, 2024)
            value: The month (1-12) for monthly periods or quarter (1-4) for quarterly periods
            is_monthly: True for monthly periods, False for quarterly periods
        """
        self.year = year
        self.value = value
        self.is_monthly = is_monthly
        
        # Validate inputs
        if is_monthly and not (1 <= value <= 12):
            raise ValueError(f"Monthly period value must be 1-12, got {value}")
        if not is_monthly and not (1 <= value <= 4):
            raise ValueError(f"Quarterly period value must be 1-4, got {value}")
        if year < 1900 or year > 2100:
            raise ValueError(f"Year must be reasonable (1900-2100), got {year}")
    
    @classmethod
    def from_string(cls, period_str: str) -> 'Period':
        """
        Parse a period string like "3-2024" (monthly) or "1-2024" (quarterly).
        
        For quarterly periods, we assume the format is "Q-YYYY" where Q is 1-4.
        For monthly periods, we assume the format is "M-YYYY" where M is 1-12.
        
        The distinction is made based on the value: 1-4 suggests quarterly, 5-12 suggests monthly.
        Values of 1-4 are ambiguous and default to monthly unless context suggests otherwise.
        """
        if not period_str or not isinstance(period_str, str):
            raise ValueError(f"Period string cannot be empty or None: {period_str}")
        
        # Handle the format with Q prefix for quarters (like "Q1-2024")
        quarter_match = re.match(r'^Q?(\d+)-(\d{4})$', period_str.strip())
        if quarter_match:
            value = int(quarter_match.group(1))
            year = int(quarter_match.group(2))
            
            # If it starts with Q or the value is clearly quarterly (1-4 and formatted as Q)
            if period_str.strip().startswith('Q'):
                return cls(year, value, is_monthly=False)
            
            # Otherwise use heuristic: 1-4 could be either, 5-12 is definitely monthly
            if 1 <= value <= 4:
                # Ambiguous case - default to monthly for backward compatibility
                # unless the format suggests quarterly
                return cls(year, value, is_monthly=True)
            elif 5 <= value <= 12:
                return cls(year, value, is_monthly=True)
            else:
                raise ValueError(f"Invalid period value: {value}")
        
        # If no match, try simple number-year format
        parts = period_str.strip().split('-')
        if len(parts) != 2:
            raise ValueError(f"Period string must be in format 'value-year': {period_str}")
        
        try:
            value = int(parts[0])
            year = int(parts[1])
        except ValueError:
            raise ValueError(f"Invalid period format - non-numeric values: {period_str}")
        
        # Use heuristic to determine if monthly or quarterly
        if 1 <= value <= 4:
            # Could be either - check if it looks like a quarter
            # For backward compatibility, default to monthly
            return cls(year, value, is_monthly=True)
        elif 5 <= value <= 12:
            return cls(year, value, is_monthly=True)
        else:
            raise ValueError(f"Invalid period value: {value}")
    
    @classmethod
    def from_quarterly_string(cls, period_str: str) -> 'Period':
        """
        Explicitly parse as quarterly period.
        Use this when you know the period should be quarterly.
        """
        parts = period_str.strip().replace('Q', '').split('-')
        if len(parts) != 2:
            raise ValueError(f"Quarterly period string must be in format 'Q-year': {period_str}")
        
        try:
            quarter = int(parts[0])
            year = int(parts[1])
        except ValueError:
            raise ValueError(f"Invalid quarterly period format: {period_str}")
        
        return cls(year, quarter, is_monthly=False)
    
    def to_string(self) -> str:
        """
        Convert to string format for API serialization and backward compatibility.
        Returns "month-year" for monthly or "quarter-year" for quarterly periods.
        """
        return f"{self.value}-{self.year}"
    
    def to_display_string(self) -> str:
        """
        Convert to human-readable format.
        Returns "January 2024" for monthly or "Q1 2024" for quarterly periods.
        """
        if self.is_monthly:
            month_names = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ]
            return f"{month_names[self.value - 1]} {self.year}"
        else:
            return f"Q{self.value} {self.year}"
    
    def __eq__(self, other) -> bool:
        """Check if two periods are equal."""
        if not isinstance(other, Period):
            return False
        return (self.year == other.year and 
                self.value == other.value and 
                self.is_monthly == other.is_monthly)
    
    def __lt__(self, other) -> bool:
        """Check if this period comes before another period."""
        if not isinstance(other, Period):
            raise TypeError(f"Cannot compare Period with {type(other)}")
        
        # Different period types cannot be compared
        if self.is_monthly != other.is_monthly:
            raise ValueError("Cannot compare monthly and quarterly periods")
        
        # Compare by year first
        if self.year != other.year:
            return self.year < other.year
        
        # Same year, compare by value
        return self.value < other.value
    
    def __le__(self, other) -> bool:
        """Check if this period comes before or equals another period."""
        return self == other or self < other
    
    def __gt__(self, other) -> bool:
        """Check if this period comes after another period."""
        return not self <= other
    
    def __ge__(self, other) -> bool:
        """Check if this period comes after or equals another period."""
        return not self < other
    
    def __hash__(self) -> int:
        """Make Period hashable for use in sets and dict keys."""
        return hash((self.year, self.value, self.is_monthly))
    
    def __repr__(self) -> str:
        """String representation for debugging."""
        period_type = "monthly" if self.is_monthly else "quarterly"
        return f"Period({self.year}, {self.value}, {period_type})"
    
    def add_months(self, months: int) -> 'Period':
        """
        Add months to a monthly period.
        Raises ValueError if called on quarterly period.
        """
        if not self.is_monthly:
            raise ValueError("Cannot add months to quarterly period")
        
        # Calculate new month and year
        total_months = (self.year * 12 + self.value - 1) + months
        new_year = total_months // 12
        new_month = (total_months % 12) + 1
        
        return Period(new_year, new_month, is_monthly=True)
    
    def add_quarters(self, quarters: int) -> 'Period':
        """
        Add quarters to a quarterly period.
        Raises ValueError if called on monthly period.
        """
        if self.is_monthly:
            raise ValueError("Cannot add quarters to monthly period")
        
        # Calculate new quarter and year
        total_quarters = (self.year * 4 + self.value - 1) + quarters
        new_year = total_quarters // 4
        new_quarter = (total_quarters % 4) + 1
        
        return Period(new_year, new_quarter, is_monthly=False)
    
    def subtract_months(self, months: int) -> 'Period':
        """Subtract months from a monthly period."""
        return self.add_months(-months)
    
    def subtract_quarters(self, quarters: int) -> 'Period':
        """Subtract quarters from a quarterly period."""
        return self.add_quarters(-quarters)
    
    def get_previous_period(self) -> 'Period':
        """Get the period immediately before this one."""
        if self.is_monthly:
            return self.subtract_months(1)
        else:
            return self.subtract_quarters(1)
    
    def get_next_period(self) -> 'Period':
        """Get the period immediately after this one."""
        if self.is_monthly:
            return self.add_months(1)
        else:
            return self.add_quarters(1)
    
    def periods_between(self, other: 'Period') -> int:
        """
        Calculate the number of periods between this period and another.
        Returns positive if other is after this period, negative if before.
        """
        if not isinstance(other, Period):
            raise TypeError(f"Cannot calculate periods between Period and {type(other)}")
        
        if self.is_monthly != other.is_monthly:
            raise ValueError("Cannot calculate periods between monthly and quarterly periods")
        
        if self.is_monthly:
            this_total = self.year * 12 + self.value - 1
            other_total = other.year * 12 + other.value - 1
            return other_total - this_total
        else:
            this_total = self.year * 4 + self.value - 1
            other_total = other.year * 4 + other.value - 1
            return other_total - this_total
    
    @classmethod
    def generate_range(cls, start: 'Period', end: 'Period') -> List['Period']:
        """
        Generate a list of periods from start to end (inclusive).
        Both periods must be the same type (monthly or quarterly).
        """
        if not isinstance(start, Period) or not isinstance(end, Period):
            raise TypeError("Both start and end must be Period objects")
        
        if start.is_monthly != end.is_monthly:
            raise ValueError("Start and end periods must be the same type")
        
        if start > end:
            raise ValueError("Start period must be before or equal to end period")
        
        periods = []
        current = start
        
        while current <= end:
            periods.append(Period(current.year, current.value, current.is_monthly))
            current = current.get_next_period()
        
        return periods
    
    @classmethod
    def get_current_period(cls, is_monthly: bool = True) -> 'Period':
        """Get the current period based on today's date."""
        today = datetime.now()
        
        if is_monthly:
            return cls(today.year, today.month, is_monthly=True)
        else:
            quarter = (today.month - 1) // 3 + 1
            return cls(today.year, quarter, is_monthly=False)
    
    @classmethod
    def get_previous_period_for_schedule(cls, schedule: str) -> 'Period':
        """
        Get the previous period for arrears payment based on payment schedule.
        
        Args:
            schedule: "monthly" or "quarterly"
        
        Returns:
            The previous period (for arrears payment logic)
        """
        is_monthly = schedule.lower() == "monthly"
        current = cls.get_current_period(is_monthly)
        return current.get_previous_period()
```

models\schemas.py
```py
"""
Consolidated model schemas for the financial advisory application.

This module contains the 4 essential models that replace the previous 15+ redundant model classes.
All models use optional fields to handle different use cases (list views, detail views, create/update operations).
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime


class Client(BaseModel):
    """
    Consolidated client model that replaces Client, ClientMetrics, and ClientSummary.
    Uses optional fields to handle different response contexts.
    """
    # Core client fields (always present)
    client_id: int
    display_name: str
    full_name: str
    ima_signed_date: Optional[str] = None
    onedrive_folder_path: Optional[str] = None
    
    # Contract info (from joins)
    provider_name: Optional[str] = None
    
    # Calculated status fields (for dashboard and list views)
    compliance_status: Optional[str] = None  # red/yellow/green
    compliance_reason: Optional[str] = None
    current_status: Optional[str] = None  # Due/Current/Overdue
    current_period: Optional[str] = None
    overdue_periods: List[str] = []
    
    # Payment metrics (for detailed views)
    last_payment_date: Optional[str] = None
    last_payment_amount: Optional[float] = None
    last_payment_quarter: Optional[int] = None
    last_payment_year: Optional[int] = None
    total_ytd_payments: Optional[float] = None
    avg_quarterly_payment: Optional[float] = None
    last_recorded_assets: Optional[float] = None
    
    # Enhanced data (for detailed responses)
    contract: Optional[Dict[str, Any]] = None
    quarterly_summaries: Optional[List[Dict[str, Any]]] = None
    yearly_summaries: Optional[List[Dict[str, Any]]] = None
    
    class Config:
        # Support ORM mode for database integration
        orm_mode = True


class Contract(BaseModel):
    """
    Consolidated contract model that replaces Contract, ContractBase, and ExpectedFeeCalculation.
    Uses optional fields for fee calculation results and metadata.
    """
    # Core contract fields (always present)
    contract_id: int
    client_id: int
    provider_name: str
    fee_type: str  # PERCENTAGE or FLAT
    payment_schedule: str  # Monthly or Quarterly
    
    # Contract details (optional)
    contract_number: Optional[str] = None
    contract_start_date: Optional[str] = None
    percent_rate: Optional[float] = None
    flat_rate: Optional[float] = None
    num_people: Optional[int] = None
    notes: Optional[str] = None
    
    # Fee calculation results (when calculation is performed)
    expected_fee: Optional[float] = None
    calculation_method: Optional[str] = None
    
    class Config:
        orm_mode = True


class Payment(BaseModel):
    """
    Consolidated payment model that replaces Payment, PaymentBase, PaymentCreate, and PaymentWithDetails.
    Uses optional fields to handle create operations and enhanced responses.
    """
    # Core payment fields
    payment_id: Optional[int] = None  # None for create operations
    contract_id: int
    client_id: int
    received_date: str
    actual_fee: Optional[float] = None
    
    # Asset and fee tracking
    total_assets: Optional[float] = None
    expected_fee: Optional[float] = None
    
    # Payment metadata
    method: Optional[str] = None
    notes: Optional[str] = None
    
    # Period application (for split payments)
    applied_start_month: Optional[int] = None
    applied_start_month_year: Optional[int] = None
    applied_end_month: Optional[int] = None
    applied_end_month_year: Optional[int] = None
    applied_start_quarter: Optional[int] = None
    applied_start_quarter_year: Optional[int] = None
    applied_end_quarter: Optional[int] = None
    applied_end_quarter_year: Optional[int] = None
    
    # Enhanced fields (from joins and calculations)
    client_name: Optional[str] = None
    provider_name: Optional[str] = None
    fee_type: Optional[str] = None
    percent_rate: Optional[float] = None
    flat_rate: Optional[float] = None
    payment_schedule: Optional[str] = None
    
    # Calculated fields (for detailed responses)
    is_split_payment: bool = False
    periods: Optional[List[Dict[str, Any]]] = None
    variance: Optional[Dict[str, Any]] = None
    has_files: bool = False
    
    class Config:
        orm_mode = True
        validate_assignment = True


class File(BaseModel):
    """
    Consolidated file model that replaces File, FileBase, PaymentFile, and FileWithPayment.
    Uses optional fields for payment relationships and file metadata.
    """
    # Core file fields
    file_id: Optional[int] = None  # None for create operations
    client_id: int
    file_name: str
    onedrive_path: str
    uploaded_at: Optional[str] = None
    
    # Payment relationship (optional)
    payment_id: Optional[int] = None
    linked_at: Optional[str] = None
    
    # Enhanced fields for file operations
    full_path: Optional[str] = None  # Complete OneDrive path
    exists: Optional[bool] = None  # File existence check result
    size: Optional[int] = None  # File size in bytes
    
    class Config:
        orm_mode = True


# Dashboard response models for unified client data
class PaymentStatusInfo(BaseModel):
    """Payment status information for dashboard responses"""
    overdue_periods: List[str]
    current_status: str
    current_period: str


class ComplianceInfo(BaseModel):
    """Compliance status information for dashboard responses"""
    status: str  # "compliant" or "non_compliant"
    reason: str
    color: str  # "red", "yellow", "green" for UI


class NextPaymentDue(BaseModel):
    """Next payment due information for dashboard responses"""
    period: str
    due_date: Optional[str]
    expected_fee: Optional[float]


class ClientDashboard(BaseModel):
    """Complete dashboard data for a client in a single response"""
    client: Client
    contract: Optional[Contract]
    payment_status: PaymentStatusInfo
    compliance: ComplianceInfo
    recent_payments: List[Payment]
    next_payment_due: NextPaymentDue


# Legacy support model for available periods (to maintain API compatibility)
class AvailablePeriods(BaseModel):
    """Available periods for payment form (maintains backward compatibility)"""
    periods: List[Dict[str, Any]]


# Type aliases for clarity
ClientCreate = Client  # Same model, payment_id will be None
ContractCreate = Contract  # Same model, contract_id will be None  
PaymentCreate = Payment  # Same model, payment_id will be None
FileCreate = File  # Same model, file_id will be None
```

repositories\__init__.py
```py
"""
Repository layer for the application.
Consolidates business logic and SQL queries from scattered service files.
"""

from .calculation_repository import CalculationRepository
from .payment_repository import PaymentRepository

__all__ = ['CalculationRepository', 'PaymentRepository']
```

repositories\calculation_repository.py
```py
"""
Calculation Repository - Centralized business logic calculations.
Consolidates fee calculations and payment status logic from multiple services.
"""

from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime
from core.database import execute_query
from models.schemas import Contract
from services.contract_service import get_contract_by_id

# Constants
MONTH_NAMES = [
    "January", "February", "March", "April", "May", "June", 
    "July", "August", "September", "October", "November", "December"
]

class CalculationRepository:
    """Centralized repository for all business calculations"""
    
    @staticmethod
    def calculate_expected_fee(contract_id: int, total_assets: Optional[float] = None) -> Contract:
        """
        Calculate the expected fee based on contract terms and total assets.
        This is the COMPLETE version from contract_service.py (lines 37-95)
        """
        contract = get_contract_by_id(contract_id)
        
        if not contract:
            # Return a Contract object with minimal fields when contract not found
            return Contract(
                contract_id=contract_id,
                client_id=0,
                provider_name="Unknown",
                fee_type="unknown",
                payment_schedule="Unknown",
                expected_fee=None,
                calculation_method="Contract not found"
            )
        
        # Handle flat fee contracts
        if contract.fee_type == "flat":
            # Return contract with calculated fee for flat rate
            contract_dict = contract.__dict__.copy()
            contract_dict.update({
                "expected_fee": contract.flat_rate,
                "calculation_method": "Flat fee"
            })
            return Contract(**contract_dict)
        
        # Handle percentage-based fees
        if contract.fee_type in ["percentage", "percent"]:
            # Try to use provided assets first
            if not total_assets:
                # If no assets provided, try to find last recorded assets
                assets_query = """
                    SELECT last_recorded_assets
                    FROM client_metrics
                    WHERE client_id = :client_id
                """
                
                metrics_data = execute_query(
                    assets_query, 
                    {"client_id": contract.client_id}, 
                    fetch_one=True
                )
                
                if metrics_data and metrics_data.get("last_recorded_assets"):
                    total_assets = metrics_data["last_recorded_assets"]
            
            # Calculate fee if we have both assets and rate
            if total_assets and contract.percent_rate:
                expected_fee = total_assets * contract.percent_rate
                rate_percentage = contract.percent_rate * 100
                
                # Return contract with calculated percentage fee
                contract_dict = contract.__dict__.copy()
                contract_dict.update({
                    "expected_fee": expected_fee,
                    "calculation_method": f"{rate_percentage:.4f}% of ${total_assets:,.2f}"
                })
                return Contract(**contract_dict)
        
        # If we get here, we couldn't calculate a fee
        # Return contract with no calculated fee when unable to calculate
        contract_dict = contract.__dict__.copy()
        contract_dict.update({
            "expected_fee": None,
            "calculation_method": "Unable to calculate (missing data)"
        })
        return Contract(**contract_dict)
    
    @staticmethod
    def calculate_expected_fee_from_payment(payment: Dict[str, Any]) -> Optional[float]:
        """
        Calculate expected fee from payment dict (simplified version for internal use)
        This replaces the simple version from payment_service.py
        """
        if payment.get("fee_type") == "flat" and payment.get("flat_rate") is not None:
            return payment.get("flat_rate")
        elif payment.get("fee_type") in ["percentage", "percent"] and payment.get("percent_rate") is not None:
            if payment.get("total_assets") is not None:
                return payment.get("total_assets") * payment.get("percent_rate")
        return None
    
    @staticmethod
    def calculate_payment_status(client_id: int) -> Dict[str, Any]:
        """
        Calculate payment status - moved from client_service.py lines 73-194
        Returns: {"overdue_periods": [], "current_status": "Due", "current_period": ""}
        """
        # Get the payment schedule and last payment info
        query = """
            SELECT 
                ct.payment_schedule,
                p.received_date as last_payment_date,
                p.applied_end_month,
                p.applied_end_month_year,
                p.applied_end_quarter,
                p.applied_end_quarter_year
            FROM contracts ct
            LEFT JOIN (
                SELECT * FROM payments 
                WHERE client_id = :client_id AND valid_to IS NULL
                ORDER BY received_date DESC
                LIMIT 1
            ) p ON ct.client_id = p.client_id
            WHERE ct.client_id = :client_id AND ct.valid_to IS NULL
        """
        result = execute_query(query, {"client_id": client_id}, fetch_one=True)
        
        # If no contract, return default values
        if not result:
            return {
                "overdue_periods": [],
                "current_status": "Due",
                "current_period": CalculationRepository._get_current_period("monthly")
            }
        
        payment_schedule = result["payment_schedule"]
        today = datetime.now()
        current_month = today.month
        current_year = today.year
        current_quarter = (today.month - 1) // 3 + 1
        
        overdue_periods = []
        
        # If no payments yet, they're missing the previous period
        if not result["last_payment_date"]:
            # Just show previous period as overdue
            if payment_schedule.lower() == "monthly":
                prev_month = current_month - 1 if current_month > 1 else 12
                prev_year = current_year if current_month > 1 else current_year - 1
                overdue_periods.append(f"{MONTH_NAMES[prev_month - 1]} {prev_year}")
            else:
                prev_quarter = current_quarter - 1 if current_quarter > 1 else 4
                prev_year = current_year if current_quarter > 1 else current_year - 1
                overdue_periods.append(f"Q{prev_quarter} {prev_year}")
            
            return {
                "overdue_periods": overdue_periods,
                "current_status": "Overdue",
                "current_period": CalculationRepository._get_current_period(payment_schedule)
            }
        
        # Check payment status based on schedule
        is_current_paid = False
        is_previous_paid = False
        
        if payment_schedule.lower() == "monthly":
            if result["applied_end_month"] and result["applied_end_month_year"]:
                last_paid_month = result["applied_end_month"]
                last_paid_year = result["applied_end_month_year"]
                
                # Calculate previous month
                prev_month = current_month - 1 if current_month > 1 else 12
                prev_year = current_year if current_month > 1 else current_year - 1
                
                # Check if current month is paid
                is_current_paid = (last_paid_month == current_month and last_paid_year == current_year)
                
                # Check if previous month is paid
                is_previous_paid = (
                    (last_paid_month == current_month and last_paid_year == current_year) or
                    (last_paid_month == prev_month and last_paid_year == prev_year)
                )
                
                # If previous month not paid, it's overdue
                if not is_previous_paid:
                    overdue_periods.append(f"{MONTH_NAMES[prev_month - 1]} {prev_year}")
        else:  # quarterly
            if result["applied_end_quarter"] and result["applied_end_quarter_year"]:
                last_paid_quarter = result["applied_end_quarter"]
                last_paid_year = result["applied_end_quarter_year"]
                
                # Calculate previous quarter
                prev_quarter = current_quarter - 1 if current_quarter > 1 else 4
                prev_year = current_year if current_quarter > 1 else current_year - 1
                
                # Check if current quarter is paid
                is_current_paid = (last_paid_quarter == current_quarter and last_paid_year == current_year)
                
                # Check if previous quarter is paid
                is_previous_paid = (
                    (last_paid_quarter == current_quarter and last_paid_year == current_year) or
                    (last_paid_quarter == prev_quarter and last_paid_year == prev_year)
                )
                
                # If previous quarter not paid, it's overdue
                if not is_previous_paid:
                    overdue_periods.append(f"Q{prev_quarter} {prev_year}")
        
        # Determine overall status
        if overdue_periods:
            current_status = "Overdue"
        elif is_current_paid:
            current_status = "Current"
        else:
            current_status = "Due"
        
        return {
            "overdue_periods": overdue_periods,
            "current_status": current_status,
            "current_period": CalculationRepository._get_current_period(payment_schedule)
        }
    
    @staticmethod
    def map_status_to_compliance(payment_status: Dict[str, Any]) -> Tuple[str, str]:
        """
        Consolidate compliance mapping from client_service.py
        Returns: (compliance_status, compliance_reason)
        """
        current_status = payment_status.get("current_status", "Due")
        overdue_periods = payment_status.get("overdue_periods", [])
        
        if current_status == "Overdue":
            return "non_compliant", f"Overdue: {', '.join(overdue_periods)}"
        elif current_status == "Current":
            return "compliant", "All payments up to date"
        else:  # Due
            return "compliant", "Payment due for current period"
    
    @staticmethod
    def _get_current_period(schedule_type: str) -> str:
        """Helper function to get the current period formatted as string"""
        today = datetime.now()
        if schedule_type.lower() == "monthly":
            return f"{MONTH_NAMES[today.month - 1]} {today.year}"
        else:
            current_quarter = (today.month - 1) // 3 + 1
            return f"Q{current_quarter} {today.year}"
```

repositories\payment_repository.py
```py
"""
Payment Repository - Centralized SQL queries for payment operations.
Consolidates payment queries from payment_service.py and other services.
"""

from typing import Dict, Any, Optional, List
from core.database import execute_query

class PaymentRepository:
    """Centralized repository for payment data access"""
    
    # Base query extracted from payment_service.py lines 18-36
    PAYMENT_BASE_SELECT = """
        SELECT 
            p.payment_id, p.contract_id, p.client_id, p.received_date, 
            p.total_assets, p.expected_fee, p.actual_fee, p.method, p.notes,
            p.applied_start_month, p.applied_start_month_year, 
            p.applied_end_month, p.applied_end_month_year,
            p.applied_start_quarter, p.applied_start_quarter_year, 
            p.applied_end_quarter, p.applied_end_quarter_year,
            c.display_name as client_name, co.provider_name, co.fee_type, 
            co.percent_rate, co.flat_rate, co.payment_schedule,
            COALESCE(pv.has_file, 0) as has_file
        FROM payments p
        JOIN clients c ON p.client_id = c.client_id
        LEFT JOIN contracts co ON p.contract_id = co.contract_id
        LEFT JOIN (
            SELECT DISTINCT payment_id, has_file 
            FROM payment_file_view
        ) pv ON p.payment_id = pv.payment_id
    """
    
    @staticmethod
    def get_by_client(
        client_id: int, 
        page: int = 1, 
        limit: int = 50, 
        year: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        Get payments for a client with pagination and optional year filter.
        Consolidates logic from payment_service.py get_client_payments()
        """
        offset = (page - 1) * limit
        params = {"client_id": client_id, "limit": limit, "offset": offset}
        
        query = PaymentRepository.PAYMENT_BASE_SELECT + """
            WHERE p.client_id = :client_id AND p.valid_to IS NULL
        """
        
        if year:
            query += """ 
                AND (
                    (p.applied_start_month_year = :year) OR 
                    (p.applied_end_month_year = :year) OR
                    (p.applied_start_quarter_year = :year) OR 
                    (p.applied_end_quarter_year = :year)
                )
            """
            params["year"] = year
            
        query += " ORDER BY p.received_date DESC LIMIT :limit OFFSET :offset"
        
        return execute_query(query, params)
    
    @staticmethod
    def get_by_id(payment_id: int) -> Optional[Dict[str, Any]]:
        """
        Get a single payment by ID.
        Consolidates logic from payment_service.py get_payment_by_id()
        """
        query = PaymentRepository.PAYMENT_BASE_SELECT + """
            WHERE p.payment_id = :payment_id AND p.valid_to IS NULL
        """
        
        return execute_query(
            query, 
            {"payment_id": payment_id}, 
            fetch_one=True
        )
    
    @staticmethod
    def get_recent_by_client(client_id: int, limit: int = 5) -> List[Dict[str, Any]]:
        """
        Get recent payments for a client (for dashboard use).
        """
        query = PaymentRepository.PAYMENT_BASE_SELECT + """
            WHERE p.client_id = :client_id AND p.valid_to IS NULL
            ORDER BY p.received_date DESC 
            LIMIT :limit
        """
        
        return execute_query(query, {"client_id": client_id, "limit": limit})
    
    @staticmethod
    def get_last_payment_for_client(client_id: int) -> Optional[Dict[str, Any]]:
        """
        Get the most recent payment for a client.
        Used in payment status calculations.
        """
        query = """
            SELECT 
                p.received_date,
                p.applied_end_month,
                p.applied_end_month_year,
                p.applied_end_quarter,
                p.applied_end_quarter_year,
                p.actual_fee,
                p.total_assets
            FROM payments p
            WHERE p.client_id = :client_id AND p.valid_to IS NULL
            ORDER BY p.received_date DESC
            LIMIT 1
        """
        
        return execute_query(
            query, 
            {"client_id": client_id}, 
            fetch_one=True
        )
    
    @staticmethod
    def create_payment(payment_data: Dict[str, Any]) -> bool:
        """
        Create a new payment record.
        """
        query = """
            INSERT INTO payments (
                contract_id, client_id, received_date, total_assets,
                expected_fee, actual_fee, method, notes,
                applied_start_month, applied_start_month_year,
                applied_end_month, applied_end_month_year,
                applied_start_quarter, applied_start_quarter_year,
                applied_end_quarter, applied_end_quarter_year
            ) VALUES (
                :contract_id, :client_id, :received_date, :total_assets,
                :expected_fee, :actual_fee, :method, :notes,
                :applied_start_month, :applied_start_month_year,
                :applied_end_month, :applied_end_month_year,
                :applied_start_quarter, :applied_start_quarter_year,
                :applied_end_quarter, :applied_end_quarter_year
            )
        """
        
        result = execute_query(query, payment_data)
        return result["rowcount"] > 0
    
    @staticmethod
    def update_payment(payment_id: int, payment_data: Dict[str, Any]) -> bool:
        """
        Update an existing payment record.
        """
        # Build dynamic update query based on provided fields
        set_clauses = []
        params = {"payment_id": payment_id}
        
        for field, value in payment_data.items():
            if field != "payment_id":  # Don't update the ID
                set_clauses.append(f"{field} = :{field}")
                params[field] = value
        
        if not set_clauses:
            return False
            
        query = f"""
            UPDATE payments 
            SET {', '.join(set_clauses)}
            WHERE payment_id = :payment_id AND valid_to IS NULL
        """
        
        result = execute_query(query, params)
        return result["rowcount"] > 0
    
    @staticmethod
    def soft_delete_payment(payment_id: int) -> bool:
        """
        Soft delete a payment by setting valid_to timestamp.
        """
        query = """
            UPDATE payments 
            SET valid_to = datetime('now') 
            WHERE payment_id = :payment_id AND valid_to IS NULL
        """
        
        result = execute_query(query, {"payment_id": payment_id})
        return result["rowcount"] > 0
```